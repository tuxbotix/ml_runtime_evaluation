<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="491"><g><title>__memset_sse2_unaligned_erms (2 samples, 0.41%)</title><rect x="2.6477%" y="277" width="0.4073%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="2"/><text x="2.8977%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNN::allocateTensors(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::OperandPlaceholder, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder&gt; &gt;&amp;) (6 samples, 1.22%)</title><rect x="2.6477%" y="309" width="1.2220%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="6"/><text x="2.8977%" y="319.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append(unsigned long) (6 samples, 1.22%)</title><rect x="2.6477%" y="293" width="1.2220%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="6"/><text x="2.8977%" y="303.50"></text></g><g><title>operator new(unsigned long) (4 samples, 0.81%)</title><rect x="3.0550%" y="277" width="0.8147%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="4"/><text x="3.3050%" y="287.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.81%)</title><rect x="3.0550%" y="261" width="0.8147%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="4"/><text x="3.3050%" y="271.50"></text></g><g><title>_int_malloc (4 samples, 0.81%)</title><rect x="3.0550%" y="245" width="0.8147%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="4"/><text x="3.3050%" y="255.50"></text></g><g><title>malloc_consolidate (3 samples, 0.61%)</title><rect x="3.2587%" y="229" width="0.6110%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="3"/><text x="3.5087%" y="239.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="3.6660%" y="213" width="0.2037%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="1"/><text x="3.9160%" y="223.50"></text></g><g><title>NeuralNetwork::CompiledNN::assignOperands(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt;&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, std::__cxx11::list&lt;NeuralNetwork::CompiledNN::OperandPlaceholder, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder&gt; &gt;&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*&gt; &gt;&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*&gt; &gt;&amp;) (1 samples, 0.20%)</title><rect x="3.8697%" y="309" width="0.2037%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="1"/><text x="4.1197%" y="319.50"></text></g><g><title>std::vector&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder*&gt; &gt;::_M_default_append(unsigned long) (1 samples, 0.20%)</title><rect x="3.8697%" y="293" width="0.2037%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="1"/><text x="4.1197%" y="303.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="3.8697%" y="277" width="0.2037%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="1"/><text x="4.1197%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="3.8697%" y="261" width="0.2037%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="1"/><text x="4.1197%" y="271.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::compile(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;) const (1 samples, 0.20%)</title><rect x="4.6843%" y="293" width="0.2037%" height="15" fill="rgb(216,20,37)" fg:x="23" fg:w="1"/><text x="4.9343%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::compileOutputBatch(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, unsigned int, unsigned int) const (1 samples, 0.20%)</title><rect x="4.6843%" y="277" width="0.2037%" height="15" fill="rgb(206,188,39)" fg:x="23" fg:w="1"/><text x="4.9343%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::BaseAssembler::newLabel() (1 samples, 0.20%)</title><rect x="4.8880%" y="277" width="0.2037%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="1"/><text x="5.1380%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::CodeHolder::newLabelEntry(asmjit::_abi_1_8::LabelEntry**) (1 samples, 0.20%)</title><rect x="4.8880%" y="261" width="0.2037%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="1"/><text x="5.1380%" y="271.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::ZeroPadding2DCompiler::compile(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;) const (3 samples, 0.61%)</title><rect x="4.8880%" y="293" width="0.6110%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="3"/><text x="5.1380%" y="303.50"></text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (2 samples, 0.41%)</title><rect x="5.0916%" y="277" width="0.4073%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="2"/><text x="5.3416%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::BaseAssembler::embedDataArray(asmjit::_abi_1_8::TypeId, void const*, unsigned long, unsigned long) (21 samples, 4.28%)</title><rect x="5.4990%" y="293" width="4.2770%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="21"/><text x="5.7490%" y="303.50">asmji..</text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="9.7760%" y="277" width="0.2037%" height="15" fill="rgb(226,26,5)" fg:x="48" fg:w="1"/><text x="10.0260%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::JitRuntime::_add(void**, asmjit::_abi_1_8::CodeHolder*) (2 samples, 0.41%)</title><rect x="9.7760%" y="293" width="0.4073%" height="15" fill="rgb(249,33,26)" fg:x="48" fg:w="2"/><text x="10.0260%" y="303.50"></text></g><g><title>asmjit::_abi_1_8::JitAllocator::alloc(void**, void**, unsigned long) (1 samples, 0.20%)</title><rect x="9.9796%" y="277" width="0.2037%" height="15" fill="rgb(235,183,28)" fg:x="49" fg:w="1"/><text x="10.2296%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::VirtMem::alloc(void**, unsigned long, asmjit::_abi_1_8::VirtMem::MemoryFlags) (1 samples, 0.20%)</title><rect x="9.9796%" y="261" width="0.2037%" height="15" fill="rgb(221,5,38)" fg:x="49" fg:w="1"/><text x="10.2296%" y="271.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.20%)</title><rect x="9.9796%" y="245" width="0.2037%" height="15" fill="rgb(247,18,42)" fg:x="49" fg:w="1"/><text x="10.2296%" y="255.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.20%)</title><rect x="9.9796%" y="229" width="0.2037%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="1"/><text x="10.2296%" y="239.50"></text></g><g><title>NeuralNetwork::CompiledNN::generateCode(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt; const&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;) (31 samples, 6.31%)</title><rect x="4.0733%" y="309" width="6.3136%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="31"/><text x="4.3233%" y="319.50">NeuralNe..</text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (1 samples, 0.20%)</title><rect x="10.1833%" y="293" width="0.2037%" height="15" fill="rgb(225,111,53)" fg:x="50" fg:w="1"/><text x="10.4333%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNN::compilerBackend(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt;&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (50 samples, 10.18%)</title><rect x="2.6477%" y="325" width="10.1833%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="50"/><text x="2.8977%" y="335.50">NeuralNetwork::..</text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::initialize() (12 samples, 2.44%)</title><rect x="10.3870%" y="309" width="2.4440%" height="15" fill="rgb(214,148,48)" fg:x="51" fg:w="12"/><text x="10.6370%" y="319.50">Ne..</text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="12.8310%" y="325" width="0.2037%" height="15" fill="rgb(232,36,49)" fg:x="63" fg:w="1"/><text x="13.0810%" y="335.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="12.8310%" y="309" width="0.2037%" height="15" fill="rgb(209,103,24)" fg:x="63" fg:w="1"/><text x="13.0810%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="12.8310%" y="293" width="0.2037%" height="15" fill="rgb(229,88,8)" fg:x="63" fg:w="1"/><text x="13.0810%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNN::compile(NeuralNetwork::Model const&amp;, NeuralNetwork::CompilationSettings const&amp;) (53 samples, 10.79%)</title><rect x="2.4440%" y="341" width="10.7943%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="53"/><text x="2.6940%" y="351.50">NeuralNetwork::C..</text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear() (1 samples, 0.20%)</title><rect x="13.0346%" y="325" width="0.2037%" height="15" fill="rgb(254,191,54)" fg:x="64" fg:w="1"/><text x="13.2846%" y="335.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="13.0346%" y="309" width="0.2037%" height="15" fill="rgb(241,83,37)" fg:x="64" fg:w="1"/><text x="13.2846%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="13.0346%" y="293" width="0.2037%" height="15" fill="rgb(233,36,39)" fg:x="64" fg:w="1"/><text x="13.2846%" y="303.50"></text></g><g><title>H5Aread (1 samples, 0.20%)</title><rect x="13.2383%" y="309" width="0.2037%" height="15" fill="rgb(226,3,54)" fg:x="65" fg:w="1"/><text x="13.4883%" y="319.50"></text></g><g><title>H5VL_attr_read (1 samples, 0.20%)</title><rect x="13.2383%" y="293" width="0.2037%" height="15" fill="rgb(245,192,40)" fg:x="65" fg:w="1"/><text x="13.4883%" y="303.50"></text></g><g><title>H5VL__native_attr_read (1 samples, 0.20%)</title><rect x="13.2383%" y="277" width="0.2037%" height="15" fill="rgb(238,167,29)" fg:x="65" fg:w="1"/><text x="13.4883%" y="287.50"></text></g><g><title>H5A__read (1 samples, 0.20%)</title><rect x="13.2383%" y="261" width="0.2037%" height="15" fill="rgb(232,182,51)" fg:x="65" fg:w="1"/><text x="13.4883%" y="271.50"></text></g><g><title>H5I_register (1 samples, 0.20%)</title><rect x="13.2383%" y="245" width="0.2037%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="1"/><text x="13.4883%" y="255.50"></text></g><g><title>H5I__register (1 samples, 0.20%)</title><rect x="13.2383%" y="229" width="0.2037%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="1"/><text x="13.4883%" y="239.50"></text></g><g><title>H5C__flush_single_entry (3 samples, 0.61%)</title><rect x="13.4420%" y="181" width="0.6110%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="3"/><text x="13.6920%" y="191.50"></text></g><g><title>H5O__free (2 samples, 0.41%)</title><rect x="13.6456%" y="165" width="0.4073%" height="15" fill="rgb(213,116,39)" fg:x="67" fg:w="2"/><text x="13.8956%" y="175.50"></text></g><g><title>H5O__msg_free_mesg (2 samples, 0.41%)</title><rect x="13.6456%" y="149" width="0.4073%" height="15" fill="rgb(222,207,29)" fg:x="67" fg:w="2"/><text x="13.8956%" y="159.50"></text></g><g><title>H5O_msg_free_real (2 samples, 0.41%)</title><rect x="13.6456%" y="133" width="0.4073%" height="15" fill="rgb(206,96,30)" fg:x="67" fg:w="2"/><text x="13.8956%" y="143.50"></text></g><g><title>H5A__close (2 samples, 0.41%)</title><rect x="13.6456%" y="117" width="0.4073%" height="15" fill="rgb(218,138,4)" fg:x="67" fg:w="2"/><text x="13.8956%" y="127.50"></text></g><g><title>H5A__shared_free (1 samples, 0.20%)</title><rect x="13.8493%" y="101" width="0.2037%" height="15" fill="rgb(250,191,14)" fg:x="68" fg:w="1"/><text x="14.0993%" y="111.50"></text></g><g><title>H5MM_xfree (1 samples, 0.20%)</title><rect x="13.8493%" y="85" width="0.2037%" height="15" fill="rgb(239,60,40)" fg:x="68" fg:w="1"/><text x="14.0993%" y="95.50"></text></g><g><title>H5AC_dest (7 samples, 1.43%)</title><rect x="13.4420%" y="213" width="1.4257%" height="15" fill="rgb(206,27,48)" fg:x="66" fg:w="7"/><text x="13.6920%" y="223.50"></text></g><g><title>H5C_dest (7 samples, 1.43%)</title><rect x="13.4420%" y="197" width="1.4257%" height="15" fill="rgb(225,35,8)" fg:x="66" fg:w="7"/><text x="13.6920%" y="207.50"></text></g><g><title>H5FL_reg_free (4 samples, 0.81%)</title><rect x="14.0530%" y="181" width="0.8147%" height="15" fill="rgb(250,213,24)" fg:x="69" fg:w="4"/><text x="14.3030%" y="191.50"></text></g><g><title>__GI___libc_free (4 samples, 0.81%)</title><rect x="14.0530%" y="165" width="0.8147%" height="15" fill="rgb(247,123,22)" fg:x="69" fg:w="4"/><text x="14.3030%" y="175.50"></text></g><g><title>_int_free (4 samples, 0.81%)</title><rect x="14.0530%" y="149" width="0.8147%" height="15" fill="rgb(231,138,38)" fg:x="69" fg:w="4"/><text x="14.3030%" y="159.50"></text></g><g><title>malloc_consolidate (4 samples, 0.81%)</title><rect x="14.0530%" y="133" width="0.8147%" height="15" fill="rgb(231,145,46)" fg:x="69" fg:w="4"/><text x="14.3030%" y="143.50"></text></g><g><title>H5FD_close (1 samples, 0.20%)</title><rect x="14.8676%" y="213" width="0.2037%" height="15" fill="rgb(251,118,11)" fg:x="73" fg:w="1"/><text x="15.1176%" y="223.50"></text></g><g><title>__GI___close (1 samples, 0.20%)</title><rect x="14.8676%" y="197" width="0.2037%" height="15" fill="rgb(217,147,25)" fg:x="73" fg:w="1"/><text x="15.1176%" y="207.50"></text></g><g><title>H5FO_top_dest (1 samples, 0.20%)</title><rect x="15.0713%" y="213" width="0.2037%" height="15" fill="rgb(247,81,37)" fg:x="74" fg:w="1"/><text x="15.3213%" y="223.50"></text></g><g><title>H5SL_close (1 samples, 0.20%)</title><rect x="15.0713%" y="197" width="0.2037%" height="15" fill="rgb(209,12,38)" fg:x="74" fg:w="1"/><text x="15.3213%" y="207.50"></text></g><g><title>H5FL_fac_malloc (1 samples, 0.20%)</title><rect x="15.0713%" y="181" width="0.2037%" height="15" fill="rgb(227,1,9)" fg:x="74" fg:w="1"/><text x="15.3213%" y="191.50"></text></g><g><title>H5Fclose (10 samples, 2.04%)</title><rect x="13.4420%" y="309" width="2.0367%" height="15" fill="rgb(248,47,43)" fg:x="66" fg:w="10"/><text x="13.6920%" y="319.50">H..</text></g><g><title>H5I_dec_app_ref (10 samples, 2.04%)</title><rect x="13.4420%" y="293" width="2.0367%" height="15" fill="rgb(221,10,30)" fg:x="66" fg:w="10"/><text x="13.6920%" y="303.50">H..</text></g><g><title>H5VL_file_close (10 samples, 2.04%)</title><rect x="13.4420%" y="277" width="2.0367%" height="15" fill="rgb(210,229,1)" fg:x="66" fg:w="10"/><text x="13.6920%" y="287.50">H..</text></g><g><title>H5VL__native_file_close (10 samples, 2.04%)</title><rect x="13.4420%" y="261" width="2.0367%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="10"/><text x="13.6920%" y="271.50">H..</text></g><g><title>H5F__close (10 samples, 2.04%)</title><rect x="13.4420%" y="245" width="2.0367%" height="15" fill="rgb(234,67,33)" fg:x="66" fg:w="10"/><text x="13.6920%" y="255.50">H..</text></g><g><title>H5F_try_close (10 samples, 2.04%)</title><rect x="13.4420%" y="229" width="2.0367%" height="15" fill="rgb(247,98,35)" fg:x="66" fg:w="10"/><text x="13.6920%" y="239.50">H..</text></g><g><title>H5I_dec_ref (1 samples, 0.20%)</title><rect x="15.2749%" y="213" width="0.2037%" height="15" fill="rgb(247,138,52)" fg:x="75" fg:w="1"/><text x="15.5249%" y="223.50"></text></g><g><title>H5P_close (1 samples, 0.20%)</title><rect x="15.2749%" y="197" width="0.2037%" height="15" fill="rgb(213,79,30)" fg:x="75" fg:w="1"/><text x="15.5249%" y="207.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="15.2749%" y="181" width="0.2037%" height="15" fill="rgb(246,177,23)" fg:x="75" fg:w="1"/><text x="15.5249%" y="191.50"></text></g><g><title>H5AC_create (4 samples, 0.81%)</title><rect x="15.4786%" y="245" width="0.8147%" height="15" fill="rgb(230,62,27)" fg:x="76" fg:w="4"/><text x="15.7286%" y="255.50"></text></g><g><title>H5C_create (4 samples, 0.81%)</title><rect x="15.4786%" y="229" width="0.8147%" height="15" fill="rgb(216,154,8)" fg:x="76" fg:w="4"/><text x="15.7286%" y="239.50"></text></g><g><title>H5FL_reg_calloc (4 samples, 0.81%)</title><rect x="15.4786%" y="213" width="0.8147%" height="15" fill="rgb(244,35,45)" fg:x="76" fg:w="4"/><text x="15.7286%" y="223.50"></text></g><g><title>__memset_sse2_unaligned_erms (4 samples, 0.81%)</title><rect x="15.4786%" y="197" width="0.8147%" height="15" fill="rgb(251,115,12)" fg:x="76" fg:w="4"/><text x="15.7286%" y="207.50"></text></g><g><title>H5FD_lock (1 samples, 0.20%)</title><rect x="16.2933%" y="245" width="0.2037%" height="15" fill="rgb(240,54,50)" fg:x="80" fg:w="1"/><text x="16.5433%" y="255.50"></text></g><g><title>flock (1 samples, 0.20%)</title><rect x="16.2933%" y="229" width="0.2037%" height="15" fill="rgb(233,84,52)" fg:x="80" fg:w="1"/><text x="16.5433%" y="239.50"></text></g><g><title>H5FD_open (1 samples, 0.20%)</title><rect x="16.4969%" y="245" width="0.2037%" height="15" fill="rgb(207,117,47)" fg:x="81" fg:w="1"/><text x="16.7469%" y="255.50"></text></g><g><title>__libc_open64 (1 samples, 0.20%)</title><rect x="16.4969%" y="229" width="0.2037%" height="15" fill="rgb(249,43,39)" fg:x="81" fg:w="1"/><text x="16.7469%" y="239.50"></text></g><g><title>H5F__super_read (1 samples, 0.20%)</title><rect x="16.7006%" y="245" width="0.2037%" height="15" fill="rgb(209,38,44)" fg:x="82" fg:w="1"/><text x="16.9506%" y="255.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="16.7006%" y="229" width="0.2037%" height="15" fill="rgb(236,212,23)" fg:x="82" fg:w="1"/><text x="16.9506%" y="239.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="16.7006%" y="213" width="0.2037%" height="15" fill="rgb(242,79,21)" fg:x="82" fg:w="1"/><text x="16.9506%" y="223.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="16.7006%" y="197" width="0.2037%" height="15" fill="rgb(211,96,35)" fg:x="82" fg:w="1"/><text x="16.9506%" y="207.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="16.7006%" y="181" width="0.2037%" height="15" fill="rgb(253,215,40)" fg:x="82" fg:w="1"/><text x="16.9506%" y="191.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="16.7006%" y="165" width="0.2037%" height="15" fill="rgb(211,81,21)" fg:x="82" fg:w="1"/><text x="16.9506%" y="175.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="16.7006%" y="149" width="0.2037%" height="15" fill="rgb(208,190,38)" fg:x="82" fg:w="1"/><text x="16.9506%" y="159.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="16.7006%" y="133" width="0.2037%" height="15" fill="rgb(235,213,38)" fg:x="82" fg:w="1"/><text x="16.9506%" y="143.50"></text></g><g><title>H5Fopen (9 samples, 1.83%)</title><rect x="15.4786%" y="309" width="1.8330%" height="15" fill="rgb(237,122,38)" fg:x="76" fg:w="9"/><text x="15.7286%" y="319.50">H..</text></g><g><title>H5VL_file_open (9 samples, 1.83%)</title><rect x="15.4786%" y="293" width="1.8330%" height="15" fill="rgb(244,218,35)" fg:x="76" fg:w="9"/><text x="15.7286%" y="303.50">H..</text></g><g><title>H5VL__native_file_open (9 samples, 1.83%)</title><rect x="15.4786%" y="277" width="1.8330%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="9"/><text x="15.7286%" y="287.50">H..</text></g><g><title>H5F_open (9 samples, 1.83%)</title><rect x="15.4786%" y="261" width="1.8330%" height="15" fill="rgb(210,16,53)" fg:x="76" fg:w="9"/><text x="15.7286%" y="271.50">H..</text></g><g><title>H5G_mkroot (2 samples, 0.41%)</title><rect x="16.9043%" y="245" width="0.4073%" height="15" fill="rgb(235,124,12)" fg:x="83" fg:w="2"/><text x="17.1543%" y="255.50"></text></g><g><title>H5G__name_init (1 samples, 0.20%)</title><rect x="17.1079%" y="229" width="0.2037%" height="15" fill="rgb(224,169,11)" fg:x="84" fg:w="1"/><text x="17.3579%" y="239.50"></text></g><g><title>H5RS_create (1 samples, 0.20%)</title><rect x="17.1079%" y="213" width="0.2037%" height="15" fill="rgb(250,166,2)" fg:x="84" fg:w="1"/><text x="17.3579%" y="223.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="17.1079%" y="197" width="0.2037%" height="15" fill="rgb(242,216,29)" fg:x="84" fg:w="1"/><text x="17.3579%" y="207.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="17.1079%" y="181" width="0.2037%" height="15" fill="rgb(230,116,27)" fg:x="84" fg:w="1"/><text x="17.3579%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="17.1079%" y="165" width="0.2037%" height="15" fill="rgb(228,99,48)" fg:x="84" fg:w="1"/><text x="17.3579%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="17.1079%" y="149" width="0.2037%" height="15" fill="rgb(253,11,6)" fg:x="84" fg:w="1"/><text x="17.3579%" y="159.50"></text></g><g><title>H5G_loc_find (1 samples, 0.20%)</title><rect x="17.3116%" y="245" width="0.2037%" height="15" fill="rgb(247,143,39)" fg:x="85" fg:w="1"/><text x="17.5616%" y="255.50"></text></g><g><title>H5G_traverse (1 samples, 0.20%)</title><rect x="17.3116%" y="229" width="0.2037%" height="15" fill="rgb(236,97,10)" fg:x="85" fg:w="1"/><text x="17.5616%" y="239.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="17.3116%" y="213" width="0.2037%" height="15" fill="rgb(233,208,19)" fg:x="85" fg:w="1"/><text x="17.5616%" y="223.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="17.3116%" y="197" width="0.2037%" height="15" fill="rgb(216,164,2)" fg:x="85" fg:w="1"/><text x="17.5616%" y="207.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="17.3116%" y="181" width="0.2037%" height="15" fill="rgb(220,129,5)" fg:x="85" fg:w="1"/><text x="17.5616%" y="191.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="17.3116%" y="165" width="0.2037%" height="15" fill="rgb(242,17,10)" fg:x="85" fg:w="1"/><text x="17.5616%" y="175.50"></text></g><g><title>H5Gopen2 (2 samples, 0.41%)</title><rect x="17.3116%" y="309" width="0.4073%" height="15" fill="rgb(242,107,0)" fg:x="85" fg:w="2"/><text x="17.5616%" y="319.50"></text></g><g><title>H5VL_group_open (2 samples, 0.41%)</title><rect x="17.3116%" y="293" width="0.4073%" height="15" fill="rgb(251,28,31)" fg:x="85" fg:w="2"/><text x="17.5616%" y="303.50"></text></g><g><title>H5VL__native_group_open (2 samples, 0.41%)</title><rect x="17.3116%" y="277" width="0.4073%" height="15" fill="rgb(233,223,10)" fg:x="85" fg:w="2"/><text x="17.5616%" y="287.50"></text></g><g><title>H5G__open_name (2 samples, 0.41%)</title><rect x="17.3116%" y="261" width="0.4073%" height="15" fill="rgb(215,21,27)" fg:x="85" fg:w="2"/><text x="17.5616%" y="271.50"></text></g><g><title>H5O_obj_type (1 samples, 0.20%)</title><rect x="17.5153%" y="245" width="0.2037%" height="15" fill="rgb(232,23,21)" fg:x="86" fg:w="1"/><text x="17.7653%" y="255.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="17.5153%" y="229" width="0.2037%" height="15" fill="rgb(244,5,23)" fg:x="86" fg:w="1"/><text x="17.7653%" y="239.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="17.5153%" y="213" width="0.2037%" height="15" fill="rgb(226,81,46)" fg:x="86" fg:w="1"/><text x="17.7653%" y="223.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="17.5153%" y="197" width="0.2037%" height="15" fill="rgb(247,70,30)" fg:x="86" fg:w="1"/><text x="17.7653%" y="207.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="17.5153%" y="181" width="0.2037%" height="15" fill="rgb(212,68,19)" fg:x="86" fg:w="1"/><text x="17.7653%" y="191.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="17.5153%" y="165" width="0.2037%" height="15" fill="rgb(240,187,13)" fg:x="86" fg:w="1"/><text x="17.7653%" y="175.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="17.5153%" y="149" width="0.2037%" height="15" fill="rgb(223,113,26)" fg:x="86" fg:w="1"/><text x="17.7653%" y="159.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="17.5153%" y="133" width="0.2037%" height="15" fill="rgb(206,192,2)" fg:x="86" fg:w="1"/><text x="17.7653%" y="143.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="17.5153%" y="117" width="0.2037%" height="15" fill="rgb(241,108,4)" fg:x="86" fg:w="1"/><text x="17.7653%" y="127.50"></text></g><g><title>H5E_term_package (4 samples, 0.81%)</title><rect x="17.7189%" y="293" width="0.8147%" height="15" fill="rgb(247,173,49)" fg:x="87" fg:w="4"/><text x="17.9689%" y="303.50"></text></g><g><title>H5I_clear_type (4 samples, 0.81%)</title><rect x="17.7189%" y="277" width="0.8147%" height="15" fill="rgb(224,114,35)" fg:x="87" fg:w="4"/><text x="17.9689%" y="287.50"></text></g><g><title>H5I_iterate (3 samples, 0.61%)</title><rect x="17.9226%" y="261" width="0.6110%" height="15" fill="rgb(245,159,27)" fg:x="88" fg:w="3"/><text x="18.1726%" y="271.50"></text></g><g><title>H5I_remove (1 samples, 0.20%)</title><rect x="18.3299%" y="245" width="0.2037%" height="15" fill="rgb(245,172,44)" fg:x="90" fg:w="1"/><text x="18.5799%" y="255.50"></text></g><g><title>H5FL_term_package (4 samples, 0.81%)</title><rect x="18.5336%" y="293" width="0.8147%" height="15" fill="rgb(236,23,11)" fg:x="91" fg:w="4"/><text x="18.7836%" y="303.50"></text></g><g><title>H5FL_garbage_coll (4 samples, 0.81%)</title><rect x="18.5336%" y="277" width="0.8147%" height="15" fill="rgb(205,117,38)" fg:x="91" fg:w="4"/><text x="18.7836%" y="287.50"></text></g><g><title>__GI___libc_free (4 samples, 0.81%)</title><rect x="18.5336%" y="261" width="0.8147%" height="15" fill="rgb(237,72,25)" fg:x="91" fg:w="4"/><text x="18.7836%" y="271.50"></text></g><g><title>_int_free (3 samples, 0.61%)</title><rect x="18.7373%" y="245" width="0.6110%" height="15" fill="rgb(244,70,9)" fg:x="92" fg:w="3"/><text x="18.9873%" y="255.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="19.1446%" y="229" width="0.2037%" height="15" fill="rgb(217,125,39)" fg:x="94" fg:w="1"/><text x="19.3946%" y="239.50"></text></g><g><title>H5SL_close (1 samples, 0.20%)</title><rect x="19.5519%" y="245" width="0.2037%" height="15" fill="rgb(235,36,10)" fg:x="96" fg:w="1"/><text x="19.8019%" y="255.50"></text></g><g><title>H5FL_fac_free (1 samples, 0.20%)</title><rect x="19.5519%" y="229" width="0.2037%" height="15" fill="rgb(251,123,47)" fg:x="96" fg:w="1"/><text x="19.8019%" y="239.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="19.7556%" y="245" width="0.2037%" height="15" fill="rgb(221,13,13)" fg:x="97" fg:w="1"/><text x="20.0056%" y="255.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="19.9593%" y="245" width="0.2037%" height="15" fill="rgb(238,131,9)" fg:x="98" fg:w="1"/><text x="20.2093%" y="255.50"></text></g><g><title>H5P_term_package (5 samples, 1.02%)</title><rect x="19.3483%" y="293" width="1.0183%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="5"/><text x="19.5983%" y="303.50"></text></g><g><title>H5I_clear_type (5 samples, 1.02%)</title><rect x="19.3483%" y="277" width="1.0183%" height="15" fill="rgb(245,182,24)" fg:x="95" fg:w="5"/><text x="19.5983%" y="287.50"></text></g><g><title>H5P_close (5 samples, 1.02%)</title><rect x="19.3483%" y="261" width="1.0183%" height="15" fill="rgb(242,14,37)" fg:x="95" fg:w="5"/><text x="19.5983%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="20.1629%" y="245" width="0.2037%" height="15" fill="rgb(246,228,12)" fg:x="99" fg:w="1"/><text x="20.4129%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="20.1629%" y="229" width="0.2037%" height="15" fill="rgb(213,55,15)" fg:x="99" fg:w="1"/><text x="20.4129%" y="239.50"></text></g><g><title>H5SL_term_package (1 samples, 0.20%)</title><rect x="20.3666%" y="293" width="0.2037%" height="15" fill="rgb(209,9,3)" fg:x="100" fg:w="1"/><text x="20.6166%" y="303.50"></text></g><g><title>H5FL_fac_term (1 samples, 0.20%)</title><rect x="20.3666%" y="277" width="0.2037%" height="15" fill="rgb(230,59,30)" fg:x="100" fg:w="1"/><text x="20.6166%" y="287.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="20.3666%" y="261" width="0.2037%" height="15" fill="rgb(209,121,21)" fg:x="100" fg:w="1"/><text x="20.6166%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="20.3666%" y="245" width="0.2037%" height="15" fill="rgb(220,109,13)" fg:x="100" fg:w="1"/><text x="20.6166%" y="255.50"></text></g><g><title>H5I_iterate (1 samples, 0.20%)</title><rect x="20.5703%" y="277" width="0.2037%" height="15" fill="rgb(232,18,1)" fg:x="101" fg:w="1"/><text x="20.8203%" y="287.50"></text></g><g><title>H5T_top_term_package (2 samples, 0.41%)</title><rect x="20.5703%" y="293" width="0.4073%" height="15" fill="rgb(215,41,42)" fg:x="101" fg:w="2"/><text x="20.8203%" y="303.50"></text></g><g><title>H5T_close_real (1 samples, 0.20%)</title><rect x="20.7739%" y="277" width="0.2037%" height="15" fill="rgb(224,123,36)" fg:x="102" fg:w="1"/><text x="21.0239%" y="287.50"></text></g><g><title>H5FL_reg_free (1 samples, 0.20%)</title><rect x="20.7739%" y="261" width="0.2037%" height="15" fill="rgb(240,125,3)" fg:x="102" fg:w="1"/><text x="21.0239%" y="271.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="20.7739%" y="245" width="0.2037%" height="15" fill="rgb(205,98,50)" fg:x="102" fg:w="1"/><text x="21.0239%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="20.7739%" y="229" width="0.2037%" height="15" fill="rgb(205,185,37)" fg:x="102" fg:w="1"/><text x="21.0239%" y="239.50"></text></g><g><title>H5close (18 samples, 3.67%)</title><rect x="17.7189%" y="309" width="3.6660%" height="15" fill="rgb(238,207,15)" fg:x="87" fg:w="18"/><text x="17.9689%" y="319.50">H5cl..</text></g><g><title>___snprintf_chk (2 samples, 0.41%)</title><rect x="20.9776%" y="293" width="0.4073%" height="15" fill="rgb(213,199,42)" fg:x="103" fg:w="2"/><text x="21.2276%" y="303.50"></text></g><g><title>__vsnprintf_internal (2 samples, 0.41%)</title><rect x="20.9776%" y="277" width="0.4073%" height="15" fill="rgb(235,201,11)" fg:x="103" fg:w="2"/><text x="21.2276%" y="287.50"></text></g><g><title>__vfprintf_internal (2 samples, 0.41%)</title><rect x="20.9776%" y="261" width="0.4073%" height="15" fill="rgb(207,46,11)" fg:x="103" fg:w="2"/><text x="21.2276%" y="271.50"></text></g><g><title>__find_specmb (2 samples, 0.41%)</title><rect x="20.9776%" y="245" width="0.4073%" height="15" fill="rgb(241,35,35)" fg:x="103" fg:w="2"/><text x="21.2276%" y="255.50"></text></g><g><title>__strchrnul_sse2 (2 samples, 0.41%)</title><rect x="20.9776%" y="229" width="0.4073%" height="15" fill="rgb(243,32,47)" fg:x="103" fg:w="2"/><text x="21.2276%" y="239.50"></text></g><g><title>H5I_register (5 samples, 1.02%)</title><rect x="21.3849%" y="261" width="1.0183%" height="15" fill="rgb(247,202,23)" fg:x="105" fg:w="5"/><text x="21.6349%" y="271.50"></text></g><g><title>H5I__register (5 samples, 1.02%)</title><rect x="21.3849%" y="245" width="1.0183%" height="15" fill="rgb(219,102,11)" fg:x="105" fg:w="5"/><text x="21.6349%" y="255.50"></text></g><g><title>H5FL_reg_calloc (4 samples, 0.81%)</title><rect x="21.5886%" y="229" width="0.8147%" height="15" fill="rgb(243,110,44)" fg:x="106" fg:w="4"/><text x="21.8386%" y="239.50"></text></g><g><title>H5FL_reg_malloc (4 samples, 0.81%)</title><rect x="21.5886%" y="213" width="0.8147%" height="15" fill="rgb(222,74,54)" fg:x="106" fg:w="4"/><text x="21.8386%" y="223.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.81%)</title><rect x="21.5886%" y="197" width="0.8147%" height="15" fill="rgb(216,99,12)" fg:x="106" fg:w="4"/><text x="21.8386%" y="207.50"></text></g><g><title>_int_malloc (4 samples, 0.81%)</title><rect x="21.5886%" y="181" width="0.8147%" height="15" fill="rgb(226,22,26)" fg:x="106" fg:w="4"/><text x="21.8386%" y="191.50"></text></g><g><title>H5E_init (6 samples, 1.22%)</title><rect x="21.3849%" y="277" width="1.2220%" height="15" fill="rgb(217,163,10)" fg:x="105" fg:w="6"/><text x="21.6349%" y="287.50"></text></g><g><title>H5MM_xstrdup (1 samples, 0.20%)</title><rect x="22.4033%" y="261" width="0.2037%" height="15" fill="rgb(213,25,53)" fg:x="110" fg:w="1"/><text x="22.6533%" y="271.50"></text></g><g><title>__GI___strdup (1 samples, 0.20%)</title><rect x="22.4033%" y="245" width="0.2037%" height="15" fill="rgb(252,105,26)" fg:x="110" fg:w="1"/><text x="22.6533%" y="255.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="22.4033%" y="229" width="0.2037%" height="15" fill="rgb(220,39,43)" fg:x="110" fg:w="1"/><text x="22.6533%" y="239.50"></text></g><g><title>H5I_register (1 samples, 0.20%)</title><rect x="22.8106%" y="261" width="0.2037%" height="15" fill="rgb(229,68,48)" fg:x="112" fg:w="1"/><text x="23.0606%" y="271.50"></text></g><g><title>H5I__register (1 samples, 0.20%)</title><rect x="22.8106%" y="245" width="0.2037%" height="15" fill="rgb(252,8,32)" fg:x="112" fg:w="1"/><text x="23.0606%" y="255.50"></text></g><g><title>H5P__create_class (1 samples, 0.20%)</title><rect x="23.0143%" y="261" width="0.2037%" height="15" fill="rgb(223,20,43)" fg:x="113" fg:w="1"/><text x="23.2643%" y="271.50"></text></g><g><title>H5SL_create (1 samples, 0.20%)</title><rect x="23.0143%" y="245" width="0.2037%" height="15" fill="rgb(229,81,49)" fg:x="113" fg:w="1"/><text x="23.2643%" y="255.50"></text></g><g><title>H5P__add_prop (1 samples, 0.20%)</title><rect x="23.2179%" y="245" width="0.2037%" height="15" fill="rgb(236,28,36)" fg:x="114" fg:w="1"/><text x="23.4679%" y="255.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="23.2179%" y="229" width="0.2037%" height="15" fill="rgb(249,185,26)" fg:x="114" fg:w="1"/><text x="23.4679%" y="239.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="23.4216%" y="245" width="0.2037%" height="15" fill="rgb(249,174,33)" fg:x="115" fg:w="1"/><text x="23.6716%" y="255.50"></text></g><g><title>H5_hash_string (1 samples, 0.20%)</title><rect x="23.4216%" y="229" width="0.2037%" height="15" fill="rgb(233,201,37)" fg:x="115" fg:w="1"/><text x="23.6716%" y="239.50"></text></g><g><title>H5P__register_real (3 samples, 0.61%)</title><rect x="23.2179%" y="261" width="0.6110%" height="15" fill="rgb(221,78,26)" fg:x="114" fg:w="3"/><text x="23.4679%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="23.6253%" y="245" width="0.2037%" height="15" fill="rgb(250,127,30)" fg:x="116" fg:w="1"/><text x="23.8753%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="23.6253%" y="229" width="0.2037%" height="15" fill="rgb(230,49,44)" fg:x="116" fg:w="1"/><text x="23.8753%" y="239.50"></text></g><g><title>H5SL_insert (2 samples, 0.41%)</title><rect x="23.8289%" y="245" width="0.4073%" height="15" fill="rgb(229,67,23)" fg:x="117" fg:w="2"/><text x="24.0789%" y="255.50"></text></g><g><title>H5P_init_phase1 (10 samples, 2.04%)</title><rect x="22.6069%" y="277" width="2.0367%" height="15" fill="rgb(249,83,47)" fg:x="111" fg:w="10"/><text x="22.8569%" y="287.50">H..</text></g><g><title>H5P_create_id (4 samples, 0.81%)</title><rect x="23.8289%" y="261" width="0.8147%" height="15" fill="rgb(215,43,3)" fg:x="117" fg:w="4"/><text x="24.0789%" y="271.50"></text></g><g><title>H5SL_search (2 samples, 0.41%)</title><rect x="24.2363%" y="245" width="0.4073%" height="15" fill="rgb(238,154,13)" fg:x="119" fg:w="2"/><text x="24.4863%" y="255.50"></text></g><g><title>H5I_dec_ref (2 samples, 0.41%)</title><rect x="24.6436%" y="245" width="0.4073%" height="15" fill="rgb(219,56,2)" fg:x="121" fg:w="2"/><text x="24.8936%" y="255.50"></text></g><g><title>H5T_close (1 samples, 0.20%)</title><rect x="24.8473%" y="229" width="0.2037%" height="15" fill="rgb(233,0,4)" fg:x="122" fg:w="1"/><text x="25.0973%" y="239.50"></text></g><g><title>H5T_close_real (1 samples, 0.20%)</title><rect x="24.8473%" y="213" width="0.2037%" height="15" fill="rgb(235,30,7)" fg:x="122" fg:w="1"/><text x="25.0973%" y="223.50"></text></g><g><title>H5T__free (1 samples, 0.20%)</title><rect x="24.8473%" y="197" width="0.2037%" height="15" fill="rgb(250,79,13)" fg:x="122" fg:w="1"/><text x="25.0973%" y="207.50"></text></g><g><title>H5I_object (1 samples, 0.20%)</title><rect x="25.0509%" y="245" width="0.2037%" height="15" fill="rgb(211,146,34)" fg:x="123" fg:w="1"/><text x="25.3009%" y="255.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="25.0509%" y="229" width="0.2037%" height="15" fill="rgb(228,22,38)" fg:x="123" fg:w="1"/><text x="25.3009%" y="239.50"></text></g><g><title>H5I_register (2 samples, 0.41%)</title><rect x="25.2546%" y="245" width="0.4073%" height="15" fill="rgb(235,168,5)" fg:x="124" fg:w="2"/><text x="25.5046%" y="255.50"></text></g><g><title>H5I__register (2 samples, 0.41%)</title><rect x="25.2546%" y="229" width="0.4073%" height="15" fill="rgb(221,155,16)" fg:x="124" fg:w="2"/><text x="25.5046%" y="239.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="25.4582%" y="213" width="0.2037%" height="15" fill="rgb(215,215,53)" fg:x="125" fg:w="1"/><text x="25.7082%" y="223.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="25.4582%" y="197" width="0.2037%" height="15" fill="rgb(223,4,10)" fg:x="125" fg:w="1"/><text x="25.7082%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="25.4582%" y="181" width="0.2037%" height="15" fill="rgb(234,103,6)" fg:x="125" fg:w="1"/><text x="25.7082%" y="191.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="25.4582%" y="165" width="0.2037%" height="15" fill="rgb(227,97,0)" fg:x="125" fg:w="1"/><text x="25.7082%" y="175.50"></text></g><g><title>H5T__conv_ldouble_uint (1 samples, 0.20%)</title><rect x="25.6619%" y="245" width="0.2037%" height="15" fill="rgb(234,150,53)" fg:x="126" fg:w="1"/><text x="25.9119%" y="255.50"></text></g><g><title>H5T_cmp (2 samples, 0.41%)</title><rect x="25.8656%" y="245" width="0.4073%" height="15" fill="rgb(228,201,54)" fg:x="127" fg:w="2"/><text x="26.1156%" y="255.50"></text></g><g><title>H5T_copy (3 samples, 0.61%)</title><rect x="26.2729%" y="245" width="0.6110%" height="15" fill="rgb(222,22,37)" fg:x="129" fg:w="3"/><text x="26.5229%" y="255.50"></text></g><g><title>H5FL_reg_malloc (2 samples, 0.41%)</title><rect x="26.4766%" y="229" width="0.4073%" height="15" fill="rgb(237,53,32)" fg:x="130" fg:w="2"/><text x="26.7266%" y="239.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.41%)</title><rect x="26.4766%" y="213" width="0.4073%" height="15" fill="rgb(233,25,53)" fg:x="130" fg:w="2"/><text x="26.7266%" y="223.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="26.6802%" y="197" width="0.2037%" height="15" fill="rgb(210,40,34)" fg:x="131" fg:w="1"/><text x="26.9302%" y="207.50"></text></g><g><title>H5open (28 samples, 5.70%)</title><rect x="21.3849%" y="309" width="5.7026%" height="15" fill="rgb(241,220,44)" fg:x="105" fg:w="28"/><text x="21.6349%" y="319.50">H5open</text></g><g><title>H5_init_library (28 samples, 5.70%)</title><rect x="21.3849%" y="293" width="5.7026%" height="15" fill="rgb(235,28,35)" fg:x="105" fg:w="28"/><text x="21.6349%" y="303.50">H5_init..</text></g><g><title>H5VL_init_phase2 (12 samples, 2.44%)</title><rect x="24.6436%" y="277" width="2.4440%" height="15" fill="rgb(210,56,17)" fg:x="121" fg:w="12"/><text x="24.8936%" y="287.50">H5..</text></g><g><title>H5T_init (12 samples, 2.44%)</title><rect x="24.6436%" y="261" width="2.4440%" height="15" fill="rgb(224,130,29)" fg:x="121" fg:w="12"/><text x="24.8936%" y="271.50">H5..</text></g><g><title>Unknown (1 samples, 0.20%)</title><rect x="26.8839%" y="245" width="0.2037%" height="15" fill="rgb(235,212,8)" fg:x="132" fg:w="1"/><text x="27.1339%" y="255.50"></text></g><g><title>NeuralNetwork::Pooling2DLayer::calcOutputDimensions(NeuralNetwork::Node&amp;) const (1 samples, 0.20%)</title><rect x="27.0876%" y="293" width="0.2037%" height="15" fill="rgb(223,33,50)" fg:x="133" fg:w="1"/><text x="27.3376%" y="303.50"></text></g><g><title>H5Aclose (1 samples, 0.20%)</title><rect x="28.1059%" y="277" width="0.2037%" height="15" fill="rgb(219,149,13)" fg:x="138" fg:w="1"/><text x="28.3559%" y="287.50"></text></g><g><title>H5I_dec_app_ref (1 samples, 0.20%)</title><rect x="28.1059%" y="261" width="0.2037%" height="15" fill="rgb(250,156,29)" fg:x="138" fg:w="1"/><text x="28.3559%" y="271.50"></text></g><g><title>H5VL_attr_close (1 samples, 0.20%)</title><rect x="28.1059%" y="245" width="0.2037%" height="15" fill="rgb(216,193,19)" fg:x="138" fg:w="1"/><text x="28.3559%" y="255.50"></text></g><g><title>H5VL__native_attr_close (1 samples, 0.20%)</title><rect x="28.1059%" y="229" width="0.2037%" height="15" fill="rgb(216,135,14)" fg:x="138" fg:w="1"/><text x="28.3559%" y="239.50"></text></g><g><title>H5A__close (1 samples, 0.20%)</title><rect x="28.1059%" y="213" width="0.2037%" height="15" fill="rgb(241,47,5)" fg:x="138" fg:w="1"/><text x="28.3559%" y="223.50"></text></g><g><title>H5O_close (1 samples, 0.20%)</title><rect x="28.1059%" y="197" width="0.2037%" height="15" fill="rgb(233,42,35)" fg:x="138" fg:w="1"/><text x="28.3559%" y="207.50"></text></g><g><title>H5Aget_type (2 samples, 0.41%)</title><rect x="28.3096%" y="277" width="0.4073%" height="15" fill="rgb(231,13,6)" fg:x="139" fg:w="2"/><text x="28.5596%" y="287.50"></text></g><g><title>H5VL_attr_get (2 samples, 0.41%)</title><rect x="28.3096%" y="261" width="0.4073%" height="15" fill="rgb(207,181,40)" fg:x="139" fg:w="2"/><text x="28.5596%" y="271.50"></text></g><g><title>H5VL__native_attr_get (2 samples, 0.41%)</title><rect x="28.3096%" y="245" width="0.4073%" height="15" fill="rgb(254,173,49)" fg:x="139" fg:w="2"/><text x="28.5596%" y="255.50"></text></g><g><title>H5A__get_type (1 samples, 0.20%)</title><rect x="28.5132%" y="229" width="0.2037%" height="15" fill="rgb(221,1,38)" fg:x="140" fg:w="1"/><text x="28.7632%" y="239.50"></text></g><g><title>H5T_copy_reopen (1 samples, 0.20%)</title><rect x="28.5132%" y="213" width="0.2037%" height="15" fill="rgb(206,124,46)" fg:x="140" fg:w="1"/><text x="28.7632%" y="223.50"></text></g><g><title>H5Scopy (1 samples, 0.20%)</title><rect x="28.9206%" y="181" width="0.2037%" height="15" fill="rgb(249,21,11)" fg:x="142" fg:w="1"/><text x="29.1706%" y="191.50"></text></g><g><title>H5O__msg_iterate_real (2 samples, 0.41%)</title><rect x="28.9206%" y="197" width="0.4073%" height="15" fill="rgb(222,201,40)" fg:x="142" fg:w="2"/><text x="29.1706%" y="207.50"></text></g><g><title>H5T__alloc (1 samples, 0.20%)</title><rect x="29.1242%" y="181" width="0.2037%" height="15" fill="rgb(235,61,29)" fg:x="143" fg:w="1"/><text x="29.3742%" y="191.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="29.1242%" y="165" width="0.2037%" height="15" fill="rgb(219,207,3)" fg:x="143" fg:w="1"/><text x="29.3742%" y="175.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="29.1242%" y="149" width="0.2037%" height="15" fill="rgb(222,56,46)" fg:x="143" fg:w="1"/><text x="29.3742%" y="159.50"></text></g><g><title>H5Aopen (4 samples, 0.81%)</title><rect x="28.7169%" y="277" width="0.8147%" height="15" fill="rgb(239,76,54)" fg:x="141" fg:w="4"/><text x="28.9669%" y="287.50"></text></g><g><title>H5VL_attr_open (3 samples, 0.61%)</title><rect x="28.9206%" y="261" width="0.6110%" height="15" fill="rgb(231,124,27)" fg:x="142" fg:w="3"/><text x="29.1706%" y="271.50"></text></g><g><title>H5VL__native_attr_open (3 samples, 0.61%)</title><rect x="28.9206%" y="245" width="0.6110%" height="15" fill="rgb(249,195,6)" fg:x="142" fg:w="3"/><text x="29.1706%" y="255.50"></text></g><g><title>H5A__open (3 samples, 0.61%)</title><rect x="28.9206%" y="229" width="0.6110%" height="15" fill="rgb(237,174,47)" fg:x="142" fg:w="3"/><text x="29.1706%" y="239.50"></text></g><g><title>H5O__attr_open_by_name (3 samples, 0.61%)</title><rect x="28.9206%" y="213" width="0.6110%" height="15" fill="rgb(206,201,31)" fg:x="142" fg:w="3"/><text x="29.1706%" y="223.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="29.3279%" y="197" width="0.2037%" height="15" fill="rgb(231,57,52)" fg:x="144" fg:w="1"/><text x="29.5779%" y="207.50"></text></g><g><title>H5VL__native_attr_read (1 samples, 0.20%)</title><rect x="29.5316%" y="245" width="0.2037%" height="15" fill="rgb(248,177,22)" fg:x="145" fg:w="1"/><text x="29.7816%" y="255.50"></text></g><g><title>H5A__read (1 samples, 0.20%)</title><rect x="29.5316%" y="229" width="0.2037%" height="15" fill="rgb(215,211,37)" fg:x="145" fg:w="1"/><text x="29.7816%" y="239.50"></text></g><g><title>H5AC_tag (1 samples, 0.20%)</title><rect x="29.5316%" y="213" width="0.2037%" height="15" fill="rgb(241,128,51)" fg:x="145" fg:w="1"/><text x="29.7816%" y="223.50"></text></g><g><title>H5Aread (2 samples, 0.41%)</title><rect x="29.5316%" y="277" width="0.4073%" height="15" fill="rgb(227,165,31)" fg:x="145" fg:w="2"/><text x="29.7816%" y="287.50"></text></g><g><title>H5VL_attr_read (2 samples, 0.41%)</title><rect x="29.5316%" y="261" width="0.4073%" height="15" fill="rgb(228,167,24)" fg:x="145" fg:w="2"/><text x="29.7816%" y="271.50"></text></g><g><title>H5VL_reset_vol_wrapper (1 samples, 0.20%)</title><rect x="29.7352%" y="245" width="0.2037%" height="15" fill="rgb(228,143,12)" fg:x="146" fg:w="1"/><text x="29.9852%" y="255.50"></text></g><g><title>H5G_name_free (1 samples, 0.20%)</title><rect x="29.9389%" y="197" width="0.2037%" height="15" fill="rgb(249,149,8)" fg:x="147" fg:w="1"/><text x="30.1889%" y="207.50"></text></g><g><title>H5RS_decr (1 samples, 0.20%)</title><rect x="29.9389%" y="181" width="0.2037%" height="15" fill="rgb(243,35,44)" fg:x="147" fg:w="1"/><text x="30.1889%" y="191.50"></text></g><g><title>H5FL_fac_malloc (1 samples, 0.20%)</title><rect x="30.3462%" y="149" width="0.2037%" height="15" fill="rgb(246,89,9)" fg:x="149" fg:w="1"/><text x="30.5962%" y="159.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="30.5499%" y="149" width="0.2037%" height="15" fill="rgb(233,213,13)" fg:x="150" fg:w="1"/><text x="30.7999%" y="159.50"></text></g><g><title>H5MM_xfree_const (1 samples, 0.20%)</title><rect x="30.7536%" y="149" width="0.2037%" height="15" fill="rgb(233,141,41)" fg:x="151" fg:w="1"/><text x="31.0036%" y="159.50"></text></g><g><title>H5SL_insert (4 samples, 0.81%)</title><rect x="30.3462%" y="165" width="0.8147%" height="15" fill="rgb(239,167,4)" fg:x="149" fg:w="4"/><text x="30.5962%" y="175.50"></text></g><g><title>H5_hash_string (1 samples, 0.20%)</title><rect x="30.9572%" y="149" width="0.2037%" height="15" fill="rgb(209,217,16)" fg:x="152" fg:w="1"/><text x="31.2072%" y="159.50"></text></g><g><title>H5I_dec_ref (7 samples, 1.43%)</title><rect x="30.1426%" y="197" width="1.4257%" height="15" fill="rgb(219,88,35)" fg:x="148" fg:w="7"/><text x="30.3926%" y="207.50"></text></g><g><title>H5P_close (7 samples, 1.43%)</title><rect x="30.1426%" y="181" width="1.4257%" height="15" fill="rgb(220,193,23)" fg:x="148" fg:w="7"/><text x="30.3926%" y="191.50"></text></g><g><title>H5SL_search (2 samples, 0.41%)</title><rect x="31.1609%" y="165" width="0.4073%" height="15" fill="rgb(230,90,52)" fg:x="153" fg:w="2"/><text x="31.4109%" y="175.50"></text></g><g><title>__strcmp_sse2_unaligned (1 samples, 0.20%)</title><rect x="31.3646%" y="149" width="0.2037%" height="15" fill="rgb(252,106,19)" fg:x="154" fg:w="1"/><text x="31.6146%" y="159.50"></text></g><g><title>H5VL__native_dataset_close (9 samples, 1.83%)</title><rect x="29.9389%" y="229" width="1.8330%" height="15" fill="rgb(206,74,20)" fg:x="147" fg:w="9"/><text x="30.1889%" y="239.50">H..</text></g><g><title>H5D_close (9 samples, 1.83%)</title><rect x="29.9389%" y="213" width="1.8330%" height="15" fill="rgb(230,138,44)" fg:x="147" fg:w="9"/><text x="30.1889%" y="223.50">H..</text></g><g><title>H5O_msg_reset (1 samples, 0.20%)</title><rect x="31.5682%" y="197" width="0.2037%" height="15" fill="rgb(235,182,43)" fg:x="155" fg:w="1"/><text x="31.8182%" y="207.50"></text></g><g><title>H5VL_reset_vol_wrapper (1 samples, 0.20%)</title><rect x="31.7719%" y="229" width="0.2037%" height="15" fill="rgb(242,16,51)" fg:x="156" fg:w="1"/><text x="32.0219%" y="239.50"></text></g><g><title>H5VL_dataset_close (11 samples, 2.24%)</title><rect x="29.9389%" y="245" width="2.2403%" height="15" fill="rgb(248,9,4)" fg:x="147" fg:w="11"/><text x="30.1889%" y="255.50">H..</text></g><g><title>H5VL_set_vol_wrapper (1 samples, 0.20%)</title><rect x="31.9756%" y="229" width="0.2037%" height="15" fill="rgb(210,31,22)" fg:x="157" fg:w="1"/><text x="32.2256%" y="239.50"></text></g><g><title>H5Dclose (12 samples, 2.44%)</title><rect x="29.9389%" y="277" width="2.4440%" height="15" fill="rgb(239,54,39)" fg:x="147" fg:w="12"/><text x="30.1889%" y="287.50">H5..</text></g><g><title>H5I_dec_app_ref_always_close (12 samples, 2.44%)</title><rect x="29.9389%" y="261" width="2.4440%" height="15" fill="rgb(230,99,41)" fg:x="147" fg:w="12"/><text x="30.1889%" y="271.50">H5..</text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="32.1792%" y="245" width="0.2037%" height="15" fill="rgb(253,106,12)" fg:x="158" fg:w="1"/><text x="32.4292%" y="255.50"></text></g><g><title>H5Dget_space (1 samples, 0.20%)</title><rect x="32.3829%" y="277" width="0.2037%" height="15" fill="rgb(213,46,41)" fg:x="159" fg:w="1"/><text x="32.6329%" y="287.50"></text></g><g><title>H5VL_dataset_get (1 samples, 0.20%)</title><rect x="32.3829%" y="261" width="0.2037%" height="15" fill="rgb(215,133,35)" fg:x="159" fg:w="1"/><text x="32.6329%" y="271.50"></text></g><g><title>H5VL__native_dataset_get (1 samples, 0.20%)</title><rect x="32.3829%" y="245" width="0.2037%" height="15" fill="rgb(213,28,5)" fg:x="159" fg:w="1"/><text x="32.6329%" y="255.50"></text></g><g><title>H5D__get_space (1 samples, 0.20%)</title><rect x="32.3829%" y="229" width="0.2037%" height="15" fill="rgb(215,77,49)" fg:x="159" fg:w="1"/><text x="32.6329%" y="239.50"></text></g><g><title>H5S_copy (1 samples, 0.20%)</title><rect x="32.3829%" y="213" width="0.2037%" height="15" fill="rgb(248,100,22)" fg:x="159" fg:w="1"/><text x="32.6329%" y="223.50"></text></g><g><title>H5S_select_copy (1 samples, 0.20%)</title><rect x="32.3829%" y="197" width="0.2037%" height="15" fill="rgb(208,67,9)" fg:x="159" fg:w="1"/><text x="32.6329%" y="207.50"></text></g><g><title>H5O_msg_read (2 samples, 0.41%)</title><rect x="32.9939%" y="181" width="0.4073%" height="15" fill="rgb(219,133,21)" fg:x="162" fg:w="2"/><text x="33.2439%" y="191.50"></text></g><g><title>H5O_msg_read_oh (2 samples, 0.41%)</title><rect x="32.9939%" y="165" width="0.4073%" height="15" fill="rgb(246,46,29)" fg:x="162" fg:w="2"/><text x="33.2439%" y="175.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="33.1976%" y="149" width="0.2037%" height="15" fill="rgb(246,185,52)" fg:x="163" fg:w="1"/><text x="33.4476%" y="159.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="33.1976%" y="133" width="0.2037%" height="15" fill="rgb(252,136,11)" fg:x="163" fg:w="1"/><text x="33.4476%" y="143.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="33.1976%" y="117" width="0.2037%" height="15" fill="rgb(219,138,53)" fg:x="163" fg:w="1"/><text x="33.4476%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="33.1976%" y="101" width="0.2037%" height="15" fill="rgb(211,51,23)" fg:x="163" fg:w="1"/><text x="33.4476%" y="111.50"></text></g><g><title>H5D__layout_oh_read (3 samples, 0.61%)</title><rect x="32.9939%" y="197" width="0.6110%" height="15" fill="rgb(247,221,28)" fg:x="162" fg:w="3"/><text x="33.2439%" y="207.50"></text></g><g><title>H5P_set (1 samples, 0.20%)</title><rect x="33.4012%" y="181" width="0.2037%" height="15" fill="rgb(251,222,45)" fg:x="164" fg:w="1"/><text x="33.6512%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="33.4012%" y="165" width="0.2037%" height="15" fill="rgb(217,162,53)" fg:x="164" fg:w="1"/><text x="33.6512%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="33.4012%" y="149" width="0.2037%" height="15" fill="rgb(229,93,14)" fg:x="164" fg:w="1"/><text x="33.6512%" y="159.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="33.4012%" y="133" width="0.2037%" height="15" fill="rgb(209,67,49)" fg:x="164" fg:w="1"/><text x="33.6512%" y="143.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="33.6049%" y="197" width="0.2037%" height="15" fill="rgb(213,87,29)" fg:x="165" fg:w="1"/><text x="33.8549%" y="207.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="33.8086%" y="197" width="0.2037%" height="15" fill="rgb(205,151,52)" fg:x="166" fg:w="1"/><text x="34.0586%" y="207.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="33.8086%" y="181" width="0.2037%" height="15" fill="rgb(253,215,39)" fg:x="166" fg:w="1"/><text x="34.0586%" y="191.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="33.8086%" y="165" width="0.2037%" height="15" fill="rgb(221,220,41)" fg:x="166" fg:w="1"/><text x="34.0586%" y="175.50"></text></g><g><title>H5O_msg_read_oh (2 samples, 0.41%)</title><rect x="34.0122%" y="181" width="0.4073%" height="15" fill="rgb(218,133,21)" fg:x="167" fg:w="2"/><text x="34.2622%" y="191.50"></text></g><g><title>H5T_copy (1 samples, 0.20%)</title><rect x="34.2159%" y="165" width="0.2037%" height="15" fill="rgb(221,193,43)" fg:x="168" fg:w="1"/><text x="34.4659%" y="175.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="34.2159%" y="149" width="0.2037%" height="15" fill="rgb(240,128,52)" fg:x="168" fg:w="1"/><text x="34.4659%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="34.2159%" y="133" width="0.2037%" height="15" fill="rgb(253,114,12)" fg:x="168" fg:w="1"/><text x="34.4659%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="34.2159%" y="117" width="0.2037%" height="15" fill="rgb(215,223,47)" fg:x="168" fg:w="1"/><text x="34.4659%" y="127.50"></text></g><g><title>H5O_msg_read (3 samples, 0.61%)</title><rect x="34.0122%" y="197" width="0.6110%" height="15" fill="rgb(248,225,23)" fg:x="167" fg:w="3"/><text x="34.2622%" y="207.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="34.4196%" y="181" width="0.2037%" height="15" fill="rgb(250,108,0)" fg:x="169" fg:w="1"/><text x="34.6696%" y="191.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="34.4196%" y="165" width="0.2037%" height="15" fill="rgb(228,208,7)" fg:x="169" fg:w="1"/><text x="34.6696%" y="175.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="34.4196%" y="149" width="0.2037%" height="15" fill="rgb(244,45,10)" fg:x="169" fg:w="1"/><text x="34.6696%" y="159.50"></text></g><g><title>H5O_open (1 samples, 0.20%)</title><rect x="34.6232%" y="197" width="0.2037%" height="15" fill="rgb(207,125,25)" fg:x="170" fg:w="1"/><text x="34.8732%" y="207.50"></text></g><g><title>H5F_incr_nopen_objs (1 samples, 0.20%)</title><rect x="34.6232%" y="181" width="0.2037%" height="15" fill="rgb(210,195,18)" fg:x="170" fg:w="1"/><text x="34.8732%" y="191.50"></text></g><g><title>H5I_register (1 samples, 0.20%)</title><rect x="35.0305%" y="181" width="0.2037%" height="15" fill="rgb(249,80,12)" fg:x="172" fg:w="1"/><text x="35.2805%" y="191.50"></text></g><g><title>H5I__register (1 samples, 0.20%)</title><rect x="35.0305%" y="165" width="0.2037%" height="15" fill="rgb(221,65,9)" fg:x="172" fg:w="1"/><text x="35.2805%" y="175.50"></text></g><g><title>H5O_msg_copy (1 samples, 0.20%)</title><rect x="35.2342%" y="181" width="0.2037%" height="15" fill="rgb(235,49,36)" fg:x="173" fg:w="1"/><text x="35.4842%" y="191.50"></text></g><g><title>H5P__add_prop (1 samples, 0.20%)</title><rect x="35.4379%" y="181" width="0.2037%" height="15" fill="rgb(225,32,20)" fg:x="174" fg:w="1"/><text x="35.6879%" y="191.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="35.4379%" y="165" width="0.2037%" height="15" fill="rgb(215,141,46)" fg:x="174" fg:w="1"/><text x="35.6879%" y="175.50"></text></g><g><title>H5FL_fac_free (1 samples, 0.20%)</title><rect x="35.4379%" y="149" width="0.2037%" height="15" fill="rgb(250,160,47)" fg:x="174" fg:w="1"/><text x="35.6879%" y="159.50"></text></g><g><title>H5SL_close (2 samples, 0.41%)</title><rect x="35.6415%" y="181" width="0.4073%" height="15" fill="rgb(216,222,40)" fg:x="175" fg:w="2"/><text x="35.8915%" y="191.50"></text></g><g><title>H5FL_fac_free (1 samples, 0.20%)</title><rect x="35.8452%" y="165" width="0.2037%" height="15" fill="rgb(234,217,39)" fg:x="176" fg:w="1"/><text x="36.0952%" y="175.50"></text></g><g><title>H5SL_insert (7 samples, 1.43%)</title><rect x="36.0489%" y="181" width="1.4257%" height="15" fill="rgb(207,178,40)" fg:x="177" fg:w="7"/><text x="36.2989%" y="191.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="37.4745%" y="181" width="0.2037%" height="15" fill="rgb(221,136,13)" fg:x="184" fg:w="1"/><text x="37.7245%" y="191.50"></text></g><g><title>H5_hash_string (1 samples, 0.20%)</title><rect x="37.4745%" y="165" width="0.2037%" height="15" fill="rgb(249,199,10)" fg:x="184" fg:w="1"/><text x="37.7245%" y="175.50"></text></g><g><title>H5P_copy_plist (16 samples, 3.26%)</title><rect x="34.8269%" y="197" width="3.2587%" height="15" fill="rgb(249,222,13)" fg:x="171" fg:w="16"/><text x="35.0769%" y="207.50">H5P..</text></g><g><title>__GI___libc_malloc (2 samples, 0.41%)</title><rect x="37.6782%" y="181" width="0.4073%" height="15" fill="rgb(244,185,38)" fg:x="185" fg:w="2"/><text x="37.9282%" y="191.50"></text></g><g><title>_int_malloc (2 samples, 0.41%)</title><rect x="37.6782%" y="165" width="0.4073%" height="15" fill="rgb(236,202,9)" fg:x="185" fg:w="2"/><text x="37.9282%" y="175.50"></text></g><g><title>H5O_msg_read_oh (1 samples, 0.20%)</title><rect x="38.0855%" y="165" width="0.2037%" height="15" fill="rgb(250,229,37)" fg:x="187" fg:w="1"/><text x="38.3355%" y="175.50"></text></g><g><title>H5D_open (28 samples, 5.70%)</title><rect x="32.7902%" y="213" width="5.7026%" height="15" fill="rgb(206,174,23)" fg:x="161" fg:w="28"/><text x="33.0402%" y="223.50">H5D_open</text></g><g><title>H5S_read (2 samples, 0.41%)</title><rect x="38.0855%" y="197" width="0.4073%" height="15" fill="rgb(211,33,43)" fg:x="187" fg:w="2"/><text x="38.3355%" y="207.50"></text></g><g><title>H5O_msg_read (2 samples, 0.41%)</title><rect x="38.0855%" y="181" width="0.4073%" height="15" fill="rgb(245,58,50)" fg:x="187" fg:w="2"/><text x="38.3355%" y="191.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="38.2892%" y="165" width="0.2037%" height="15" fill="rgb(244,68,36)" fg:x="188" fg:w="1"/><text x="38.5392%" y="175.50"></text></g><g><title>H5AC_protect (2 samples, 0.41%)</title><rect x="38.4929%" y="133" width="0.4073%" height="15" fill="rgb(232,229,15)" fg:x="189" fg:w="2"/><text x="38.7429%" y="143.50"></text></g><g><title>H5C_protect (2 samples, 0.41%)</title><rect x="38.4929%" y="117" width="0.4073%" height="15" fill="rgb(254,30,23)" fg:x="189" fg:w="2"/><text x="38.7429%" y="127.50"></text></g><g><title>H5F_block_read (2 samples, 0.41%)</title><rect x="38.4929%" y="101" width="0.4073%" height="15" fill="rgb(235,160,14)" fg:x="189" fg:w="2"/><text x="38.7429%" y="111.50"></text></g><g><title>H5PB_read (2 samples, 0.41%)</title><rect x="38.4929%" y="85" width="0.4073%" height="15" fill="rgb(212,155,44)" fg:x="189" fg:w="2"/><text x="38.7429%" y="95.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="38.4929%" y="69" width="0.4073%" height="15" fill="rgb(226,2,50)" fg:x="189" fg:w="2"/><text x="38.7429%" y="79.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="38.4929%" y="53" width="0.4073%" height="15" fill="rgb(234,177,6)" fg:x="189" fg:w="2"/><text x="38.7429%" y="63.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="38.4929%" y="37" width="0.4073%" height="15" fill="rgb(217,24,9)" fg:x="189" fg:w="2"/><text x="38.7429%" y="47.50"></text></g><g><title>H5B_find (3 samples, 0.61%)</title><rect x="38.4929%" y="149" width="0.6110%" height="15" fill="rgb(220,13,46)" fg:x="189" fg:w="3"/><text x="38.7429%" y="159.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="38.9002%" y="133" width="0.2037%" height="15" fill="rgb(239,221,27)" fg:x="191" fg:w="1"/><text x="39.1502%" y="143.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="38.9002%" y="117" width="0.2037%" height="15" fill="rgb(222,198,25)" fg:x="191" fg:w="1"/><text x="39.1502%" y="127.50"></text></g><g><title>H5G_loc_find (4 samples, 0.81%)</title><rect x="38.4929%" y="213" width="0.8147%" height="15" fill="rgb(211,99,13)" fg:x="189" fg:w="4"/><text x="38.7429%" y="223.50"></text></g><g><title>H5G_traverse (4 samples, 0.81%)</title><rect x="38.4929%" y="197" width="0.8147%" height="15" fill="rgb(232,111,31)" fg:x="189" fg:w="4"/><text x="38.7429%" y="207.50"></text></g><g><title>H5G__obj_lookup (4 samples, 0.81%)</title><rect x="38.4929%" y="181" width="0.8147%" height="15" fill="rgb(245,82,37)" fg:x="189" fg:w="4"/><text x="38.7429%" y="191.50"></text></g><g><title>H5G__stab_lookup (4 samples, 0.81%)</title><rect x="38.4929%" y="165" width="0.8147%" height="15" fill="rgb(227,149,46)" fg:x="189" fg:w="4"/><text x="38.7429%" y="175.50"></text></g><g><title>H5HL_protect (1 samples, 0.20%)</title><rect x="39.1039%" y="149" width="0.2037%" height="15" fill="rgb(218,36,50)" fg:x="192" fg:w="1"/><text x="39.3539%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="39.1039%" y="133" width="0.2037%" height="15" fill="rgb(226,80,48)" fg:x="192" fg:w="1"/><text x="39.3539%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="39.1039%" y="117" width="0.2037%" height="15" fill="rgb(238,224,15)" fg:x="192" fg:w="1"/><text x="39.3539%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="39.1039%" y="101" width="0.2037%" height="15" fill="rgb(241,136,10)" fg:x="192" fg:w="1"/><text x="39.3539%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="39.1039%" y="85" width="0.2037%" height="15" fill="rgb(208,32,45)" fg:x="192" fg:w="1"/><text x="39.3539%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="39.1039%" y="69" width="0.2037%" height="15" fill="rgb(207,135,9)" fg:x="192" fg:w="1"/><text x="39.3539%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="39.1039%" y="53" width="0.2037%" height="15" fill="rgb(206,86,44)" fg:x="192" fg:w="1"/><text x="39.3539%" y="63.50"></text></g><g><title>H5C__tag_entry (1 samples, 0.20%)</title><rect x="40.1222%" y="149" width="0.2037%" height="15" fill="rgb(245,177,15)" fg:x="197" fg:w="1"/><text x="40.3722%" y="159.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="40.3259%" y="149" width="0.2037%" height="15" fill="rgb(206,64,50)" fg:x="198" fg:w="1"/><text x="40.5759%" y="159.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="40.5295%" y="149" width="0.2037%" height="15" fill="rgb(234,36,40)" fg:x="199" fg:w="1"/><text x="40.7795%" y="159.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="40.5295%" y="133" width="0.2037%" height="15" fill="rgb(213,64,8)" fg:x="199" fg:w="1"/><text x="40.7795%" y="143.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="40.5295%" y="117" width="0.2037%" height="15" fill="rgb(210,75,36)" fg:x="199" fg:w="1"/><text x="40.7795%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="40.5295%" y="101" width="0.2037%" height="15" fill="rgb(229,88,21)" fg:x="199" fg:w="1"/><text x="40.7795%" y="111.50"></text></g><g><title>H5VL__native_dataset_open (43 samples, 8.76%)</title><rect x="32.7902%" y="245" width="8.7576%" height="15" fill="rgb(252,204,47)" fg:x="161" fg:w="43"/><text x="33.0402%" y="255.50">H5VL__native..</text></g><g><title>H5D__open_name (43 samples, 8.76%)</title><rect x="32.7902%" y="229" width="8.7576%" height="15" fill="rgb(208,77,27)" fg:x="161" fg:w="43"/><text x="33.0402%" y="239.50">H5D__open_na..</text></g><g><title>H5O_obj_type (11 samples, 2.24%)</title><rect x="39.3075%" y="213" width="2.2403%" height="15" fill="rgb(221,76,26)" fg:x="193" fg:w="11"/><text x="39.5575%" y="223.50">H..</text></g><g><title>H5O_protect (11 samples, 2.24%)</title><rect x="39.3075%" y="197" width="2.2403%" height="15" fill="rgb(225,139,18)" fg:x="193" fg:w="11"/><text x="39.5575%" y="207.50">H..</text></g><g><title>H5AC_protect (10 samples, 2.04%)</title><rect x="39.5112%" y="181" width="2.0367%" height="15" fill="rgb(230,137,11)" fg:x="194" fg:w="10"/><text x="39.7612%" y="191.50">H..</text></g><g><title>H5C_protect (10 samples, 2.04%)</title><rect x="39.5112%" y="165" width="2.0367%" height="15" fill="rgb(212,28,1)" fg:x="194" fg:w="10"/><text x="39.7612%" y="175.50">H..</text></g><g><title>H5F_block_read (4 samples, 0.81%)</title><rect x="40.7332%" y="149" width="0.8147%" height="15" fill="rgb(248,164,17)" fg:x="200" fg:w="4"/><text x="40.9832%" y="159.50"></text></g><g><title>H5PB_read (4 samples, 0.81%)</title><rect x="40.7332%" y="133" width="0.8147%" height="15" fill="rgb(222,171,42)" fg:x="200" fg:w="4"/><text x="40.9832%" y="143.50"></text></g><g><title>H5F__accum_read (4 samples, 0.81%)</title><rect x="40.7332%" y="117" width="0.8147%" height="15" fill="rgb(243,84,45)" fg:x="200" fg:w="4"/><text x="40.9832%" y="127.50"></text></g><g><title>H5FD_read (3 samples, 0.61%)</title><rect x="40.9369%" y="101" width="0.6110%" height="15" fill="rgb(252,49,23)" fg:x="201" fg:w="3"/><text x="41.1869%" y="111.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="41.1405%" y="85" width="0.4073%" height="15" fill="rgb(215,19,7)" fg:x="202" fg:w="2"/><text x="41.3905%" y="95.50"></text></g><g><title>H5Dopen2 (46 samples, 9.37%)</title><rect x="32.5866%" y="277" width="9.3686%" height="15" fill="rgb(238,81,41)" fg:x="160" fg:w="46"/><text x="32.8366%" y="287.50">H5Dopen2</text></g><g><title>H5VL_dataset_open (45 samples, 9.16%)</title><rect x="32.7902%" y="261" width="9.1650%" height="15" fill="rgb(210,199,37)" fg:x="161" fg:w="45"/><text x="33.0402%" y="271.50">H5VL_dataset_..</text></g><g><title>H5VL_reset_vol_wrapper (2 samples, 0.41%)</title><rect x="41.5479%" y="245" width="0.4073%" height="15" fill="rgb(244,192,49)" fg:x="204" fg:w="2"/><text x="41.7979%" y="255.50"></text></g><g><title>H5CX_get_vec_size (1 samples, 0.20%)</title><rect x="41.9552%" y="181" width="0.2037%" height="15" fill="rgb(226,211,11)" fg:x="206" fg:w="1"/><text x="42.2052%" y="191.50"></text></g><g><title>H5MM_xfree_const (1 samples, 0.20%)</title><rect x="41.9552%" y="165" width="0.2037%" height="15" fill="rgb(236,162,54)" fg:x="206" fg:w="1"/><text x="42.2052%" y="175.50"></text></g><g><title>H5FL_blk_calloc (1 samples, 0.20%)</title><rect x="42.1589%" y="165" width="0.2037%" height="15" fill="rgb(220,229,9)" fg:x="207" fg:w="1"/><text x="42.4089%" y="175.50"></text></g><g><title>__memset_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="42.1589%" y="149" width="0.2037%" height="15" fill="rgb(250,87,22)" fg:x="207" fg:w="1"/><text x="42.4089%" y="159.50"></text></g><g><title>H5Dread (5 samples, 1.02%)</title><rect x="41.9552%" y="277" width="1.0183%" height="15" fill="rgb(239,43,17)" fg:x="206" fg:w="5"/><text x="42.2052%" y="287.50"></text></g><g><title>H5VL_dataset_read (5 samples, 1.02%)</title><rect x="41.9552%" y="261" width="1.0183%" height="15" fill="rgb(231,177,25)" fg:x="206" fg:w="5"/><text x="42.2052%" y="271.50"></text></g><g><title>H5VL__native_dataset_read (5 samples, 1.02%)</title><rect x="41.9552%" y="245" width="1.0183%" height="15" fill="rgb(219,179,1)" fg:x="206" fg:w="5"/><text x="42.2052%" y="255.50"></text></g><g><title>H5D__read (5 samples, 1.02%)</title><rect x="41.9552%" y="229" width="1.0183%" height="15" fill="rgb(238,219,53)" fg:x="206" fg:w="5"/><text x="42.2052%" y="239.50"></text></g><g><title>H5D__contig_read (5 samples, 1.02%)</title><rect x="41.9552%" y="213" width="1.0183%" height="15" fill="rgb(232,167,36)" fg:x="206" fg:w="5"/><text x="42.2052%" y="223.50"></text></g><g><title>H5D__select_read (5 samples, 1.02%)</title><rect x="41.9552%" y="197" width="1.0183%" height="15" fill="rgb(244,19,51)" fg:x="206" fg:w="5"/><text x="42.2052%" y="207.50"></text></g><g><title>H5VM_opvv (4 samples, 0.81%)</title><rect x="42.1589%" y="181" width="0.8147%" height="15" fill="rgb(224,6,22)" fg:x="207" fg:w="4"/><text x="42.4089%" y="191.50"></text></g><g><title>H5F_shared_block_read (3 samples, 0.61%)</title><rect x="42.3625%" y="165" width="0.6110%" height="15" fill="rgb(224,145,5)" fg:x="208" fg:w="3"/><text x="42.6125%" y="175.50"></text></g><g><title>H5PB_read (2 samples, 0.41%)</title><rect x="42.5662%" y="149" width="0.4073%" height="15" fill="rgb(234,130,49)" fg:x="209" fg:w="2"/><text x="42.8162%" y="159.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="42.5662%" y="133" width="0.4073%" height="15" fill="rgb(254,6,2)" fg:x="209" fg:w="2"/><text x="42.8162%" y="143.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="42.5662%" y="117" width="0.4073%" height="15" fill="rgb(208,96,46)" fg:x="209" fg:w="2"/><text x="42.8162%" y="127.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="42.5662%" y="101" width="0.4073%" height="15" fill="rgb(239,3,39)" fg:x="209" fg:w="2"/><text x="42.8162%" y="111.50"></text></g><g><title>H5CX_push (1 samples, 0.20%)</title><rect x="42.9735%" y="261" width="0.2037%" height="15" fill="rgb(233,210,1)" fg:x="211" fg:w="1"/><text x="43.2235%" y="271.50"></text></g><g><title>H5VL__native_group_close (1 samples, 0.20%)</title><rect x="43.1772%" y="229" width="0.2037%" height="15" fill="rgb(244,137,37)" fg:x="212" fg:w="1"/><text x="43.4272%" y="239.50"></text></g><g><title>H5G_close (1 samples, 0.20%)</title><rect x="43.1772%" y="213" width="0.2037%" height="15" fill="rgb(240,136,2)" fg:x="212" fg:w="1"/><text x="43.4272%" y="223.50"></text></g><g><title>H5VL_reset_vol_wrapper (1 samples, 0.20%)</title><rect x="43.3809%" y="229" width="0.2037%" height="15" fill="rgb(239,18,37)" fg:x="213" fg:w="1"/><text x="43.6309%" y="239.50"></text></g><g><title>H5Gclose (4 samples, 0.81%)</title><rect x="42.9735%" y="277" width="0.8147%" height="15" fill="rgb(218,185,22)" fg:x="211" fg:w="4"/><text x="43.2235%" y="287.50"></text></g><g><title>H5I_dec_app_ref (3 samples, 0.61%)</title><rect x="43.1772%" y="261" width="0.6110%" height="15" fill="rgb(225,218,4)" fg:x="212" fg:w="3"/><text x="43.4272%" y="271.50"></text></g><g><title>H5VL_group_close (3 samples, 0.61%)</title><rect x="43.1772%" y="245" width="0.6110%" height="15" fill="rgb(230,182,32)" fg:x="212" fg:w="3"/><text x="43.4272%" y="255.50"></text></g><g><title>H5VL_set_vol_wrapper (1 samples, 0.20%)</title><rect x="43.5845%" y="229" width="0.2037%" height="15" fill="rgb(242,56,43)" fg:x="214" fg:w="1"/><text x="43.8345%" y="239.50"></text></g><g><title>H5G__link_to_loc (2 samples, 0.41%)</title><rect x="44.3992%" y="181" width="0.4073%" height="15" fill="rgb(233,99,24)" fg:x="218" fg:w="2"/><text x="44.6492%" y="191.50"></text></g><g><title>H5G_name_set (2 samples, 0.41%)</title><rect x="44.3992%" y="165" width="0.4073%" height="15" fill="rgb(234,209,42)" fg:x="218" fg:w="2"/><text x="44.6492%" y="175.50"></text></g><g><title>H5G_build_fullpath_refstr_str (2 samples, 0.41%)</title><rect x="44.3992%" y="149" width="0.4073%" height="15" fill="rgb(227,7,12)" fg:x="218" fg:w="2"/><text x="44.6492%" y="159.50"></text></g><g><title>__strlen_sse2 (1 samples, 0.20%)</title><rect x="44.6029%" y="133" width="0.2037%" height="15" fill="rgb(245,203,43)" fg:x="219" fg:w="1"/><text x="44.8529%" y="143.50"></text></g><g><title>H5G__obj_get_linfo (2 samples, 0.41%)</title><rect x="44.8065%" y="165" width="0.4073%" height="15" fill="rgb(238,205,33)" fg:x="220" fg:w="2"/><text x="45.0565%" y="175.50"></text></g><g><title>H5O_msg_exists (2 samples, 0.41%)</title><rect x="44.8065%" y="149" width="0.4073%" height="15" fill="rgb(231,56,7)" fg:x="220" fg:w="2"/><text x="45.0565%" y="159.50"></text></g><g><title>H5O_msg_exists_oh (1 samples, 0.20%)</title><rect x="45.0102%" y="133" width="0.2037%" height="15" fill="rgb(244,186,29)" fg:x="221" fg:w="1"/><text x="45.2602%" y="143.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="45.8248%" y="101" width="0.2037%" height="15" fill="rgb(234,111,31)" fg:x="225" fg:w="1"/><text x="46.0748%" y="111.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="45.8248%" y="85" width="0.2037%" height="15" fill="rgb(241,149,10)" fg:x="225" fg:w="1"/><text x="46.0748%" y="95.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="45.8248%" y="69" width="0.2037%" height="15" fill="rgb(249,206,44)" fg:x="225" fg:w="1"/><text x="46.0748%" y="79.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="45.8248%" y="53" width="0.2037%" height="15" fill="rgb(251,153,30)" fg:x="225" fg:w="1"/><text x="46.0748%" y="63.50"></text></g><g><title>H5AC_protect (4 samples, 0.81%)</title><rect x="45.6212%" y="133" width="0.8147%" height="15" fill="rgb(239,152,38)" fg:x="224" fg:w="4"/><text x="45.8712%" y="143.50"></text></g><g><title>H5C_protect (4 samples, 0.81%)</title><rect x="45.6212%" y="117" width="0.8147%" height="15" fill="rgb(249,139,47)" fg:x="224" fg:w="4"/><text x="45.8712%" y="127.50"></text></g><g><title>H5F_block_read (2 samples, 0.41%)</title><rect x="46.0285%" y="101" width="0.4073%" height="15" fill="rgb(244,64,35)" fg:x="226" fg:w="2"/><text x="46.2785%" y="111.50"></text></g><g><title>H5PB_read (2 samples, 0.41%)</title><rect x="46.0285%" y="85" width="0.4073%" height="15" fill="rgb(216,46,15)" fg:x="226" fg:w="2"/><text x="46.2785%" y="95.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="46.0285%" y="69" width="0.4073%" height="15" fill="rgb(250,74,19)" fg:x="226" fg:w="2"/><text x="46.2785%" y="79.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="46.0285%" y="53" width="0.4073%" height="15" fill="rgb(249,42,33)" fg:x="226" fg:w="2"/><text x="46.2785%" y="63.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="46.0285%" y="37" width="0.4073%" height="15" fill="rgb(242,149,17)" fg:x="226" fg:w="2"/><text x="46.2785%" y="47.50"></text></g><g><title>H5B_find (6 samples, 1.22%)</title><rect x="45.4175%" y="149" width="1.2220%" height="15" fill="rgb(244,29,21)" fg:x="223" fg:w="6"/><text x="45.6675%" y="159.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="46.4358%" y="133" width="0.2037%" height="15" fill="rgb(220,130,37)" fg:x="228" fg:w="1"/><text x="46.6858%" y="143.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="46.4358%" y="117" width="0.2037%" height="15" fill="rgb(211,67,2)" fg:x="228" fg:w="1"/><text x="46.6858%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="46.8432%" y="101" width="0.2037%" height="15" fill="rgb(235,68,52)" fg:x="230" fg:w="1"/><text x="47.0932%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="46.8432%" y="85" width="0.2037%" height="15" fill="rgb(246,142,3)" fg:x="230" fg:w="1"/><text x="47.0932%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="46.8432%" y="69" width="0.2037%" height="15" fill="rgb(241,25,7)" fg:x="230" fg:w="1"/><text x="47.0932%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="46.8432%" y="53" width="0.2037%" height="15" fill="rgb(242,119,39)" fg:x="230" fg:w="1"/><text x="47.0932%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="46.8432%" y="37" width="0.2037%" height="15" fill="rgb(241,98,45)" fg:x="230" fg:w="1"/><text x="47.0932%" y="47.50"></text></g><g><title>H5HL_protect (3 samples, 0.61%)</title><rect x="46.6395%" y="149" width="0.6110%" height="15" fill="rgb(254,28,30)" fg:x="229" fg:w="3"/><text x="46.8895%" y="159.50"></text></g><g><title>H5AC_protect (3 samples, 0.61%)</title><rect x="46.6395%" y="133" width="0.6110%" height="15" fill="rgb(241,142,54)" fg:x="229" fg:w="3"/><text x="46.8895%" y="143.50"></text></g><g><title>H5C_protect (3 samples, 0.61%)</title><rect x="46.6395%" y="117" width="0.6110%" height="15" fill="rgb(222,85,15)" fg:x="229" fg:w="3"/><text x="46.8895%" y="127.50"></text></g><g><title>H5HL__new (1 samples, 0.20%)</title><rect x="47.0468%" y="101" width="0.2037%" height="15" fill="rgb(210,85,47)" fg:x="231" fg:w="1"/><text x="47.2968%" y="111.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="47.0468%" y="85" width="0.2037%" height="15" fill="rgb(224,206,25)" fg:x="231" fg:w="1"/><text x="47.2968%" y="95.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="47.0468%" y="69" width="0.2037%" height="15" fill="rgb(243,201,19)" fg:x="231" fg:w="1"/><text x="47.2968%" y="79.50"></text></g><g><title>H5G__obj_lookup (13 samples, 2.65%)</title><rect x="44.8065%" y="181" width="2.6477%" height="15" fill="rgb(236,59,4)" fg:x="220" fg:w="13"/><text x="45.0565%" y="191.50">H5..</text></g><g><title>H5G__stab_lookup (11 samples, 2.24%)</title><rect x="45.2138%" y="165" width="2.2403%" height="15" fill="rgb(254,179,45)" fg:x="222" fg:w="11"/><text x="45.4638%" y="175.50">H..</text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="47.2505%" y="149" width="0.2037%" height="15" fill="rgb(226,14,10)" fg:x="232" fg:w="1"/><text x="47.5005%" y="159.50"></text></g><g><title>H5G_loc_find (18 samples, 3.67%)</title><rect x="43.9919%" y="213" width="3.6660%" height="15" fill="rgb(244,27,41)" fg:x="216" fg:w="18"/><text x="44.2419%" y="223.50">H5G_..</text></g><g><title>H5G_traverse (18 samples, 3.67%)</title><rect x="43.9919%" y="197" width="3.6660%" height="15" fill="rgb(235,35,32)" fg:x="216" fg:w="18"/><text x="44.2419%" y="207.50">H5G_..</text></g><g><title>H5G_loc_copy (1 samples, 0.20%)</title><rect x="47.4542%" y="181" width="0.2037%" height="15" fill="rgb(218,68,31)" fg:x="233" fg:w="1"/><text x="47.7042%" y="191.50"></text></g><g><title>H5G_name_copy (1 samples, 0.20%)</title><rect x="47.4542%" y="165" width="0.2037%" height="15" fill="rgb(207,120,37)" fg:x="233" fg:w="1"/><text x="47.7042%" y="175.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="47.4542%" y="149" width="0.2037%" height="15" fill="rgb(227,98,0)" fg:x="233" fg:w="1"/><text x="47.7042%" y="159.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="47.6578%" y="197" width="0.2037%" height="15" fill="rgb(207,7,3)" fg:x="234" fg:w="1"/><text x="47.9078%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.20%)</title><rect x="47.6578%" y="181" width="0.2037%" height="15" fill="rgb(206,98,19)" fg:x="234" fg:w="1"/><text x="47.9078%" y="191.50"></text></g><g><title>H5FO_insert (1 samples, 0.20%)</title><rect x="47.8615%" y="197" width="0.2037%" height="15" fill="rgb(217,5,26)" fg:x="235" fg:w="1"/><text x="48.1115%" y="207.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="47.8615%" y="181" width="0.2037%" height="15" fill="rgb(235,190,38)" fg:x="235" fg:w="1"/><text x="48.1115%" y="191.50"></text></g><g><title>H5G_open (3 samples, 0.61%)</title><rect x="47.6578%" y="213" width="0.6110%" height="15" fill="rgb(247,86,24)" fg:x="234" fg:w="3"/><text x="47.9078%" y="223.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="48.0652%" y="197" width="0.2037%" height="15" fill="rgb(205,101,16)" fg:x="236" fg:w="1"/><text x="48.3152%" y="207.50"></text></g><g><title>H5O_unprotect (1 samples, 0.20%)</title><rect x="48.0652%" y="181" width="0.2037%" height="15" fill="rgb(246,168,33)" fg:x="236" fg:w="1"/><text x="48.3152%" y="191.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="48.0652%" y="165" width="0.2037%" height="15" fill="rgb(231,114,1)" fg:x="236" fg:w="1"/><text x="48.3152%" y="175.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="48.0652%" y="149" width="0.2037%" height="15" fill="rgb(207,184,53)" fg:x="236" fg:w="1"/><text x="48.3152%" y="159.50"></text></g><g><title>H5F_block_read (4 samples, 0.81%)</title><rect x="49.0835%" y="149" width="0.8147%" height="15" fill="rgb(224,95,51)" fg:x="241" fg:w="4"/><text x="49.3335%" y="159.50"></text></g><g><title>H5PB_read (4 samples, 0.81%)</title><rect x="49.0835%" y="133" width="0.8147%" height="15" fill="rgb(212,188,45)" fg:x="241" fg:w="4"/><text x="49.3335%" y="143.50"></text></g><g><title>H5F__accum_read (4 samples, 0.81%)</title><rect x="49.0835%" y="117" width="0.8147%" height="15" fill="rgb(223,154,38)" fg:x="241" fg:w="4"/><text x="49.3335%" y="127.50"></text></g><g><title>H5FD_read (4 samples, 0.81%)</title><rect x="49.0835%" y="101" width="0.8147%" height="15" fill="rgb(251,22,52)" fg:x="241" fg:w="4"/><text x="49.3335%" y="111.50"></text></g><g><title>__libc_pread64 (4 samples, 0.81%)</title><rect x="49.0835%" y="85" width="0.8147%" height="15" fill="rgb(229,209,22)" fg:x="241" fg:w="4"/><text x="49.3335%" y="95.50"></text></g><g><title>H5VL__native_group_open (31 samples, 6.31%)</title><rect x="43.7882%" y="245" width="6.3136%" height="15" fill="rgb(234,138,34)" fg:x="215" fg:w="31"/><text x="44.0382%" y="255.50">H5VL__na..</text></g><g><title>H5G__open_name (30 samples, 6.11%)</title><rect x="43.9919%" y="229" width="6.1100%" height="15" fill="rgb(212,95,11)" fg:x="216" fg:w="30"/><text x="44.2419%" y="239.50">H5G__ope..</text></g><g><title>H5O_obj_type (9 samples, 1.83%)</title><rect x="48.2688%" y="213" width="1.8330%" height="15" fill="rgb(240,179,47)" fg:x="237" fg:w="9"/><text x="48.5188%" y="223.50">H..</text></g><g><title>H5O_protect (8 samples, 1.63%)</title><rect x="48.4725%" y="197" width="1.6293%" height="15" fill="rgb(240,163,11)" fg:x="238" fg:w="8"/><text x="48.7225%" y="207.50"></text></g><g><title>H5AC_protect (7 samples, 1.43%)</title><rect x="48.6762%" y="181" width="1.4257%" height="15" fill="rgb(236,37,12)" fg:x="239" fg:w="7"/><text x="48.9262%" y="191.50"></text></g><g><title>H5C_protect (7 samples, 1.43%)</title><rect x="48.6762%" y="165" width="1.4257%" height="15" fill="rgb(232,164,16)" fg:x="239" fg:w="7"/><text x="48.9262%" y="175.50"></text></g><g><title>H5O__alloc_msgs (1 samples, 0.20%)</title><rect x="49.8982%" y="149" width="0.2037%" height="15" fill="rgb(244,205,15)" fg:x="245" fg:w="1"/><text x="50.1482%" y="159.50"></text></g><g><title>H5FL_blk_realloc (1 samples, 0.20%)</title><rect x="49.8982%" y="133" width="0.2037%" height="15" fill="rgb(223,117,47)" fg:x="245" fg:w="1"/><text x="50.1482%" y="143.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="49.8982%" y="117" width="0.2037%" height="15" fill="rgb(244,107,35)" fg:x="245" fg:w="1"/><text x="50.1482%" y="127.50"></text></g><g><title>H5Gopen2 (32 samples, 6.52%)</title><rect x="43.7882%" y="277" width="6.5173%" height="15" fill="rgb(205,140,8)" fg:x="215" fg:w="32"/><text x="44.0382%" y="287.50">H5Gopen2</text></g><g><title>H5VL_group_open (32 samples, 6.52%)</title><rect x="43.7882%" y="261" width="6.5173%" height="15" fill="rgb(228,84,46)" fg:x="215" fg:w="32"/><text x="44.0382%" y="271.50">H5VL_grou..</text></g><g><title>H5VL_set_vol_wrapper (1 samples, 0.20%)</title><rect x="50.1018%" y="245" width="0.2037%" height="15" fill="rgb(254,188,9)" fg:x="246" fg:w="1"/><text x="50.3518%" y="255.50"></text></g><g><title>H5Sclose (1 samples, 0.20%)</title><rect x="50.3055%" y="277" width="0.2037%" height="15" fill="rgb(206,112,54)" fg:x="247" fg:w="1"/><text x="50.5555%" y="287.50"></text></g><g><title>H5Tclose (1 samples, 0.20%)</title><rect x="50.5092%" y="277" width="0.2037%" height="15" fill="rgb(216,84,49)" fg:x="248" fg:w="1"/><text x="50.7592%" y="287.50"></text></g><g><title>NeuralNetwork::parseBatchNormalizationLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (116 samples, 23.63%)</title><rect x="27.2912%" y="293" width="23.6253%" height="15" fill="rgb(214,194,35)" fg:x="134" fg:w="116"/><text x="27.5412%" y="303.50">NeuralNetwork::parseBatchNormalization..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_append(unsigned long) (1 samples, 0.20%)</title><rect x="50.7128%" y="277" width="0.2037%" height="15" fill="rgb(249,28,3)" fg:x="249" fg:w="1"/><text x="50.9628%" y="287.50"></text></g><g><title>__memset_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="50.7128%" y="261" width="0.2037%" height="15" fill="rgb(222,56,52)" fg:x="249" fg:w="1"/><text x="50.9628%" y="271.50"></text></g><g><title>H5Aopen (1 samples, 0.20%)</title><rect x="50.9165%" y="277" width="0.2037%" height="15" fill="rgb(245,217,50)" fg:x="250" fg:w="1"/><text x="51.1665%" y="287.50"></text></g><g><title>H5VL_attr_open (1 samples, 0.20%)</title><rect x="50.9165%" y="261" width="0.2037%" height="15" fill="rgb(213,201,24)" fg:x="250" fg:w="1"/><text x="51.1665%" y="271.50"></text></g><g><title>H5VL_reset_vol_wrapper (1 samples, 0.20%)</title><rect x="50.9165%" y="245" width="0.2037%" height="15" fill="rgb(248,116,28)" fg:x="250" fg:w="1"/><text x="51.1665%" y="255.50"></text></g><g><title>H5FL_reg_free (1 samples, 0.20%)</title><rect x="50.9165%" y="229" width="0.2037%" height="15" fill="rgb(219,72,43)" fg:x="250" fg:w="1"/><text x="51.1665%" y="239.50"></text></g><g><title>H5Dclose (3 samples, 0.61%)</title><rect x="51.1202%" y="277" width="0.6110%" height="15" fill="rgb(209,138,14)" fg:x="251" fg:w="3"/><text x="51.3702%" y="287.50"></text></g><g><title>H5I_dec_app_ref_always_close (3 samples, 0.61%)</title><rect x="51.1202%" y="261" width="0.6110%" height="15" fill="rgb(222,18,33)" fg:x="251" fg:w="3"/><text x="51.3702%" y="271.50"></text></g><g><title>H5VL_dataset_close (3 samples, 0.61%)</title><rect x="51.1202%" y="245" width="0.6110%" height="15" fill="rgb(213,199,7)" fg:x="251" fg:w="3"/><text x="51.3702%" y="255.50"></text></g><g><title>H5VL__native_dataset_close (3 samples, 0.61%)</title><rect x="51.1202%" y="229" width="0.6110%" height="15" fill="rgb(250,110,10)" fg:x="251" fg:w="3"/><text x="51.3702%" y="239.50"></text></g><g><title>H5D_close (3 samples, 0.61%)</title><rect x="51.1202%" y="213" width="0.6110%" height="15" fill="rgb(248,123,6)" fg:x="251" fg:w="3"/><text x="51.3702%" y="223.50"></text></g><g><title>H5I_dec_ref (2 samples, 0.41%)</title><rect x="51.3238%" y="197" width="0.4073%" height="15" fill="rgb(206,91,31)" fg:x="252" fg:w="2"/><text x="51.5738%" y="207.50"></text></g><g><title>H5P_close (2 samples, 0.41%)</title><rect x="51.3238%" y="181" width="0.4073%" height="15" fill="rgb(211,154,13)" fg:x="252" fg:w="2"/><text x="51.5738%" y="191.50"></text></g><g><title>H5SL_destroy (1 samples, 0.20%)</title><rect x="51.5275%" y="165" width="0.2037%" height="15" fill="rgb(225,148,7)" fg:x="253" fg:w="1"/><text x="51.7775%" y="175.50"></text></g><g><title>H5FL_reg_free (1 samples, 0.20%)</title><rect x="51.5275%" y="149" width="0.2037%" height="15" fill="rgb(220,160,43)" fg:x="253" fg:w="1"/><text x="51.7775%" y="159.50"></text></g><g><title>H5D__layout_oh_read (1 samples, 0.20%)</title><rect x="51.7312%" y="197" width="0.2037%" height="15" fill="rgb(213,52,39)" fg:x="254" fg:w="1"/><text x="51.9812%" y="207.50"></text></g><g><title>H5SL_search (2 samples, 0.41%)</title><rect x="51.9348%" y="181" width="0.4073%" height="15" fill="rgb(243,137,7)" fg:x="255" fg:w="2"/><text x="52.1848%" y="191.50"></text></g><g><title>H5_hash_string (2 samples, 0.41%)</title><rect x="51.9348%" y="165" width="0.4073%" height="15" fill="rgb(230,79,13)" fg:x="255" fg:w="2"/><text x="52.1848%" y="175.50"></text></g><g><title>H5D_open (4 samples, 0.81%)</title><rect x="51.7312%" y="213" width="0.8147%" height="15" fill="rgb(247,105,23)" fg:x="254" fg:w="4"/><text x="51.9812%" y="223.50"></text></g><g><title>H5P_copy_plist (3 samples, 0.61%)</title><rect x="51.9348%" y="197" width="0.6110%" height="15" fill="rgb(223,179,41)" fg:x="255" fg:w="3"/><text x="52.1848%" y="207.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="52.3422%" y="181" width="0.2037%" height="15" fill="rgb(218,9,34)" fg:x="257" fg:w="1"/><text x="52.5922%" y="191.50"></text></g><g><title>H5G__obj_get_linfo (1 samples, 0.20%)</title><rect x="52.5458%" y="165" width="0.2037%" height="15" fill="rgb(222,106,8)" fg:x="258" fg:w="1"/><text x="52.7958%" y="175.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="52.5458%" y="149" width="0.2037%" height="15" fill="rgb(211,220,0)" fg:x="258" fg:w="1"/><text x="52.7958%" y="159.50"></text></g><g><title>H5O_unprotect (1 samples, 0.20%)</title><rect x="52.5458%" y="133" width="0.2037%" height="15" fill="rgb(229,52,16)" fg:x="258" fg:w="1"/><text x="52.7958%" y="143.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="52.5458%" y="117" width="0.2037%" height="15" fill="rgb(212,155,18)" fg:x="258" fg:w="1"/><text x="52.7958%" y="127.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="52.5458%" y="101" width="0.2037%" height="15" fill="rgb(242,21,14)" fg:x="258" fg:w="1"/><text x="52.7958%" y="111.50"></text></g><g><title>H5Dopen2 (9 samples, 1.83%)</title><rect x="51.7312%" y="277" width="1.8330%" height="15" fill="rgb(222,19,48)" fg:x="254" fg:w="9"/><text x="51.9812%" y="287.50">H..</text></g><g><title>H5VL_dataset_open (9 samples, 1.83%)</title><rect x="51.7312%" y="261" width="1.8330%" height="15" fill="rgb(232,45,27)" fg:x="254" fg:w="9"/><text x="51.9812%" y="271.50">H..</text></g><g><title>H5VL__native_dataset_open (9 samples, 1.83%)</title><rect x="51.7312%" y="245" width="1.8330%" height="15" fill="rgb(249,103,42)" fg:x="254" fg:w="9"/><text x="51.9812%" y="255.50">H..</text></g><g><title>H5D__open_name (9 samples, 1.83%)</title><rect x="51.7312%" y="229" width="1.8330%" height="15" fill="rgb(246,81,33)" fg:x="254" fg:w="9"/><text x="51.9812%" y="239.50">H..</text></g><g><title>H5G_loc_find (5 samples, 1.02%)</title><rect x="52.5458%" y="213" width="1.0183%" height="15" fill="rgb(252,33,42)" fg:x="258" fg:w="5"/><text x="52.7958%" y="223.50"></text></g><g><title>H5G_traverse (5 samples, 1.02%)</title><rect x="52.5458%" y="197" width="1.0183%" height="15" fill="rgb(209,212,41)" fg:x="258" fg:w="5"/><text x="52.7958%" y="207.50"></text></g><g><title>H5G__obj_lookup (5 samples, 1.02%)</title><rect x="52.5458%" y="181" width="1.0183%" height="15" fill="rgb(207,154,6)" fg:x="258" fg:w="5"/><text x="52.7958%" y="191.50"></text></g><g><title>H5G__stab_lookup (4 samples, 0.81%)</title><rect x="52.7495%" y="165" width="0.8147%" height="15" fill="rgb(223,64,47)" fg:x="259" fg:w="4"/><text x="52.9995%" y="175.50"></text></g><g><title>H5B_find (4 samples, 0.81%)</title><rect x="52.7495%" y="149" width="0.8147%" height="15" fill="rgb(211,161,38)" fg:x="259" fg:w="4"/><text x="52.9995%" y="159.50"></text></g><g><title>H5AC_protect (4 samples, 0.81%)</title><rect x="52.7495%" y="133" width="0.8147%" height="15" fill="rgb(219,138,40)" fg:x="259" fg:w="4"/><text x="52.9995%" y="143.50"></text></g><g><title>H5C_protect (4 samples, 0.81%)</title><rect x="52.7495%" y="117" width="0.8147%" height="15" fill="rgb(241,228,46)" fg:x="259" fg:w="4"/><text x="52.9995%" y="127.50"></text></g><g><title>H5F_block_read (3 samples, 0.61%)</title><rect x="52.9532%" y="101" width="0.6110%" height="15" fill="rgb(223,209,38)" fg:x="260" fg:w="3"/><text x="53.2032%" y="111.50"></text></g><g><title>H5PB_read (3 samples, 0.61%)</title><rect x="52.9532%" y="85" width="0.6110%" height="15" fill="rgb(236,164,45)" fg:x="260" fg:w="3"/><text x="53.2032%" y="95.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="53.1568%" y="69" width="0.4073%" height="15" fill="rgb(231,15,5)" fg:x="261" fg:w="2"/><text x="53.4068%" y="79.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="53.1568%" y="53" width="0.4073%" height="15" fill="rgb(252,35,15)" fg:x="261" fg:w="2"/><text x="53.4068%" y="63.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="53.1568%" y="37" width="0.4073%" height="15" fill="rgb(248,181,18)" fg:x="261" fg:w="2"/><text x="53.4068%" y="47.50"></text></g><g><title>H5B_find (1 samples, 0.20%)</title><rect x="53.7678%" y="149" width="0.2037%" height="15" fill="rgb(233,39,42)" fg:x="264" fg:w="1"/><text x="54.0178%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="53.7678%" y="133" width="0.2037%" height="15" fill="rgb(238,110,33)" fg:x="264" fg:w="1"/><text x="54.0178%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="53.7678%" y="117" width="0.2037%" height="15" fill="rgb(233,195,10)" fg:x="264" fg:w="1"/><text x="54.0178%" y="127.50"></text></g><g><title>H5G_loc_find (3 samples, 0.61%)</title><rect x="53.5642%" y="213" width="0.6110%" height="15" fill="rgb(254,105,3)" fg:x="263" fg:w="3"/><text x="53.8142%" y="223.50"></text></g><g><title>H5G_traverse (3 samples, 0.61%)</title><rect x="53.5642%" y="197" width="0.6110%" height="15" fill="rgb(221,225,9)" fg:x="263" fg:w="3"/><text x="53.8142%" y="207.50"></text></g><g><title>H5G__obj_lookup (3 samples, 0.61%)</title><rect x="53.5642%" y="181" width="0.6110%" height="15" fill="rgb(224,227,45)" fg:x="263" fg:w="3"/><text x="53.8142%" y="191.50"></text></g><g><title>H5G__stab_lookup (2 samples, 0.41%)</title><rect x="53.7678%" y="165" width="0.4073%" height="15" fill="rgb(229,198,43)" fg:x="264" fg:w="2"/><text x="54.0178%" y="175.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="53.9715%" y="149" width="0.2037%" height="15" fill="rgb(206,209,35)" fg:x="265" fg:w="1"/><text x="54.2215%" y="159.50"></text></g><g><title>H5O_msg_read_oh (1 samples, 0.20%)</title><rect x="53.9715%" y="133" width="0.2037%" height="15" fill="rgb(245,195,53)" fg:x="265" fg:w="1"/><text x="54.2215%" y="143.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="53.9715%" y="117" width="0.2037%" height="15" fill="rgb(240,92,26)" fg:x="265" fg:w="1"/><text x="54.2215%" y="127.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="53.9715%" y="101" width="0.2037%" height="15" fill="rgb(207,40,23)" fg:x="265" fg:w="1"/><text x="54.2215%" y="111.50"></text></g><g><title>H5G_open (1 samples, 0.20%)</title><rect x="54.1752%" y="213" width="0.2037%" height="15" fill="rgb(223,111,35)" fg:x="266" fg:w="1"/><text x="54.4252%" y="223.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="54.5825%" y="149" width="0.2037%" height="15" fill="rgb(229,147,28)" fg:x="268" fg:w="1"/><text x="54.8325%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="54.5825%" y="133" width="0.2037%" height="15" fill="rgb(211,29,28)" fg:x="268" fg:w="1"/><text x="54.8325%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="54.5825%" y="117" width="0.2037%" height="15" fill="rgb(228,72,33)" fg:x="268" fg:w="1"/><text x="54.8325%" y="127.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="54.7862%" y="149" width="0.2037%" height="15" fill="rgb(205,214,31)" fg:x="269" fg:w="1"/><text x="55.0362%" y="159.50"></text></g><g><title>H5Gopen2 (8 samples, 1.63%)</title><rect x="53.5642%" y="277" width="1.6293%" height="15" fill="rgb(224,111,15)" fg:x="263" fg:w="8"/><text x="53.8142%" y="287.50"></text></g><g><title>H5VL_group_open (8 samples, 1.63%)</title><rect x="53.5642%" y="261" width="1.6293%" height="15" fill="rgb(253,21,26)" fg:x="263" fg:w="8"/><text x="53.8142%" y="271.50"></text></g><g><title>H5VL__native_group_open (8 samples, 1.63%)</title><rect x="53.5642%" y="245" width="1.6293%" height="15" fill="rgb(245,139,43)" fg:x="263" fg:w="8"/><text x="53.8142%" y="255.50"></text></g><g><title>H5G__open_name (8 samples, 1.63%)</title><rect x="53.5642%" y="229" width="1.6293%" height="15" fill="rgb(252,170,7)" fg:x="263" fg:w="8"/><text x="53.8142%" y="239.50"></text></g><g><title>H5O_obj_type (4 samples, 0.81%)</title><rect x="54.3788%" y="213" width="0.8147%" height="15" fill="rgb(231,118,14)" fg:x="267" fg:w="4"/><text x="54.6288%" y="223.50"></text></g><g><title>H5O_protect (4 samples, 0.81%)</title><rect x="54.3788%" y="197" width="0.8147%" height="15" fill="rgb(238,83,0)" fg:x="267" fg:w="4"/><text x="54.6288%" y="207.50"></text></g><g><title>H5AC_protect (4 samples, 0.81%)</title><rect x="54.3788%" y="181" width="0.8147%" height="15" fill="rgb(221,39,39)" fg:x="267" fg:w="4"/><text x="54.6288%" y="191.50"></text></g><g><title>H5C_protect (4 samples, 0.81%)</title><rect x="54.3788%" y="165" width="0.8147%" height="15" fill="rgb(222,119,46)" fg:x="267" fg:w="4"/><text x="54.6288%" y="175.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="54.9898%" y="149" width="0.2037%" height="15" fill="rgb(222,165,49)" fg:x="270" fg:w="1"/><text x="55.2398%" y="159.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="54.9898%" y="133" width="0.2037%" height="15" fill="rgb(219,113,52)" fg:x="270" fg:w="1"/><text x="55.2398%" y="143.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="54.9898%" y="117" width="0.2037%" height="15" fill="rgb(214,7,15)" fg:x="270" fg:w="1"/><text x="55.2398%" y="127.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="55.1935%" y="277" width="0.2037%" height="15" fill="rgb(235,32,4)" fg:x="271" fg:w="1"/><text x="55.4435%" y="287.50"></text></g><g><title>NeuralNetwork::parseConv2DLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (23 samples, 4.68%)</title><rect x="50.9165%" y="293" width="4.6843%" height="15" fill="rgb(238,90,54)" fg:x="250" fg:w="23"/><text x="51.1665%" y="303.50">Neura..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_append(unsigned long) (1 samples, 0.20%)</title><rect x="55.3971%" y="277" width="0.2037%" height="15" fill="rgb(213,208,19)" fg:x="272" fg:w="1"/><text x="55.6471%" y="287.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="55.3971%" y="261" width="0.2037%" height="15" fill="rgb(233,156,4)" fg:x="272" fg:w="1"/><text x="55.6471%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="55.3971%" y="245" width="0.2037%" height="15" fill="rgb(207,194,5)" fg:x="272" fg:w="1"/><text x="55.6471%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="55.3971%" y="229" width="0.2037%" height="15" fill="rgb(206,111,30)" fg:x="272" fg:w="1"/><text x="55.6471%" y="239.50"></text></g><g><title>H5Aopen (1 samples, 0.20%)</title><rect x="55.6008%" y="277" width="0.2037%" height="15" fill="rgb(243,70,54)" fg:x="273" fg:w="1"/><text x="55.8508%" y="287.50"></text></g><g><title>H5VL_attr_open (1 samples, 0.20%)</title><rect x="55.6008%" y="261" width="0.2037%" height="15" fill="rgb(242,28,8)" fg:x="273" fg:w="1"/><text x="55.8508%" y="271.50"></text></g><g><title>H5VL__native_attr_open (1 samples, 0.20%)</title><rect x="55.6008%" y="245" width="0.2037%" height="15" fill="rgb(219,106,18)" fg:x="273" fg:w="1"/><text x="55.8508%" y="255.50"></text></g><g><title>H5A__open (1 samples, 0.20%)</title><rect x="55.6008%" y="229" width="0.2037%" height="15" fill="rgb(244,222,10)" fg:x="273" fg:w="1"/><text x="55.8508%" y="239.50"></text></g><g><title>H5Dclose (2 samples, 0.41%)</title><rect x="55.8045%" y="277" width="0.4073%" height="15" fill="rgb(236,179,52)" fg:x="274" fg:w="2"/><text x="56.0545%" y="287.50"></text></g><g><title>H5I_dec_app_ref_always_close (2 samples, 0.41%)</title><rect x="55.8045%" y="261" width="0.4073%" height="15" fill="rgb(213,23,39)" fg:x="274" fg:w="2"/><text x="56.0545%" y="271.50"></text></g><g><title>H5VL_dataset_close (2 samples, 0.41%)</title><rect x="55.8045%" y="245" width="0.4073%" height="15" fill="rgb(238,48,10)" fg:x="274" fg:w="2"/><text x="56.0545%" y="255.50"></text></g><g><title>H5VL__native_dataset_close (2 samples, 0.41%)</title><rect x="55.8045%" y="229" width="0.4073%" height="15" fill="rgb(251,196,23)" fg:x="274" fg:w="2"/><text x="56.0545%" y="239.50"></text></g><g><title>H5D_close (2 samples, 0.41%)</title><rect x="55.8045%" y="213" width="0.4073%" height="15" fill="rgb(250,152,24)" fg:x="274" fg:w="2"/><text x="56.0545%" y="223.50"></text></g><g><title>H5I_dec_ref (2 samples, 0.41%)</title><rect x="55.8045%" y="197" width="0.4073%" height="15" fill="rgb(209,150,17)" fg:x="274" fg:w="2"/><text x="56.0545%" y="207.50"></text></g><g><title>H5P_close (2 samples, 0.41%)</title><rect x="55.8045%" y="181" width="0.4073%" height="15" fill="rgb(234,202,34)" fg:x="274" fg:w="2"/><text x="56.0545%" y="191.50"></text></g><g><title>H5SL_next (1 samples, 0.20%)</title><rect x="56.0081%" y="165" width="0.2037%" height="15" fill="rgb(253,148,53)" fg:x="275" fg:w="1"/><text x="56.2581%" y="175.50"></text></g><g><title>H5D__layout_oh_read (1 samples, 0.20%)</title><rect x="56.4155%" y="197" width="0.2037%" height="15" fill="rgb(218,129,16)" fg:x="277" fg:w="1"/><text x="56.6655%" y="207.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="56.4155%" y="181" width="0.2037%" height="15" fill="rgb(216,85,19)" fg:x="277" fg:w="1"/><text x="56.6655%" y="191.50"></text></g><g><title>H5O_msg_read_oh (1 samples, 0.20%)</title><rect x="56.4155%" y="165" width="0.2037%" height="15" fill="rgb(235,228,7)" fg:x="277" fg:w="1"/><text x="56.6655%" y="175.50"></text></g><g><title>H5I_object (1 samples, 0.20%)</title><rect x="56.6191%" y="197" width="0.2037%" height="15" fill="rgb(245,175,0)" fg:x="278" fg:w="1"/><text x="56.8691%" y="207.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="56.6191%" y="181" width="0.2037%" height="15" fill="rgb(208,168,36)" fg:x="278" fg:w="1"/><text x="56.8691%" y="191.50"></text></g><g><title>H5P_copy_plist (2 samples, 0.41%)</title><rect x="56.8228%" y="197" width="0.4073%" height="15" fill="rgb(246,171,24)" fg:x="279" fg:w="2"/><text x="57.0728%" y="207.50"></text></g><g><title>H5SL_insert (2 samples, 0.41%)</title><rect x="56.8228%" y="181" width="0.4073%" height="15" fill="rgb(215,142,24)" fg:x="279" fg:w="2"/><text x="57.0728%" y="191.50"></text></g><g><title>H5D_open (5 samples, 1.02%)</title><rect x="56.4155%" y="213" width="1.0183%" height="15" fill="rgb(250,187,7)" fg:x="277" fg:w="5"/><text x="56.6655%" y="223.50"></text></g><g><title>H5S_read (1 samples, 0.20%)</title><rect x="57.2301%" y="197" width="0.2037%" height="15" fill="rgb(228,66,33)" fg:x="281" fg:w="1"/><text x="57.4801%" y="207.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="57.2301%" y="181" width="0.2037%" height="15" fill="rgb(234,215,21)" fg:x="281" fg:w="1"/><text x="57.4801%" y="191.50"></text></g><g><title>H5O_msg_read_oh (1 samples, 0.20%)</title><rect x="57.2301%" y="165" width="0.2037%" height="15" fill="rgb(222,191,20)" fg:x="281" fg:w="1"/><text x="57.4801%" y="175.50"></text></g><g><title>H5Dopen2 (8 samples, 1.63%)</title><rect x="56.2118%" y="277" width="1.6293%" height="15" fill="rgb(245,79,54)" fg:x="276" fg:w="8"/><text x="56.4618%" y="287.50"></text></g><g><title>H5VL_dataset_open (7 samples, 1.43%)</title><rect x="56.4155%" y="261" width="1.4257%" height="15" fill="rgb(240,10,37)" fg:x="277" fg:w="7"/><text x="56.6655%" y="271.50"></text></g><g><title>H5VL__native_dataset_open (7 samples, 1.43%)</title><rect x="56.4155%" y="245" width="1.4257%" height="15" fill="rgb(214,192,32)" fg:x="277" fg:w="7"/><text x="56.6655%" y="255.50"></text></g><g><title>H5D__open_name (7 samples, 1.43%)</title><rect x="56.4155%" y="229" width="1.4257%" height="15" fill="rgb(209,36,54)" fg:x="277" fg:w="7"/><text x="56.6655%" y="239.50"></text></g><g><title>H5G_loc_find (2 samples, 0.41%)</title><rect x="57.4338%" y="213" width="0.4073%" height="15" fill="rgb(220,10,11)" fg:x="282" fg:w="2"/><text x="57.6838%" y="223.50"></text></g><g><title>H5G_traverse (2 samples, 0.41%)</title><rect x="57.4338%" y="197" width="0.4073%" height="15" fill="rgb(221,106,17)" fg:x="282" fg:w="2"/><text x="57.6838%" y="207.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="57.6375%" y="181" width="0.2037%" height="15" fill="rgb(251,142,44)" fg:x="283" fg:w="1"/><text x="57.8875%" y="191.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="57.6375%" y="165" width="0.2037%" height="15" fill="rgb(238,13,15)" fg:x="283" fg:w="1"/><text x="57.8875%" y="175.50"></text></g><g><title>H5B_find (1 samples, 0.20%)</title><rect x="57.6375%" y="149" width="0.2037%" height="15" fill="rgb(208,107,27)" fg:x="283" fg:w="1"/><text x="57.8875%" y="159.50"></text></g><g><title>H5CX_get_nlinks (1 samples, 0.20%)</title><rect x="57.8411%" y="181" width="0.2037%" height="15" fill="rgb(205,136,37)" fg:x="284" fg:w="1"/><text x="58.0911%" y="191.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="58.0448%" y="181" width="0.2037%" height="15" fill="rgb(250,205,27)" fg:x="285" fg:w="1"/><text x="58.2948%" y="191.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="58.0448%" y="165" width="0.2037%" height="15" fill="rgb(210,80,43)" fg:x="285" fg:w="1"/><text x="58.2948%" y="175.50"></text></g><g><title>H5B_find (1 samples, 0.20%)</title><rect x="58.0448%" y="149" width="0.2037%" height="15" fill="rgb(247,160,36)" fg:x="285" fg:w="1"/><text x="58.2948%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="58.0448%" y="133" width="0.2037%" height="15" fill="rgb(234,13,49)" fg:x="285" fg:w="1"/><text x="58.2948%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="58.0448%" y="117" width="0.2037%" height="15" fill="rgb(234,122,0)" fg:x="285" fg:w="1"/><text x="58.2948%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="58.0448%" y="101" width="0.2037%" height="15" fill="rgb(207,146,38)" fg:x="285" fg:w="1"/><text x="58.2948%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="58.0448%" y="85" width="0.2037%" height="15" fill="rgb(207,177,25)" fg:x="285" fg:w="1"/><text x="58.2948%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="58.0448%" y="69" width="0.2037%" height="15" fill="rgb(211,178,42)" fg:x="285" fg:w="1"/><text x="58.2948%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="58.0448%" y="53" width="0.2037%" height="15" fill="rgb(230,69,54)" fg:x="285" fg:w="1"/><text x="58.2948%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="58.0448%" y="37" width="0.2037%" height="15" fill="rgb(214,135,41)" fg:x="285" fg:w="1"/><text x="58.2948%" y="47.50"></text></g><g><title>H5G_loc_find (3 samples, 0.61%)</title><rect x="57.8411%" y="213" width="0.6110%" height="15" fill="rgb(237,67,25)" fg:x="284" fg:w="3"/><text x="58.0911%" y="223.50"></text></g><g><title>H5G_traverse (3 samples, 0.61%)</title><rect x="57.8411%" y="197" width="0.6110%" height="15" fill="rgb(222,189,50)" fg:x="284" fg:w="3"/><text x="58.0911%" y="207.50"></text></g><g><title>H5G_loc_copy (1 samples, 0.20%)</title><rect x="58.2485%" y="181" width="0.2037%" height="15" fill="rgb(245,148,34)" fg:x="286" fg:w="1"/><text x="58.4985%" y="191.50"></text></g><g><title>H5G_name_copy (1 samples, 0.20%)</title><rect x="58.2485%" y="165" width="0.2037%" height="15" fill="rgb(222,29,6)" fg:x="286" fg:w="1"/><text x="58.4985%" y="175.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="58.8595%" y="149" width="0.2037%" height="15" fill="rgb(221,189,43)" fg:x="289" fg:w="1"/><text x="59.1095%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="58.8595%" y="133" width="0.2037%" height="15" fill="rgb(207,36,27)" fg:x="289" fg:w="1"/><text x="59.1095%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="58.8595%" y="117" width="0.2037%" height="15" fill="rgb(217,90,24)" fg:x="289" fg:w="1"/><text x="59.1095%" y="127.50"></text></g><g><title>NeuralNetwork::parseDenseLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (19 samples, 3.87%)</title><rect x="55.6008%" y="293" width="3.8697%" height="15" fill="rgb(224,66,35)" fg:x="273" fg:w="19"/><text x="55.8508%" y="303.50">Neur..</text></g><g><title>H5Gopen2 (8 samples, 1.63%)</title><rect x="57.8411%" y="277" width="1.6293%" height="15" fill="rgb(221,13,50)" fg:x="284" fg:w="8"/><text x="58.0911%" y="287.50"></text></g><g><title>H5VL_group_open (8 samples, 1.63%)</title><rect x="57.8411%" y="261" width="1.6293%" height="15" fill="rgb(236,68,49)" fg:x="284" fg:w="8"/><text x="58.0911%" y="271.50"></text></g><g><title>H5VL__native_group_open (8 samples, 1.63%)</title><rect x="57.8411%" y="245" width="1.6293%" height="15" fill="rgb(229,146,28)" fg:x="284" fg:w="8"/><text x="58.0911%" y="255.50"></text></g><g><title>H5G__open_name (8 samples, 1.63%)</title><rect x="57.8411%" y="229" width="1.6293%" height="15" fill="rgb(225,31,38)" fg:x="284" fg:w="8"/><text x="58.0911%" y="239.50"></text></g><g><title>H5O_obj_type (5 samples, 1.02%)</title><rect x="58.4521%" y="213" width="1.0183%" height="15" fill="rgb(250,208,3)" fg:x="287" fg:w="5"/><text x="58.7021%" y="223.50"></text></g><g><title>H5O_protect (5 samples, 1.02%)</title><rect x="58.4521%" y="197" width="1.0183%" height="15" fill="rgb(246,54,23)" fg:x="287" fg:w="5"/><text x="58.7021%" y="207.50"></text></g><g><title>H5AC_protect (5 samples, 1.02%)</title><rect x="58.4521%" y="181" width="1.0183%" height="15" fill="rgb(243,76,11)" fg:x="287" fg:w="5"/><text x="58.7021%" y="191.50"></text></g><g><title>H5C_protect (5 samples, 1.02%)</title><rect x="58.4521%" y="165" width="1.0183%" height="15" fill="rgb(245,21,50)" fg:x="287" fg:w="5"/><text x="58.7021%" y="175.50"></text></g><g><title>H5FL_reg_calloc (2 samples, 0.41%)</title><rect x="59.0631%" y="149" width="0.4073%" height="15" fill="rgb(228,9,43)" fg:x="290" fg:w="2"/><text x="59.3131%" y="159.50"></text></g><g><title>H5FL_reg_malloc (2 samples, 0.41%)</title><rect x="59.0631%" y="133" width="0.4073%" height="15" fill="rgb(208,100,47)" fg:x="290" fg:w="2"/><text x="59.3131%" y="143.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.41%)</title><rect x="59.0631%" y="117" width="0.4073%" height="15" fill="rgb(232,26,8)" fg:x="290" fg:w="2"/><text x="59.3131%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="59.2668%" y="101" width="0.2037%" height="15" fill="rgb(216,166,38)" fg:x="291" fg:w="1"/><text x="59.5168%" y="111.50"></text></g><g><title>NeuralNetwork::parseDropoutLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="59.4705%" y="293" width="0.2037%" height="15" fill="rgb(251,202,51)" fg:x="292" fg:w="1"/><text x="59.7205%" y="303.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="59.4705%" y="277" width="0.2037%" height="15" fill="rgb(254,216,34)" fg:x="292" fg:w="1"/><text x="59.7205%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="59.4705%" y="261" width="0.2037%" height="15" fill="rgb(251,32,27)" fg:x="292" fg:w="1"/><text x="59.7205%" y="271.50"></text></g><g><title>tcache_get (1 samples, 0.20%)</title><rect x="59.4705%" y="245" width="0.2037%" height="15" fill="rgb(208,127,28)" fg:x="292" fg:w="1"/><text x="59.7205%" y="255.50"></text></g><g><title>NeuralNetwork::parseMaxPooling2DLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="59.6741%" y="293" width="0.2037%" height="15" fill="rgb(224,137,22)" fg:x="293" fg:w="1"/><text x="59.9241%" y="303.50"></text></g><g><title>NeuralNetwork::parsePooling2DLayer(SimpleMap::Record const*, NeuralNetwork::PoolingMethod, unsigned long) (1 samples, 0.20%)</title><rect x="59.6741%" y="277" width="0.2037%" height="15" fill="rgb(254,70,32)" fg:x="293" fg:w="1"/><text x="59.9241%" y="287.50"></text></g><g><title>SimpleMap::Literal const* NeuralNetwork::getRecordEntry&lt;SimpleMap::Literal&gt;(SimpleMap::Record const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.20%)</title><rect x="59.6741%" y="261" width="0.2037%" height="15" fill="rgb(229,75,37)" fg:x="293" fg:w="1"/><text x="59.9241%" y="271.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.20%)</title><rect x="59.6741%" y="245" width="0.2037%" height="15" fill="rgb(252,64,23)" fg:x="293" fg:w="1"/><text x="59.9241%" y="255.50"></text></g><g><title>SimpleMap::Literal const* NeuralNetwork::getRecordEntry&lt;SimpleMap::Literal&gt;(SimpleMap::Record const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.20%)</title><rect x="59.8778%" y="293" width="0.2037%" height="15" fill="rgb(232,162,48)" fg:x="294" fg:w="1"/><text x="60.1278%" y="303.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.20%)</title><rect x="59.8778%" y="277" width="0.2037%" height="15" fill="rgb(246,160,12)" fg:x="294" fg:w="1"/><text x="60.1278%" y="287.50"></text></g><g><title>SimpleMap::nextSymbol() (1 samples, 0.20%)</title><rect x="60.0815%" y="229" width="0.2037%" height="15" fill="rgb(247,166,0)" fg:x="295" fg:w="1"/><text x="60.3315%" y="239.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (1 samples, 0.20%)</title><rect x="60.0815%" y="213" width="0.2037%" height="15" fill="rgb(249,219,21)" fg:x="295" fg:w="1"/><text x="60.3315%" y="223.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (1 samples, 0.20%)</title><rect x="60.2851%" y="197" width="0.2037%" height="15" fill="rgb(205,209,3)" fg:x="296" fg:w="1"/><text x="60.5351%" y="207.50"></text></g><g><title>SimpleMap::nextSymbol() (2 samples, 0.41%)</title><rect x="60.2851%" y="213" width="0.4073%" height="15" fill="rgb(243,44,1)" fg:x="296" fg:w="2"/><text x="60.5351%" y="223.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.20%)</title><rect x="60.4888%" y="197" width="0.2037%" height="15" fill="rgb(206,159,16)" fg:x="297" fg:w="1"/><text x="60.7388%" y="207.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (1 samples, 0.20%)</title><rect x="61.0998%" y="197" width="0.2037%" height="15" fill="rgb(244,77,30)" fg:x="300" fg:w="1"/><text x="61.3498%" y="207.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (2 samples, 0.41%)</title><rect x="62.1181%" y="181" width="0.4073%" height="15" fill="rgb(218,69,12)" fg:x="305" fg:w="2"/><text x="62.3681%" y="191.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="62.3218%" y="165" width="0.2037%" height="15" fill="rgb(212,87,7)" fg:x="306" fg:w="1"/><text x="62.5718%" y="175.50"></text></g><g><title>SimpleMap::nextSymbol() (10 samples, 2.04%)</title><rect x="61.3035%" y="197" width="2.0367%" height="15" fill="rgb(245,114,25)" fg:x="301" fg:w="10"/><text x="61.5535%" y="207.50">S..</text></g><g><title>SimpleMap::nextChar() (4 samples, 0.81%)</title><rect x="62.5255%" y="181" width="0.8147%" height="15" fill="rgb(210,61,42)" fg:x="307" fg:w="4"/><text x="62.7755%" y="191.50"></text></g><g><title>SimpleMap::parseArray() (1 samples, 0.20%)</title><rect x="63.3401%" y="197" width="0.2037%" height="15" fill="rgb(211,52,33)" fg:x="311" fg:w="1"/><text x="63.5901%" y="207.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="63.3401%" y="181" width="0.2037%" height="15" fill="rgb(234,58,33)" fg:x="311" fg:w="1"/><text x="63.5901%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="63.3401%" y="165" width="0.2037%" height="15" fill="rgb(220,115,36)" fg:x="311" fg:w="1"/><text x="63.5901%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="63.3401%" y="149" width="0.2037%" height="15" fill="rgb(243,153,54)" fg:x="311" fg:w="1"/><text x="63.5901%" y="159.50"></text></g><g><title>SimpleMap::nextSymbol() (1 samples, 0.20%)</title><rect x="63.5438%" y="181" width="0.2037%" height="15" fill="rgb(251,47,18)" fg:x="312" fg:w="1"/><text x="63.7938%" y="191.50"></text></g><g><title>SimpleMap::parseRecord() (2 samples, 0.41%)</title><rect x="63.5438%" y="197" width="0.4073%" height="15" fill="rgb(242,102,42)" fg:x="312" fg:w="2"/><text x="63.7938%" y="207.50"></text></g><g><title>SimpleMap::parseRecord() (1 samples, 0.20%)</title><rect x="63.7475%" y="181" width="0.2037%" height="15" fill="rgb(234,31,38)" fg:x="313" fg:w="1"/><text x="63.9975%" y="191.50"></text></g><g><title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[](std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.20%)</title><rect x="63.7475%" y="165" width="0.2037%" height="15" fill="rgb(221,117,51)" fg:x="313" fg:w="1"/><text x="63.9975%" y="175.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash(unsigned long, unsigned long const&amp;) (1 samples, 0.20%)</title><rect x="63.7475%" y="149" width="0.2037%" height="15" fill="rgb(212,20,18)" fg:x="313" fg:w="1"/><text x="63.9975%" y="159.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="63.7475%" y="133" width="0.2037%" height="15" fill="rgb(245,133,36)" fg:x="313" fg:w="1"/><text x="63.9975%" y="143.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="63.7475%" y="117" width="0.2037%" height="15" fill="rgb(212,6,19)" fg:x="313" fg:w="1"/><text x="63.9975%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="63.7475%" y="101" width="0.2037%" height="15" fill="rgb(218,1,36)" fg:x="313" fg:w="1"/><text x="63.9975%" y="111.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="63.9511%" y="197" width="0.2037%" height="15" fill="rgb(246,84,54)" fg:x="314" fg:w="1"/><text x="64.2011%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="63.9511%" y="181" width="0.2037%" height="15" fill="rgb(242,110,6)" fg:x="314" fg:w="1"/><text x="64.2011%" y="191.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="63.9511%" y="165" width="0.2037%" height="15" fill="rgb(214,47,5)" fg:x="314" fg:w="1"/><text x="64.2011%" y="175.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node(unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long) const (1 samples, 0.20%)</title><rect x="64.1548%" y="181" width="0.2037%" height="15" fill="rgb(218,159,25)" fg:x="315" fg:w="1"/><text x="64.4048%" y="191.50"></text></g><g><title>SimpleMap::SimpleMap(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool) (22 samples, 4.48%)</title><rect x="60.0815%" y="293" width="4.4807%" height="15" fill="rgb(215,211,28)" fg:x="295" fg:w="22"/><text x="60.3315%" y="303.50">Simpl..</text></g><g><title>SimpleMap::parseRecord() (22 samples, 4.48%)</title><rect x="60.0815%" y="277" width="4.4807%" height="15" fill="rgb(238,59,32)" fg:x="295" fg:w="22"/><text x="60.3315%" y="287.50">Simpl..</text></g><g><title>SimpleMap::parseRecord() (22 samples, 4.48%)</title><rect x="60.0815%" y="261" width="4.4807%" height="15" fill="rgb(226,82,3)" fg:x="295" fg:w="22"/><text x="60.3315%" y="271.50">Simpl..</text></g><g><title>SimpleMap::parseArray() (22 samples, 4.48%)</title><rect x="60.0815%" y="245" width="4.4807%" height="15" fill="rgb(240,164,32)" fg:x="295" fg:w="22"/><text x="60.3315%" y="255.50">Simpl..</text></g><g><title>SimpleMap::parseRecord() (21 samples, 4.28%)</title><rect x="60.2851%" y="229" width="4.2770%" height="15" fill="rgb(232,46,7)" fg:x="296" fg:w="21"/><text x="60.5351%" y="239.50">Simpl..</text></g><g><title>SimpleMap::parseRecord() (19 samples, 3.87%)</title><rect x="60.6925%" y="213" width="3.8697%" height="15" fill="rgb(229,129,53)" fg:x="298" fg:w="19"/><text x="60.9425%" y="223.50">Simp..</text></g><g><title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[](std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.41%)</title><rect x="64.1548%" y="197" width="0.4073%" height="15" fill="rgb(234,188,29)" fg:x="315" fg:w="2"/><text x="64.4048%" y="207.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const (1 samples, 0.20%)</title><rect x="64.3585%" y="181" width="0.2037%" height="15" fill="rgb(246,141,4)" fg:x="316" fg:w="1"/><text x="64.6085%" y="191.50"></text></g><g><title>SimpleMap::~SimpleMap() (2 samples, 0.41%)</title><rect x="64.5621%" y="293" width="0.4073%" height="15" fill="rgb(229,23,39)" fg:x="317" fg:w="2"/><text x="64.8121%" y="303.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="277" width="0.4073%" height="15" fill="rgb(206,12,3)" fg:x="317" fg:w="2"/><text x="64.8121%" y="287.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="261" width="0.4073%" height="15" fill="rgb(252,226,20)" fg:x="317" fg:w="2"/><text x="64.8121%" y="271.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="245" width="0.4073%" height="15" fill="rgb(216,123,35)" fg:x="317" fg:w="2"/><text x="64.8121%" y="255.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="229" width="0.4073%" height="15" fill="rgb(212,68,40)" fg:x="317" fg:w="2"/><text x="64.8121%" y="239.50"></text></g><g><title>SimpleMap::Array::~Array() (2 samples, 0.41%)</title><rect x="64.5621%" y="213" width="0.4073%" height="15" fill="rgb(254,125,32)" fg:x="317" fg:w="2"/><text x="64.8121%" y="223.50"></text></g><g><title>SimpleMap::Array::~Array() (2 samples, 0.41%)</title><rect x="64.5621%" y="197" width="0.4073%" height="15" fill="rgb(253,97,22)" fg:x="317" fg:w="2"/><text x="64.8121%" y="207.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="181" width="0.4073%" height="15" fill="rgb(241,101,14)" fg:x="317" fg:w="2"/><text x="64.8121%" y="191.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="165" width="0.4073%" height="15" fill="rgb(238,103,29)" fg:x="317" fg:w="2"/><text x="64.8121%" y="175.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="149" width="0.4073%" height="15" fill="rgb(233,195,47)" fg:x="317" fg:w="2"/><text x="64.8121%" y="159.50"></text></g><g><title>SimpleMap::Record::~Record() (2 samples, 0.41%)</title><rect x="64.5621%" y="133" width="0.4073%" height="15" fill="rgb(246,218,30)" fg:x="317" fg:w="2"/><text x="64.8121%" y="143.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="64.7658%" y="117" width="0.2037%" height="15" fill="rgb(219,145,47)" fg:x="318" fg:w="1"/><text x="65.0158%" y="127.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="64.7658%" y="101" width="0.2037%" height="15" fill="rgb(243,12,26)" fg:x="318" fg:w="1"/><text x="65.0158%" y="111.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="64.7658%" y="85" width="0.2037%" height="15" fill="rgb(214,87,16)" fg:x="318" fg:w="1"/><text x="65.0158%" y="95.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="64.7658%" y="69" width="0.2037%" height="15" fill="rgb(208,99,42)" fg:x="318" fg:w="1"/><text x="65.0158%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (309 samples, 62.93%)</title><rect x="2.4440%" y="437" width="62.9328%" height="15" fill="rgb(253,99,2)" fg:x="12" fg:w="309"/><text x="2.6940%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (309 samples, 62.93%)</title><rect x="2.4440%" y="421" width="62.9328%" height="15" fill="rgb(220,168,23)" fg:x="12" fg:w="309"/><text x="2.6940%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>nn_backend_test::nn_runners::compiled_nn_runner::CompiledNNRunner::new (309 samples, 62.93%)</title><rect x="2.4440%" y="405" width="62.9328%" height="15" fill="rgb(242,38,24)" fg:x="12" fg:w="309"/><text x="2.6940%" y="415.50">nn_backend_test::nn_runners::compiled_nn_runner::CompiledNNRunner::new</text></g><g><title>compiled_nn::compiled_nn::CompiledNN::compile (309 samples, 62.93%)</title><rect x="2.4440%" y="389" width="62.9328%" height="15" fill="rgb(225,182,9)" fg:x="12" fg:w="309"/><text x="2.6940%" y="399.50">compiled_nn::compiled_nn::CompiledNN::compile</text></g><g><title>CompiledNN::compile(char const*) (309 samples, 62.93%)</title><rect x="2.4440%" y="373" width="62.9328%" height="15" fill="rgb(243,178,37)" fg:x="12" fg:w="309"/><text x="2.6940%" y="383.50">CompiledNN::compile(char const*)</text></g><g><title>NeuralNetwork::CompiledNN::compile(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (309 samples, 62.93%)</title><rect x="2.4440%" y="357" width="62.9328%" height="15" fill="rgb(232,139,19)" fg:x="12" fg:w="309"/><text x="2.6940%" y="367.50">NeuralNetwork::CompiledNN::compile(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocat..</text></g><g><title>NeuralNetwork::Model::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (256 samples, 52.14%)</title><rect x="13.2383%" y="341" width="52.1385%" height="15" fill="rgb(225,201,24)" fg:x="65" fg:w="256"/><text x="13.4883%" y="351.50">NeuralNetwork::Model::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, st..</text></g><g><title>NeuralNetwork::KerasHDF5::read(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (256 samples, 52.14%)</title><rect x="13.2383%" y="325" width="52.1385%" height="15" fill="rgb(221,47,46)" fg:x="65" fg:w="256"/><text x="13.4883%" y="335.50">NeuralNetwork::KerasHDF5::read(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;..</text></g><g><title>NeuralNetwork::KerasHDF5::parseJSONModel(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (188 samples, 38.29%)</title><rect x="27.0876%" y="309" width="38.2892%" height="15" fill="rgb(249,23,13)" fg:x="133" fg:w="188"/><text x="27.3376%" y="319.50">NeuralNetwork::KerasHDF5::parseJSONModel(In&amp;, std::__cxx11::ba..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; NeuralNetwork::getLiteral&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(SimpleMap::Literal const*) (2 samples, 0.41%)</title><rect x="64.9695%" y="293" width="0.4073%" height="15" fill="rgb(219,9,5)" fg:x="319" fg:w="2"/><text x="65.2195%" y="303.50"></text></g><g><title>InText::readString(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, PhysicalInStream&amp;) (1 samples, 0.20%)</title><rect x="65.1731%" y="277" width="0.2037%" height="15" fill="rgb(254,171,16)" fg:x="320" fg:w="1"/><text x="65.4231%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (310 samples, 63.14%)</title><rect x="2.4440%" y="469" width="63.1365%" height="15" fill="rgb(230,171,20)" fg:x="12" fg:w="310"/><text x="2.6940%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched_ref (310 samples, 63.14%)</title><rect x="2.4440%" y="453" width="63.1365%" height="15" fill="rgb(210,71,41)" fg:x="12" fg:w="310"/><text x="2.6940%" y="463.50">criterion::bencher::Bencher&lt;M&gt;::iter_batched_ref</text></g><g><title>CompiledNN::~CompiledNN() (1 samples, 0.20%)</title><rect x="65.3768%" y="437" width="0.2037%" height="15" fill="rgb(206,173,20)" fg:x="321" fg:w="1"/><text x="65.6268%" y="447.50"></text></g><g><title>NeuralNetwork::CompiledNN::~CompiledNN() (1 samples, 0.20%)</title><rect x="65.3768%" y="421" width="0.2037%" height="15" fill="rgb(233,88,34)" fg:x="321" fg:w="1"/><text x="65.6268%" y="431.50"></text></g><g><title>asmjit::_abi_1_8::JitRuntime::~JitRuntime() (1 samples, 0.20%)</title><rect x="65.3768%" y="405" width="0.2037%" height="15" fill="rgb(223,209,46)" fg:x="321" fg:w="1"/><text x="65.6268%" y="415.50"></text></g><g><title>asmjit::_abi_1_8::JitRuntime::~JitRuntime() (1 samples, 0.20%)</title><rect x="65.3768%" y="389" width="0.2037%" height="15" fill="rgb(250,43,18)" fg:x="321" fg:w="1"/><text x="65.6268%" y="399.50"></text></g><g><title>asmjit::_abi_1_8::JitAllocator::~JitAllocator() (1 samples, 0.20%)</title><rect x="65.3768%" y="373" width="0.2037%" height="15" fill="rgb(208,13,10)" fg:x="321" fg:w="1"/><text x="65.6268%" y="383.50"></text></g><g><title>asmjit::_abi_1_8::JitAllocator::reset(asmjit::_abi_1_8::ResetPolicy) (1 samples, 0.20%)</title><rect x="65.3768%" y="357" width="0.2037%" height="15" fill="rgb(212,200,36)" fg:x="321" fg:w="1"/><text x="65.6268%" y="367.50"></text></g><g><title>asmjit::_abi_1_8::VirtMem::release(void*, unsigned long) (1 samples, 0.20%)</title><rect x="65.3768%" y="341" width="0.2037%" height="15" fill="rgb(225,90,30)" fg:x="321" fg:w="1"/><text x="65.6268%" y="351.50"></text></g><g><title>munmap (1 samples, 0.20%)</title><rect x="65.3768%" y="325" width="0.2037%" height="15" fill="rgb(236,182,39)" fg:x="321" fg:w="1"/><text x="65.6268%" y="335.50"></text></g><g><title>std::vector&lt;NeuralNetwork::Tensor&lt;float, (unsigned long)16&gt;, std::allocator&lt;NeuralNetwork::Tensor&lt;float, (unsigned long)16&gt; &gt; &gt;::_M_default_append(unsigned long) (1 samples, 0.20%)</title><rect x="65.7841%" y="293" width="0.2037%" height="15" fill="rgb(212,144,35)" fg:x="323" fg:w="1"/><text x="66.0341%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNN::allocateTensors(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::OperandPlaceholder, std::allocator&lt;NeuralNetwork::CompiledNN::OperandPlaceholder&gt; &gt;&amp;) (2 samples, 0.41%)</title><rect x="65.7841%" y="309" width="0.4073%" height="15" fill="rgb(228,63,44)" fg:x="323" fg:w="2"/><text x="66.0341%" y="319.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append(unsigned long) (1 samples, 0.20%)</title><rect x="65.9878%" y="293" width="0.2037%" height="15" fill="rgb(228,109,6)" fg:x="324" fg:w="1"/><text x="66.2378%" y="303.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="65.9878%" y="277" width="0.2037%" height="15" fill="rgb(238,117,24)" fg:x="324" fg:w="1"/><text x="66.2378%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="65.9878%" y="261" width="0.2037%" height="15" fill="rgb(242,26,26)" fg:x="324" fg:w="1"/><text x="66.2378%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="65.9878%" y="245" width="0.2037%" height="15" fill="rgb(221,92,48)" fg:x="324" fg:w="1"/><text x="66.2378%" y="255.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::compile(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;) const (1 samples, 0.20%)</title><rect x="66.3951%" y="293" width="0.2037%" height="15" fill="rgb(209,209,32)" fg:x="326" fg:w="1"/><text x="66.6451%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::compileOutputBatch(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, unsigned int, unsigned int) const (1 samples, 0.20%)</title><rect x="66.3951%" y="277" width="0.2037%" height="15" fill="rgb(221,70,22)" fg:x="326" fg:w="1"/><text x="66.6451%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::compileFilter(asmjit::_abi_1_8::x86::Assembler&amp;, bool, unsigned int, unsigned int, bool) const (1 samples, 0.20%)</title><rect x="66.3951%" y="261" width="0.2037%" height="15" fill="rgb(248,145,5)" fg:x="326" fg:w="1"/><text x="66.6451%" y="271.50"></text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (1 samples, 0.20%)</title><rect x="66.3951%" y="245" width="0.2037%" height="15" fill="rgb(226,116,26)" fg:x="326" fg:w="1"/><text x="66.6451%" y="255.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::DenseCompiler::compileOutputBatch(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, float const*, unsigned int, bool) const (1 samples, 0.20%)</title><rect x="66.5988%" y="293" width="0.2037%" height="15" fill="rgb(244,5,17)" fg:x="327" fg:w="1"/><text x="66.8488%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::DenseCompiler::compileInputBatch(asmjit::_abi_1_8::x86::Assembler&amp;, unsigned int, unsigned int, unsigned int, bool, bool) const (1 samples, 0.20%)</title><rect x="66.5988%" y="277" width="0.2037%" height="15" fill="rgb(252,159,33)" fg:x="327" fg:w="1"/><text x="66.8488%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (1 samples, 0.20%)</title><rect x="66.5988%" y="261" width="0.2037%" height="15" fill="rgb(206,71,0)" fg:x="327" fg:w="1"/><text x="66.8488%" y="271.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Pooling2DCompiler::compile(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;) const (1 samples, 0.20%)</title><rect x="66.8024%" y="293" width="0.2037%" height="15" fill="rgb(233,118,54)" fg:x="328" fg:w="1"/><text x="67.0524%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Pooling2DCompiler::poolRow(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int) const (1 samples, 0.20%)</title><rect x="66.8024%" y="277" width="0.2037%" height="15" fill="rgb(234,83,48)" fg:x="328" fg:w="1"/><text x="67.0524%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Pooling2DCompiler::pool(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, unsigned int, unsigned int, unsigned int, unsigned int) const (1 samples, 0.20%)</title><rect x="66.8024%" y="261" width="0.2037%" height="15" fill="rgb(228,3,54)" fg:x="328" fg:w="1"/><text x="67.0524%" y="271.50"></text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (1 samples, 0.20%)</title><rect x="66.8024%" y="245" width="0.2037%" height="15" fill="rgb(226,155,13)" fg:x="328" fg:w="1"/><text x="67.0524%" y="255.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::ZeroPadding2DCompiler::compile(asmjit::_abi_1_8::x86::Assembler&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;, NeuralNetwork::TensorPointer&lt;float&gt; const&amp;) const (1 samples, 0.20%)</title><rect x="67.0061%" y="293" width="0.2037%" height="15" fill="rgb(241,28,37)" fg:x="329" fg:w="1"/><text x="67.2561%" y="303.50"></text></g><g><title>asmjit::_abi_1_8::x86::Assembler::_emit(unsigned int, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const&amp;, asmjit::_abi_1_8::Operand_ const*) (1 samples, 0.20%)</title><rect x="67.0061%" y="277" width="0.2037%" height="15" fill="rgb(233,93,10)" fg:x="329" fg:w="1"/><text x="67.2561%" y="287.50"></text></g><g><title>asmjit::_abi_1_8::BaseAssembler::embedDataArray(asmjit::_abi_1_8::TypeId, void const*, unsigned long, unsigned long) (12 samples, 2.44%)</title><rect x="67.2098%" y="293" width="2.4440%" height="15" fill="rgb(225,113,19)" fg:x="330" fg:w="12"/><text x="67.4598%" y="303.50">as..</text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="69.4501%" y="277" width="0.2037%" height="15" fill="rgb(241,2,18)" fg:x="341" fg:w="1"/><text x="69.7001%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNN::generateCode(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt; const&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;) (18 samples, 3.67%)</title><rect x="66.1914%" y="309" width="3.6660%" height="15" fill="rgb(228,207,21)" fg:x="325" fg:w="18"/><text x="66.4414%" y="319.50">Neur..</text></g><g><title>asmjit::_abi_1_8::JitRuntime::_add(void**, asmjit::_abi_1_8::CodeHolder*) (1 samples, 0.20%)</title><rect x="69.6538%" y="293" width="0.2037%" height="15" fill="rgb(213,211,35)" fg:x="342" fg:w="1"/><text x="69.9038%" y="303.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="69.6538%" y="277" width="0.2037%" height="15" fill="rgb(209,83,10)" fg:x="342" fg:w="1"/><text x="69.9038%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::Conv2DCompiler::initialize() (6 samples, 1.22%)</title><rect x="69.8574%" y="309" width="1.2220%" height="15" fill="rgb(209,164,1)" fg:x="343" fg:w="6"/><text x="70.1074%" y="319.50"></text></g><g><title>void std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_realloc_insert&lt;float&gt;(__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float&amp;&amp;) (1 samples, 0.20%)</title><rect x="70.8758%" y="293" width="0.2037%" height="15" fill="rgb(213,184,43)" fg:x="348" fg:w="1"/><text x="71.1258%" y="303.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="70.8758%" y="277" width="0.2037%" height="15" fill="rgb(231,61,34)" fg:x="348" fg:w="1"/><text x="71.1258%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNN::compilerBackend(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt;&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (27 samples, 5.50%)</title><rect x="65.7841%" y="325" width="5.4990%" height="15" fill="rgb(235,75,3)" fg:x="323" fg:w="27"/><text x="66.0341%" y="335.50">NeuralN..</text></g><g><title>NeuralNetwork::CompiledNNImpl::DenseCompiler::initialize() (1 samples, 0.20%)</title><rect x="71.0794%" y="309" width="0.2037%" height="15" fill="rgb(220,106,47)" fg:x="349" fg:w="1"/><text x="71.3294%" y="319.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="71.2831%" y="325" width="0.2037%" height="15" fill="rgb(210,196,33)" fg:x="350" fg:w="1"/><text x="71.5331%" y="335.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="71.2831%" y="309" width="0.2037%" height="15" fill="rgb(229,154,42)" fg:x="350" fg:w="1"/><text x="71.5331%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="71.2831%" y="293" width="0.2037%" height="15" fill="rgb(228,114,26)" fg:x="350" fg:w="1"/><text x="71.5331%" y="303.50"></text></g><g><title>NeuralNetwork::CompiledNN::compile(NeuralNetwork::Model const&amp;, NeuralNetwork::CompilationSettings const&amp;) (30 samples, 6.11%)</title><rect x="65.5804%" y="341" width="6.1100%" height="15" fill="rgb(208,144,1)" fg:x="322" fg:w="30"/><text x="65.8304%" y="351.50">NeuralNe..</text></g><g><title>std::__detail::_Map_base&lt;NeuralNetwork::TensorLocation, std::pair&lt;NeuralNetwork::TensorLocation const, unsigned int&gt;, std::allocator&lt;std::pair&lt;NeuralNetwork::TensorLocation const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;NeuralNetwork::TensorLocation&gt;, NeuralNetwork::CompiledNN::TensorLocationHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[](NeuralNetwork::TensorLocation const&amp;) (1 samples, 0.20%)</title><rect x="71.4868%" y="325" width="0.2037%" height="15" fill="rgb(239,112,37)" fg:x="351" fg:w="1"/><text x="71.7368%" y="335.50"></text></g><g><title>std::_Hashtable&lt;NeuralNetwork::TensorLocation, std::pair&lt;NeuralNetwork::TensorLocation const, unsigned int&gt;, std::allocator&lt;std::pair&lt;NeuralNetwork::TensorLocation const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;NeuralNetwork::TensorLocation&gt;, NeuralNetwork::CompiledNN::TensorLocationHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash(unsigned long, unsigned long const&amp;) (1 samples, 0.20%)</title><rect x="71.4868%" y="309" width="0.2037%" height="15" fill="rgb(210,96,50)" fg:x="351" fg:w="1"/><text x="71.7368%" y="319.50"></text></g><g><title>H5Aclose (1 samples, 0.20%)</title><rect x="71.8941%" y="309" width="0.2037%" height="15" fill="rgb(222,178,2)" fg:x="353" fg:w="1"/><text x="72.1441%" y="319.50"></text></g><g><title>H5Aopen (1 samples, 0.20%)</title><rect x="72.0978%" y="309" width="0.2037%" height="15" fill="rgb(226,74,18)" fg:x="354" fg:w="1"/><text x="72.3478%" y="319.50"></text></g><g><title>H5VL_attr_open (1 samples, 0.20%)</title><rect x="72.0978%" y="293" width="0.2037%" height="15" fill="rgb(225,67,54)" fg:x="354" fg:w="1"/><text x="72.3478%" y="303.50"></text></g><g><title>H5VL__native_attr_open (1 samples, 0.20%)</title><rect x="72.0978%" y="277" width="0.2037%" height="15" fill="rgb(251,92,32)" fg:x="354" fg:w="1"/><text x="72.3478%" y="287.50"></text></g><g><title>H5A__open (1 samples, 0.20%)</title><rect x="72.0978%" y="261" width="0.2037%" height="15" fill="rgb(228,149,22)" fg:x="354" fg:w="1"/><text x="72.3478%" y="271.50"></text></g><g><title>H5O__attr_open_by_name (1 samples, 0.20%)</title><rect x="72.0978%" y="245" width="0.2037%" height="15" fill="rgb(243,54,13)" fg:x="354" fg:w="1"/><text x="72.3478%" y="255.50"></text></g><g><title>H5O__msg_iterate_real (1 samples, 0.20%)</title><rect x="72.0978%" y="229" width="0.2037%" height="15" fill="rgb(243,180,28)" fg:x="354" fg:w="1"/><text x="72.3478%" y="239.50"></text></g><g><title>H5Aread (1 samples, 0.20%)</title><rect x="72.3014%" y="309" width="0.2037%" height="15" fill="rgb(208,167,24)" fg:x="355" fg:w="1"/><text x="72.5514%" y="319.50"></text></g><g><title>H5VL_attr_read (1 samples, 0.20%)</title><rect x="72.3014%" y="293" width="0.2037%" height="15" fill="rgb(245,73,45)" fg:x="355" fg:w="1"/><text x="72.5514%" y="303.50"></text></g><g><title>H5VL__native_attr_read (1 samples, 0.20%)</title><rect x="72.3014%" y="277" width="0.2037%" height="15" fill="rgb(237,203,48)" fg:x="355" fg:w="1"/><text x="72.5514%" y="287.50"></text></g><g><title>H5A__read (1 samples, 0.20%)</title><rect x="72.3014%" y="261" width="0.2037%" height="15" fill="rgb(211,197,16)" fg:x="355" fg:w="1"/><text x="72.5514%" y="271.50"></text></g><g><title>H5T_convert (1 samples, 0.20%)</title><rect x="72.3014%" y="245" width="0.2037%" height="15" fill="rgb(243,99,51)" fg:x="355" fg:w="1"/><text x="72.5514%" y="255.50"></text></g><g><title>H5T__conv_vlen (1 samples, 0.20%)</title><rect x="72.3014%" y="229" width="0.2037%" height="15" fill="rgb(215,123,29)" fg:x="355" fg:w="1"/><text x="72.5514%" y="239.50"></text></g><g><title>H5VL_blob_get (1 samples, 0.20%)</title><rect x="72.3014%" y="213" width="0.2037%" height="15" fill="rgb(239,186,37)" fg:x="355" fg:w="1"/><text x="72.5514%" y="223.50"></text></g><g><title>H5VL__native_blob_get (1 samples, 0.20%)</title><rect x="72.3014%" y="197" width="0.2037%" height="15" fill="rgb(252,136,39)" fg:x="355" fg:w="1"/><text x="72.5514%" y="207.50"></text></g><g><title>H5HG_read (1 samples, 0.20%)</title><rect x="72.3014%" y="181" width="0.2037%" height="15" fill="rgb(223,213,32)" fg:x="355" fg:w="1"/><text x="72.5514%" y="191.50"></text></g><g><title>H5HG__protect (1 samples, 0.20%)</title><rect x="72.3014%" y="165" width="0.2037%" height="15" fill="rgb(233,115,5)" fg:x="355" fg:w="1"/><text x="72.5514%" y="175.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="72.3014%" y="149" width="0.2037%" height="15" fill="rgb(207,226,44)" fg:x="355" fg:w="1"/><text x="72.5514%" y="159.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="72.3014%" y="133" width="0.2037%" height="15" fill="rgb(208,126,0)" fg:x="355" fg:w="1"/><text x="72.5514%" y="143.50"></text></g><g><title>H5FL_blk_calloc (1 samples, 0.20%)</title><rect x="72.3014%" y="117" width="0.2037%" height="15" fill="rgb(244,66,21)" fg:x="355" fg:w="1"/><text x="72.5514%" y="127.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="72.3014%" y="101" width="0.2037%" height="15" fill="rgb(222,97,12)" fg:x="355" fg:w="1"/><text x="72.5514%" y="111.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="72.3014%" y="85" width="0.2037%" height="15" fill="rgb(219,213,19)" fg:x="355" fg:w="1"/><text x="72.5514%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="72.3014%" y="69" width="0.2037%" height="15" fill="rgb(252,169,30)" fg:x="355" fg:w="1"/><text x="72.5514%" y="79.50"></text></g><g><title>H5C__flush_single_entry (2 samples, 0.41%)</title><rect x="72.5051%" y="181" width="0.4073%" height="15" fill="rgb(206,32,51)" fg:x="356" fg:w="2"/><text x="72.7551%" y="191.50"></text></g><g><title>H5O__free (2 samples, 0.41%)</title><rect x="72.5051%" y="165" width="0.4073%" height="15" fill="rgb(250,172,42)" fg:x="356" fg:w="2"/><text x="72.7551%" y="175.50"></text></g><g><title>H5O__msg_free_mesg (1 samples, 0.20%)</title><rect x="72.7088%" y="149" width="0.2037%" height="15" fill="rgb(209,34,43)" fg:x="357" fg:w="1"/><text x="72.9588%" y="159.50"></text></g><g><title>H5O_msg_free_real (1 samples, 0.20%)</title><rect x="72.7088%" y="133" width="0.2037%" height="15" fill="rgb(223,11,35)" fg:x="357" fg:w="1"/><text x="72.9588%" y="143.50"></text></g><g><title>H5Fclose (3 samples, 0.61%)</title><rect x="72.5051%" y="309" width="0.6110%" height="15" fill="rgb(251,219,26)" fg:x="356" fg:w="3"/><text x="72.7551%" y="319.50"></text></g><g><title>H5I_dec_app_ref (3 samples, 0.61%)</title><rect x="72.5051%" y="293" width="0.6110%" height="15" fill="rgb(231,119,3)" fg:x="356" fg:w="3"/><text x="72.7551%" y="303.50"></text></g><g><title>H5VL_file_close (3 samples, 0.61%)</title><rect x="72.5051%" y="277" width="0.6110%" height="15" fill="rgb(216,97,11)" fg:x="356" fg:w="3"/><text x="72.7551%" y="287.50"></text></g><g><title>H5VL__native_file_close (3 samples, 0.61%)</title><rect x="72.5051%" y="261" width="0.6110%" height="15" fill="rgb(223,59,9)" fg:x="356" fg:w="3"/><text x="72.7551%" y="271.50"></text></g><g><title>H5F__close (3 samples, 0.61%)</title><rect x="72.5051%" y="245" width="0.6110%" height="15" fill="rgb(233,93,31)" fg:x="356" fg:w="3"/><text x="72.7551%" y="255.50"></text></g><g><title>H5F_try_close (3 samples, 0.61%)</title><rect x="72.5051%" y="229" width="0.6110%" height="15" fill="rgb(239,81,33)" fg:x="356" fg:w="3"/><text x="72.7551%" y="239.50"></text></g><g><title>H5AC_dest (3 samples, 0.61%)</title><rect x="72.5051%" y="213" width="0.6110%" height="15" fill="rgb(213,120,34)" fg:x="356" fg:w="3"/><text x="72.7551%" y="223.50"></text></g><g><title>H5C_dest (3 samples, 0.61%)</title><rect x="72.5051%" y="197" width="0.6110%" height="15" fill="rgb(243,49,53)" fg:x="356" fg:w="3"/><text x="72.7551%" y="207.50"></text></g><g><title>H5FL_reg_free (1 samples, 0.20%)</title><rect x="72.9124%" y="181" width="0.2037%" height="15" fill="rgb(247,216,33)" fg:x="358" fg:w="1"/><text x="73.1624%" y="191.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="72.9124%" y="165" width="0.2037%" height="15" fill="rgb(226,26,14)" fg:x="358" fg:w="1"/><text x="73.1624%" y="175.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="72.9124%" y="149" width="0.2037%" height="15" fill="rgb(215,49,53)" fg:x="358" fg:w="1"/><text x="73.1624%" y="159.50"></text></g><g><title>malloc_consolidate (1 samples, 0.20%)</title><rect x="72.9124%" y="133" width="0.2037%" height="15" fill="rgb(245,162,40)" fg:x="358" fg:w="1"/><text x="73.1624%" y="143.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="72.9124%" y="117" width="0.2037%" height="15" fill="rgb(229,68,17)" fg:x="358" fg:w="1"/><text x="73.1624%" y="127.50"></text></g><g><title>H5FL_reg_calloc (2 samples, 0.41%)</title><rect x="73.1161%" y="213" width="0.4073%" height="15" fill="rgb(213,182,10)" fg:x="359" fg:w="2"/><text x="73.3661%" y="223.50"></text></g><g><title>__memset_sse2_unaligned_erms (2 samples, 0.41%)</title><rect x="73.1161%" y="197" width="0.4073%" height="15" fill="rgb(245,125,30)" fg:x="359" fg:w="2"/><text x="73.3661%" y="207.50"></text></g><g><title>H5AC_create (3 samples, 0.61%)</title><rect x="73.1161%" y="245" width="0.6110%" height="15" fill="rgb(232,202,2)" fg:x="359" fg:w="3"/><text x="73.3661%" y="255.50"></text></g><g><title>H5C_create (3 samples, 0.61%)</title><rect x="73.1161%" y="229" width="0.6110%" height="15" fill="rgb(237,140,51)" fg:x="359" fg:w="3"/><text x="73.3661%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.20%)</title><rect x="73.5234%" y="213" width="0.2037%" height="15" fill="rgb(236,157,25)" fg:x="361" fg:w="1"/><text x="73.7734%" y="223.50"></text></g><g><title>H5FD_lock (1 samples, 0.20%)</title><rect x="73.7271%" y="245" width="0.2037%" height="15" fill="rgb(219,209,0)" fg:x="362" fg:w="1"/><text x="73.9771%" y="255.50"></text></g><g><title>flock (1 samples, 0.20%)</title><rect x="73.7271%" y="229" width="0.2037%" height="15" fill="rgb(240,116,54)" fg:x="362" fg:w="1"/><text x="73.9771%" y="239.50"></text></g><g><title>H5FD_open (1 samples, 0.20%)</title><rect x="73.9308%" y="245" width="0.2037%" height="15" fill="rgb(216,10,36)" fg:x="363" fg:w="1"/><text x="74.1808%" y="255.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.20%)</title><rect x="73.9308%" y="229" width="0.2037%" height="15" fill="rgb(222,72,44)" fg:x="363" fg:w="1"/><text x="74.1808%" y="239.50"></text></g><g><title>fstatat64_time64_stat (1 samples, 0.20%)</title><rect x="73.9308%" y="213" width="0.2037%" height="15" fill="rgb(232,159,9)" fg:x="363" fg:w="1"/><text x="74.1808%" y="223.50"></text></g><g><title>H5Fopen (6 samples, 1.22%)</title><rect x="73.1161%" y="309" width="1.2220%" height="15" fill="rgb(210,39,32)" fg:x="359" fg:w="6"/><text x="73.3661%" y="319.50"></text></g><g><title>H5VL_file_open (6 samples, 1.22%)</title><rect x="73.1161%" y="293" width="1.2220%" height="15" fill="rgb(216,194,45)" fg:x="359" fg:w="6"/><text x="73.3661%" y="303.50"></text></g><g><title>H5VL__native_file_open (6 samples, 1.22%)</title><rect x="73.1161%" y="277" width="1.2220%" height="15" fill="rgb(218,18,35)" fg:x="359" fg:w="6"/><text x="73.3661%" y="287.50"></text></g><g><title>H5F_open (6 samples, 1.22%)</title><rect x="73.1161%" y="261" width="1.2220%" height="15" fill="rgb(207,83,51)" fg:x="359" fg:w="6"/><text x="73.3661%" y="271.50"></text></g><g><title>H5G_mkroot (1 samples, 0.20%)</title><rect x="74.1344%" y="245" width="0.2037%" height="15" fill="rgb(225,63,43)" fg:x="364" fg:w="1"/><text x="74.3844%" y="255.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="74.1344%" y="229" width="0.2037%" height="15" fill="rgb(207,57,36)" fg:x="364" fg:w="1"/><text x="74.3844%" y="239.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="74.1344%" y="213" width="0.2037%" height="15" fill="rgb(216,99,33)" fg:x="364" fg:w="1"/><text x="74.3844%" y="223.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="74.1344%" y="197" width="0.2037%" height="15" fill="rgb(225,42,16)" fg:x="364" fg:w="1"/><text x="74.3844%" y="207.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="74.1344%" y="181" width="0.2037%" height="15" fill="rgb(220,201,45)" fg:x="364" fg:w="1"/><text x="74.3844%" y="191.50"></text></g><g><title>H5O__alloc_msgs (1 samples, 0.20%)</title><rect x="74.1344%" y="165" width="0.2037%" height="15" fill="rgb(225,33,4)" fg:x="364" fg:w="1"/><text x="74.3844%" y="175.50"></text></g><g><title>H5FL_blk_realloc (1 samples, 0.20%)</title><rect x="74.1344%" y="149" width="0.2037%" height="15" fill="rgb(224,33,50)" fg:x="364" fg:w="1"/><text x="74.3844%" y="159.50"></text></g><g><title>H5FL_blk_free (1 samples, 0.20%)</title><rect x="74.1344%" y="133" width="0.2037%" height="15" fill="rgb(246,198,51)" fg:x="364" fg:w="1"/><text x="74.3844%" y="143.50"></text></g><g><title>H5E_term_package (2 samples, 0.41%)</title><rect x="74.3381%" y="293" width="0.4073%" height="15" fill="rgb(205,22,4)" fg:x="365" fg:w="2"/><text x="74.5881%" y="303.50"></text></g><g><title>H5I_clear_type (2 samples, 0.41%)</title><rect x="74.3381%" y="277" width="0.4073%" height="15" fill="rgb(206,3,8)" fg:x="365" fg:w="2"/><text x="74.5881%" y="287.50"></text></g><g><title>H5I_iterate (1 samples, 0.20%)</title><rect x="74.5418%" y="261" width="0.2037%" height="15" fill="rgb(251,23,15)" fg:x="366" fg:w="1"/><text x="74.7918%" y="271.50"></text></g><g><title>H5I_remove (1 samples, 0.20%)</title><rect x="74.5418%" y="245" width="0.2037%" height="15" fill="rgb(252,88,28)" fg:x="366" fg:w="1"/><text x="74.7918%" y="255.50"></text></g><g><title>malloc_consolidate (1 samples, 0.20%)</title><rect x="74.7454%" y="229" width="0.2037%" height="15" fill="rgb(212,127,14)" fg:x="367" fg:w="1"/><text x="74.9954%" y="239.50"></text></g><g><title>H5FL_term_package (2 samples, 0.41%)</title><rect x="74.7454%" y="293" width="0.4073%" height="15" fill="rgb(247,145,37)" fg:x="367" fg:w="2"/><text x="74.9954%" y="303.50"></text></g><g><title>H5FL_garbage_coll (2 samples, 0.41%)</title><rect x="74.7454%" y="277" width="0.4073%" height="15" fill="rgb(209,117,53)" fg:x="367" fg:w="2"/><text x="74.9954%" y="287.50"></text></g><g><title>__GI___libc_free (2 samples, 0.41%)</title><rect x="74.7454%" y="261" width="0.4073%" height="15" fill="rgb(212,90,42)" fg:x="367" fg:w="2"/><text x="74.9954%" y="271.50"></text></g><g><title>_int_free (2 samples, 0.41%)</title><rect x="74.7454%" y="245" width="0.4073%" height="15" fill="rgb(218,164,37)" fg:x="367" fg:w="2"/><text x="74.9954%" y="255.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="74.9491%" y="229" width="0.2037%" height="15" fill="rgb(246,65,34)" fg:x="368" fg:w="1"/><text x="75.1991%" y="239.50"></text></g><g><title>H5I_clear_type (1 samples, 0.20%)</title><rect x="75.1527%" y="277" width="0.2037%" height="15" fill="rgb(231,100,33)" fg:x="369" fg:w="1"/><text x="75.4027%" y="287.50"></text></g><g><title>H5P_close (1 samples, 0.20%)</title><rect x="75.1527%" y="261" width="0.2037%" height="15" fill="rgb(228,126,14)" fg:x="369" fg:w="1"/><text x="75.4027%" y="271.50"></text></g><g><title>H5VL_conn_free (1 samples, 0.20%)</title><rect x="75.1527%" y="245" width="0.2037%" height="15" fill="rgb(215,173,21)" fg:x="369" fg:w="1"/><text x="75.4027%" y="255.50"></text></g><g><title>H5I_dec_ref (1 samples, 0.20%)</title><rect x="75.1527%" y="229" width="0.2037%" height="15" fill="rgb(210,6,40)" fg:x="369" fg:w="1"/><text x="75.4027%" y="239.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="75.1527%" y="213" width="0.2037%" height="15" fill="rgb(212,48,18)" fg:x="369" fg:w="1"/><text x="75.4027%" y="223.50"></text></g><g><title>H5P_term_package (2 samples, 0.41%)</title><rect x="75.1527%" y="293" width="0.4073%" height="15" fill="rgb(230,214,11)" fg:x="369" fg:w="2"/><text x="75.4027%" y="303.50"></text></g><g><title>H5I_nmembers (1 samples, 0.20%)</title><rect x="75.3564%" y="277" width="0.2037%" height="15" fill="rgb(254,105,39)" fg:x="370" fg:w="1"/><text x="75.6064%" y="287.50"></text></g><g><title>H5close (7 samples, 1.43%)</title><rect x="74.3381%" y="309" width="1.4257%" height="15" fill="rgb(245,158,5)" fg:x="365" fg:w="7"/><text x="74.5881%" y="319.50"></text></g><g><title>H5T_top_term_package (1 samples, 0.20%)</title><rect x="75.5601%" y="293" width="0.2037%" height="15" fill="rgb(249,208,11)" fg:x="371" fg:w="1"/><text x="75.8101%" y="303.50"></text></g><g><title>H5T_close_real (1 samples, 0.20%)</title><rect x="75.5601%" y="277" width="0.2037%" height="15" fill="rgb(210,39,28)" fg:x="371" fg:w="1"/><text x="75.8101%" y="287.50"></text></g><g><title>H5P_init_phase1 (2 samples, 0.41%)</title><rect x="75.7637%" y="277" width="0.4073%" height="15" fill="rgb(211,56,53)" fg:x="372" fg:w="2"/><text x="76.0137%" y="287.50"></text></g><g><title>H5P__register_real (2 samples, 0.41%)</title><rect x="75.7637%" y="261" width="0.4073%" height="15" fill="rgb(226,201,30)" fg:x="372" fg:w="2"/><text x="76.0137%" y="271.50"></text></g><g><title>H5P__add_prop (2 samples, 0.41%)</title><rect x="75.7637%" y="245" width="0.4073%" height="15" fill="rgb(239,101,34)" fg:x="372" fg:w="2"/><text x="76.0137%" y="255.50"></text></g><g><title>H5SL_insert (2 samples, 0.41%)</title><rect x="75.7637%" y="229" width="0.4073%" height="15" fill="rgb(226,209,5)" fg:x="372" fg:w="2"/><text x="76.0137%" y="239.50"></text></g><g><title>H5MM_realloc (1 samples, 0.20%)</title><rect x="75.9674%" y="213" width="0.2037%" height="15" fill="rgb(250,105,47)" fg:x="373" fg:w="1"/><text x="76.2174%" y="223.50"></text></g><g><title>H5T_cmp (3 samples, 0.61%)</title><rect x="76.7821%" y="245" width="0.6110%" height="15" fill="rgb(230,72,3)" fg:x="377" fg:w="3"/><text x="77.0321%" y="255.50"></text></g><g><title>H5T_init (7 samples, 1.43%)</title><rect x="76.1711%" y="261" width="1.4257%" height="15" fill="rgb(232,218,39)" fg:x="374" fg:w="7"/><text x="76.4211%" y="271.50"></text></g><g><title>H5T_copy (1 samples, 0.20%)</title><rect x="77.3931%" y="245" width="0.2037%" height="15" fill="rgb(248,166,6)" fg:x="380" fg:w="1"/><text x="77.6431%" y="255.50"></text></g><g><title>H5open (10 samples, 2.04%)</title><rect x="75.7637%" y="309" width="2.0367%" height="15" fill="rgb(247,89,20)" fg:x="372" fg:w="10"/><text x="76.0137%" y="319.50">H..</text></g><g><title>H5_init_library (10 samples, 2.04%)</title><rect x="75.7637%" y="293" width="2.0367%" height="15" fill="rgb(248,130,54)" fg:x="372" fg:w="10"/><text x="76.0137%" y="303.50">H..</text></g><g><title>H5VL_init_phase2 (8 samples, 1.63%)</title><rect x="76.1711%" y="277" width="1.6293%" height="15" fill="rgb(234,196,4)" fg:x="374" fg:w="8"/><text x="76.4211%" y="287.50"></text></g><g><title>H5VL__set_def_conn (1 samples, 0.20%)</title><rect x="77.5967%" y="261" width="0.2037%" height="15" fill="rgb(250,143,31)" fg:x="381" fg:w="1"/><text x="77.8467%" y="271.50"></text></g><g><title>H5P_set_vol (1 samples, 0.20%)</title><rect x="77.5967%" y="245" width="0.2037%" height="15" fill="rgb(211,110,34)" fg:x="381" fg:w="1"/><text x="77.8467%" y="255.50"></text></g><g><title>H5P_isa_class (1 samples, 0.20%)</title><rect x="77.5967%" y="229" width="0.2037%" height="15" fill="rgb(215,124,48)" fg:x="381" fg:w="1"/><text x="77.8467%" y="239.50"></text></g><g><title>H5F_get_obj_ids (1 samples, 0.20%)</title><rect x="78.0041%" y="197" width="0.2037%" height="15" fill="rgb(216,46,13)" fg:x="383" fg:w="1"/><text x="78.2541%" y="207.50"></text></g><g><title>H5Aopen (2 samples, 0.41%)</title><rect x="78.0041%" y="277" width="0.4073%" height="15" fill="rgb(205,184,25)" fg:x="383" fg:w="2"/><text x="78.2541%" y="287.50"></text></g><g><title>H5VL_attr_open (2 samples, 0.41%)</title><rect x="78.0041%" y="261" width="0.4073%" height="15" fill="rgb(228,1,10)" fg:x="383" fg:w="2"/><text x="78.2541%" y="271.50"></text></g><g><title>H5VL__native_attr_open (2 samples, 0.41%)</title><rect x="78.0041%" y="245" width="0.4073%" height="15" fill="rgb(213,116,27)" fg:x="383" fg:w="2"/><text x="78.2541%" y="255.50"></text></g><g><title>H5A__open (2 samples, 0.41%)</title><rect x="78.0041%" y="229" width="0.4073%" height="15" fill="rgb(241,95,50)" fg:x="383" fg:w="2"/><text x="78.2541%" y="239.50"></text></g><g><title>H5O__attr_open_by_name (2 samples, 0.41%)</title><rect x="78.0041%" y="213" width="0.4073%" height="15" fill="rgb(238,48,32)" fg:x="383" fg:w="2"/><text x="78.2541%" y="223.50"></text></g><g><title>H5VL_object_verify (1 samples, 0.20%)</title><rect x="78.2077%" y="197" width="0.2037%" height="15" fill="rgb(235,113,49)" fg:x="384" fg:w="1"/><text x="78.4577%" y="207.50"></text></g><g><title>H5I_object (1 samples, 0.20%)</title><rect x="78.2077%" y="181" width="0.2037%" height="15" fill="rgb(205,127,43)" fg:x="384" fg:w="1"/><text x="78.4577%" y="191.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="78.2077%" y="165" width="0.2037%" height="15" fill="rgb(250,162,2)" fg:x="384" fg:w="1"/><text x="78.4577%" y="175.50"></text></g><g><title>H5AC_cork (1 samples, 0.20%)</title><rect x="78.4114%" y="197" width="0.2037%" height="15" fill="rgb(220,13,41)" fg:x="385" fg:w="1"/><text x="78.6614%" y="207.50"></text></g><g><title>H5O_msg_reset (1 samples, 0.20%)</title><rect x="78.6151%" y="165" width="0.2037%" height="15" fill="rgb(249,221,25)" fg:x="386" fg:w="1"/><text x="78.8651%" y="175.50"></text></g><g><title>H5SL_destroy (1 samples, 0.20%)</title><rect x="78.8187%" y="165" width="0.2037%" height="15" fill="rgb(215,208,19)" fg:x="387" fg:w="1"/><text x="79.0687%" y="175.50"></text></g><g><title>H5VL__native_dataset_close (4 samples, 0.81%)</title><rect x="78.4114%" y="229" width="0.8147%" height="15" fill="rgb(236,175,2)" fg:x="385" fg:w="4"/><text x="78.6614%" y="239.50"></text></g><g><title>H5D_close (4 samples, 0.81%)</title><rect x="78.4114%" y="213" width="0.8147%" height="15" fill="rgb(241,52,2)" fg:x="385" fg:w="4"/><text x="78.6614%" y="223.50"></text></g><g><title>H5I_dec_ref (3 samples, 0.61%)</title><rect x="78.6151%" y="197" width="0.6110%" height="15" fill="rgb(248,140,14)" fg:x="386" fg:w="3"/><text x="78.8651%" y="207.50"></text></g><g><title>H5P_close (3 samples, 0.61%)</title><rect x="78.6151%" y="181" width="0.6110%" height="15" fill="rgb(253,22,42)" fg:x="386" fg:w="3"/><text x="78.8651%" y="191.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="79.0224%" y="165" width="0.2037%" height="15" fill="rgb(234,61,47)" fg:x="388" fg:w="1"/><text x="79.2724%" y="175.50"></text></g><g><title>H5Dclose (5 samples, 1.02%)</title><rect x="78.4114%" y="277" width="1.0183%" height="15" fill="rgb(208,226,15)" fg:x="385" fg:w="5"/><text x="78.6614%" y="287.50"></text></g><g><title>H5I_dec_app_ref_always_close (5 samples, 1.02%)</title><rect x="78.4114%" y="261" width="1.0183%" height="15" fill="rgb(217,221,4)" fg:x="385" fg:w="5"/><text x="78.6614%" y="271.50"></text></g><g><title>H5VL_dataset_close (5 samples, 1.02%)</title><rect x="78.4114%" y="245" width="1.0183%" height="15" fill="rgb(212,174,34)" fg:x="385" fg:w="5"/><text x="78.6614%" y="255.50"></text></g><g><title>H5VL_set_vol_wrapper (1 samples, 0.20%)</title><rect x="79.2261%" y="229" width="0.2037%" height="15" fill="rgb(253,83,4)" fg:x="389" fg:w="1"/><text x="79.4761%" y="239.50"></text></g><g><title>H5CX_get_vol_wrap_ctx (1 samples, 0.20%)</title><rect x="79.2261%" y="213" width="0.2037%" height="15" fill="rgb(250,195,49)" fg:x="389" fg:w="1"/><text x="79.4761%" y="223.50"></text></g><g><title>H5Dget_space (1 samples, 0.20%)</title><rect x="79.4297%" y="277" width="0.2037%" height="15" fill="rgb(241,192,25)" fg:x="390" fg:w="1"/><text x="79.6797%" y="287.50"></text></g><g><title>H5VL_dataset_get (1 samples, 0.20%)</title><rect x="79.4297%" y="261" width="0.2037%" height="15" fill="rgb(208,124,10)" fg:x="390" fg:w="1"/><text x="79.6797%" y="271.50"></text></g><g><title>H5VL__native_dataset_get (1 samples, 0.20%)</title><rect x="79.4297%" y="245" width="0.2037%" height="15" fill="rgb(222,33,0)" fg:x="390" fg:w="1"/><text x="79.6797%" y="255.50"></text></g><g><title>H5D__get_space (1 samples, 0.20%)</title><rect x="79.4297%" y="229" width="0.2037%" height="15" fill="rgb(234,209,28)" fg:x="390" fg:w="1"/><text x="79.6797%" y="239.50"></text></g><g><title>H5I_register (1 samples, 0.20%)</title><rect x="79.4297%" y="213" width="0.2037%" height="15" fill="rgb(224,11,23)" fg:x="390" fg:w="1"/><text x="79.6797%" y="223.50"></text></g><g><title>H5I__register (1 samples, 0.20%)</title><rect x="79.4297%" y="197" width="0.2037%" height="15" fill="rgb(232,99,1)" fg:x="390" fg:w="1"/><text x="79.6797%" y="207.50"></text></g><g><title>H5D__layout_oh_read (1 samples, 0.20%)</title><rect x="79.6334%" y="197" width="0.2037%" height="15" fill="rgb(237,95,45)" fg:x="391" fg:w="1"/><text x="79.8834%" y="207.50"></text></g><g><title>H5P_set (1 samples, 0.20%)</title><rect x="79.6334%" y="181" width="0.2037%" height="15" fill="rgb(208,109,11)" fg:x="391" fg:w="1"/><text x="79.8834%" y="191.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="79.6334%" y="165" width="0.2037%" height="15" fill="rgb(216,190,48)" fg:x="391" fg:w="1"/><text x="79.8834%" y="175.50"></text></g><g><title>__strcmp_sse2_unaligned (1 samples, 0.20%)</title><rect x="79.6334%" y="149" width="0.2037%" height="15" fill="rgb(251,171,36)" fg:x="391" fg:w="1"/><text x="79.8834%" y="159.50"></text></g><g><title>H5I_object (1 samples, 0.20%)</title><rect x="79.8371%" y="197" width="0.2037%" height="15" fill="rgb(230,62,22)" fg:x="392" fg:w="1"/><text x="80.0871%" y="207.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="79.8371%" y="181" width="0.2037%" height="15" fill="rgb(225,114,35)" fg:x="392" fg:w="1"/><text x="80.0871%" y="191.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="80.0407%" y="197" width="0.2037%" height="15" fill="rgb(215,118,42)" fg:x="393" fg:w="1"/><text x="80.2907%" y="207.50"></text></g><g><title>H5O_msg_copy (1 samples, 0.20%)</title><rect x="80.2444%" y="181" width="0.2037%" height="15" fill="rgb(243,119,21)" fg:x="394" fg:w="1"/><text x="80.4944%" y="191.50"></text></g><g><title>H5P__access_class (1 samples, 0.20%)</title><rect x="80.4481%" y="181" width="0.2037%" height="15" fill="rgb(252,177,53)" fg:x="395" fg:w="1"/><text x="80.6981%" y="191.50"></text></g><g><title>H5P__add_prop (1 samples, 0.20%)</title><rect x="80.6517%" y="181" width="0.2037%" height="15" fill="rgb(237,209,29)" fg:x="396" fg:w="1"/><text x="80.9017%" y="191.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="80.6517%" y="165" width="0.2037%" height="15" fill="rgb(212,65,23)" fg:x="396" fg:w="1"/><text x="80.9017%" y="175.50"></text></g><g><title>H5SL_close (2 samples, 0.41%)</title><rect x="80.8554%" y="181" width="0.4073%" height="15" fill="rgb(230,222,46)" fg:x="397" fg:w="2"/><text x="81.1054%" y="191.50"></text></g><g><title>H5FL_reg_free (2 samples, 0.41%)</title><rect x="80.8554%" y="165" width="0.4073%" height="15" fill="rgb(215,135,32)" fg:x="397" fg:w="2"/><text x="81.1054%" y="175.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="81.2627%" y="181" width="0.2037%" height="15" fill="rgb(246,101,22)" fg:x="399" fg:w="1"/><text x="81.5127%" y="191.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="81.4664%" y="181" width="0.2037%" height="15" fill="rgb(206,107,13)" fg:x="400" fg:w="1"/><text x="81.7164%" y="191.50"></text></g><g><title>H5P_copy_plist (8 samples, 1.63%)</title><rect x="80.2444%" y="197" width="1.6293%" height="15" fill="rgb(250,100,44)" fg:x="394" fg:w="8"/><text x="80.4944%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="81.6701%" y="181" width="0.2037%" height="15" fill="rgb(231,147,38)" fg:x="401" fg:w="1"/><text x="81.9201%" y="191.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="81.6701%" y="165" width="0.2037%" height="15" fill="rgb(229,8,40)" fg:x="401" fg:w="1"/><text x="81.9201%" y="175.50"></text></g><g><title>H5FL_arr_malloc (1 samples, 0.20%)</title><rect x="81.8737%" y="149" width="0.2037%" height="15" fill="rgb(221,135,30)" fg:x="402" fg:w="1"/><text x="82.1237%" y="159.50"></text></g><g><title>H5D_open (13 samples, 2.65%)</title><rect x="79.6334%" y="213" width="2.6477%" height="15" fill="rgb(249,193,18)" fg:x="391" fg:w="13"/><text x="79.8834%" y="223.50">H5..</text></g><g><title>H5S_read (2 samples, 0.41%)</title><rect x="81.8737%" y="197" width="0.4073%" height="15" fill="rgb(209,133,39)" fg:x="402" fg:w="2"/><text x="82.1237%" y="207.50"></text></g><g><title>H5O_msg_read (2 samples, 0.41%)</title><rect x="81.8737%" y="181" width="0.4073%" height="15" fill="rgb(232,100,14)" fg:x="402" fg:w="2"/><text x="82.1237%" y="191.50"></text></g><g><title>H5O_msg_read_oh (2 samples, 0.41%)</title><rect x="81.8737%" y="165" width="0.4073%" height="15" fill="rgb(224,185,1)" fg:x="402" fg:w="2"/><text x="82.1237%" y="175.50"></text></g><g><title>H5FL_reg_calloc (1 samples, 0.20%)</title><rect x="82.0774%" y="149" width="0.2037%" height="15" fill="rgb(223,139,8)" fg:x="403" fg:w="1"/><text x="82.3274%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="82.2811%" y="133" width="0.2037%" height="15" fill="rgb(232,213,38)" fg:x="404" fg:w="1"/><text x="82.5311%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="82.2811%" y="117" width="0.2037%" height="15" fill="rgb(207,94,22)" fg:x="404" fg:w="1"/><text x="82.5311%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="82.2811%" y="101" width="0.2037%" height="15" fill="rgb(219,183,54)" fg:x="404" fg:w="1"/><text x="82.5311%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="82.2811%" y="85" width="0.2037%" height="15" fill="rgb(216,185,54)" fg:x="404" fg:w="1"/><text x="82.5311%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="82.2811%" y="69" width="0.2037%" height="15" fill="rgb(254,217,39)" fg:x="404" fg:w="1"/><text x="82.5311%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="82.2811%" y="53" width="0.2037%" height="15" fill="rgb(240,178,23)" fg:x="404" fg:w="1"/><text x="82.5311%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="82.2811%" y="37" width="0.2037%" height="15" fill="rgb(218,11,47)" fg:x="404" fg:w="1"/><text x="82.5311%" y="47.50"></text></g><g><title>Unknown (1 samples, 0.20%)</title><rect x="82.4847%" y="85" width="0.2037%" height="15" fill="rgb(218,51,51)" fg:x="405" fg:w="1"/><text x="82.7347%" y="95.50"></text></g><g><title>H5B_find (3 samples, 0.61%)</title><rect x="82.2811%" y="149" width="0.6110%" height="15" fill="rgb(238,126,27)" fg:x="404" fg:w="3"/><text x="82.5311%" y="159.50"></text></g><g><title>H5G__ent_to_link (2 samples, 0.41%)</title><rect x="82.4847%" y="133" width="0.4073%" height="15" fill="rgb(249,202,22)" fg:x="405" fg:w="2"/><text x="82.7347%" y="143.50"></text></g><g><title>H5MM_xstrdup (2 samples, 0.41%)</title><rect x="82.4847%" y="117" width="0.4073%" height="15" fill="rgb(254,195,49)" fg:x="405" fg:w="2"/><text x="82.7347%" y="127.50"></text></g><g><title>__GI___strdup (2 samples, 0.41%)</title><rect x="82.4847%" y="101" width="0.4073%" height="15" fill="rgb(208,123,14)" fg:x="405" fg:w="2"/><text x="82.7347%" y="111.50"></text></g><g><title>__strlen_sse2 (1 samples, 0.20%)</title><rect x="82.6884%" y="85" width="0.2037%" height="15" fill="rgb(224,200,8)" fg:x="406" fg:w="1"/><text x="82.9384%" y="95.50"></text></g><g><title>H5G__obj_lookup (4 samples, 0.81%)</title><rect x="82.2811%" y="181" width="0.8147%" height="15" fill="rgb(217,61,36)" fg:x="404" fg:w="4"/><text x="82.5311%" y="191.50"></text></g><g><title>H5G__stab_lookup (4 samples, 0.81%)</title><rect x="82.2811%" y="165" width="0.8147%" height="15" fill="rgb(206,35,45)" fg:x="404" fg:w="4"/><text x="82.5311%" y="175.50"></text></g><g><title>H5HL_protect (1 samples, 0.20%)</title><rect x="82.8921%" y="149" width="0.2037%" height="15" fill="rgb(217,65,33)" fg:x="407" fg:w="1"/><text x="83.1421%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="82.8921%" y="133" width="0.2037%" height="15" fill="rgb(222,158,48)" fg:x="407" fg:w="1"/><text x="83.1421%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="82.8921%" y="117" width="0.2037%" height="15" fill="rgb(254,2,54)" fg:x="407" fg:w="1"/><text x="83.1421%" y="127.50"></text></g><g><title>H5G_loc_find (5 samples, 1.02%)</title><rect x="82.2811%" y="213" width="1.0183%" height="15" fill="rgb(250,143,38)" fg:x="404" fg:w="5"/><text x="82.5311%" y="223.50"></text></g><g><title>H5G_traverse (5 samples, 1.02%)</title><rect x="82.2811%" y="197" width="1.0183%" height="15" fill="rgb(248,25,0)" fg:x="404" fg:w="5"/><text x="82.5311%" y="207.50"></text></g><g><title>H5G_loc_copy (1 samples, 0.20%)</title><rect x="83.0957%" y="181" width="0.2037%" height="15" fill="rgb(206,152,27)" fg:x="408" fg:w="1"/><text x="83.3457%" y="191.50"></text></g><g><title>H5G_name_copy (1 samples, 0.20%)</title><rect x="83.0957%" y="165" width="0.2037%" height="15" fill="rgb(240,77,30)" fg:x="408" fg:w="1"/><text x="83.3457%" y="175.50"></text></g><g><title>H5Dopen2 (22 samples, 4.48%)</title><rect x="79.6334%" y="277" width="4.4807%" height="15" fill="rgb(231,5,3)" fg:x="391" fg:w="22"/><text x="79.8834%" y="287.50">H5Dop..</text></g><g><title>H5VL_dataset_open (22 samples, 4.48%)</title><rect x="79.6334%" y="261" width="4.4807%" height="15" fill="rgb(207,226,32)" fg:x="391" fg:w="22"/><text x="79.8834%" y="271.50">H5VL_..</text></g><g><title>H5VL__native_dataset_open (22 samples, 4.48%)</title><rect x="79.6334%" y="245" width="4.4807%" height="15" fill="rgb(222,207,47)" fg:x="391" fg:w="22"/><text x="79.8834%" y="255.50">H5VL_..</text></g><g><title>H5D__open_name (22 samples, 4.48%)</title><rect x="79.6334%" y="229" width="4.4807%" height="15" fill="rgb(229,115,45)" fg:x="391" fg:w="22"/><text x="79.8834%" y="239.50">H5D__..</text></g><g><title>H5O_obj_type (4 samples, 0.81%)</title><rect x="83.2994%" y="213" width="0.8147%" height="15" fill="rgb(224,191,6)" fg:x="409" fg:w="4"/><text x="83.5494%" y="223.50"></text></g><g><title>H5O_protect (4 samples, 0.81%)</title><rect x="83.2994%" y="197" width="0.8147%" height="15" fill="rgb(230,227,24)" fg:x="409" fg:w="4"/><text x="83.5494%" y="207.50"></text></g><g><title>H5AC_protect (3 samples, 0.61%)</title><rect x="83.5031%" y="181" width="0.6110%" height="15" fill="rgb(228,80,19)" fg:x="410" fg:w="3"/><text x="83.7531%" y="191.50"></text></g><g><title>H5C_protect (3 samples, 0.61%)</title><rect x="83.5031%" y="165" width="0.6110%" height="15" fill="rgb(247,229,0)" fg:x="410" fg:w="3"/><text x="83.7531%" y="175.50"></text></g><g><title>H5F_block_read (3 samples, 0.61%)</title><rect x="83.5031%" y="149" width="0.6110%" height="15" fill="rgb(237,194,15)" fg:x="410" fg:w="3"/><text x="83.7531%" y="159.50"></text></g><g><title>H5PB_read (3 samples, 0.61%)</title><rect x="83.5031%" y="133" width="0.6110%" height="15" fill="rgb(219,203,20)" fg:x="410" fg:w="3"/><text x="83.7531%" y="143.50"></text></g><g><title>H5F__accum_read (3 samples, 0.61%)</title><rect x="83.5031%" y="117" width="0.6110%" height="15" fill="rgb(234,128,8)" fg:x="410" fg:w="3"/><text x="83.7531%" y="127.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="83.7067%" y="101" width="0.4073%" height="15" fill="rgb(248,202,8)" fg:x="411" fg:w="2"/><text x="83.9567%" y="111.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="83.7067%" y="85" width="0.4073%" height="15" fill="rgb(206,104,37)" fg:x="411" fg:w="2"/><text x="83.9567%" y="95.50"></text></g><g><title>H5Dread (3 samples, 0.61%)</title><rect x="84.1141%" y="277" width="0.6110%" height="15" fill="rgb(223,8,27)" fg:x="413" fg:w="3"/><text x="84.3641%" y="287.50"></text></g><g><title>H5VL_dataset_read (2 samples, 0.41%)</title><rect x="84.3177%" y="261" width="0.4073%" height="15" fill="rgb(216,217,28)" fg:x="414" fg:w="2"/><text x="84.5677%" y="271.50"></text></g><g><title>H5VL__native_dataset_read (2 samples, 0.41%)</title><rect x="84.3177%" y="245" width="0.4073%" height="15" fill="rgb(249,199,1)" fg:x="414" fg:w="2"/><text x="84.5677%" y="255.50"></text></g><g><title>H5D__read (2 samples, 0.41%)</title><rect x="84.3177%" y="229" width="0.4073%" height="15" fill="rgb(240,85,17)" fg:x="414" fg:w="2"/><text x="84.5677%" y="239.50"></text></g><g><title>H5D__contig_read (1 samples, 0.20%)</title><rect x="84.5214%" y="213" width="0.2037%" height="15" fill="rgb(206,108,45)" fg:x="415" fg:w="1"/><text x="84.7714%" y="223.50"></text></g><g><title>H5D__select_read (1 samples, 0.20%)</title><rect x="84.5214%" y="197" width="0.2037%" height="15" fill="rgb(245,210,41)" fg:x="415" fg:w="1"/><text x="84.7714%" y="207.50"></text></g><g><title>H5VM_opvv (1 samples, 0.20%)</title><rect x="84.5214%" y="181" width="0.2037%" height="15" fill="rgb(206,13,37)" fg:x="415" fg:w="1"/><text x="84.7714%" y="191.50"></text></g><g><title>H5F_shared_block_read (1 samples, 0.20%)</title><rect x="84.5214%" y="165" width="0.2037%" height="15" fill="rgb(250,61,18)" fg:x="415" fg:w="1"/><text x="84.7714%" y="175.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="84.5214%" y="149" width="0.2037%" height="15" fill="rgb(235,172,48)" fg:x="415" fg:w="1"/><text x="84.7714%" y="159.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="84.5214%" y="133" width="0.2037%" height="15" fill="rgb(249,201,17)" fg:x="415" fg:w="1"/><text x="84.7714%" y="143.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="84.5214%" y="117" width="0.2037%" height="15" fill="rgb(219,208,6)" fg:x="415" fg:w="1"/><text x="84.7714%" y="127.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="84.5214%" y="101" width="0.2037%" height="15" fill="rgb(248,31,23)" fg:x="415" fg:w="1"/><text x="84.7714%" y="111.50"></text></g><g><title>H5Gclose (1 samples, 0.20%)</title><rect x="84.7251%" y="277" width="0.2037%" height="15" fill="rgb(245,15,42)" fg:x="416" fg:w="1"/><text x="84.9751%" y="287.50"></text></g><g><title>H5I_dec_app_ref (1 samples, 0.20%)</title><rect x="84.7251%" y="261" width="0.2037%" height="15" fill="rgb(222,217,39)" fg:x="416" fg:w="1"/><text x="84.9751%" y="271.50"></text></g><g><title>H5VL_group_close (1 samples, 0.20%)</title><rect x="84.7251%" y="245" width="0.2037%" height="15" fill="rgb(210,219,27)" fg:x="416" fg:w="1"/><text x="84.9751%" y="255.50"></text></g><g><title>H5VL__native_group_close (1 samples, 0.20%)</title><rect x="84.7251%" y="229" width="0.2037%" height="15" fill="rgb(252,166,36)" fg:x="416" fg:w="1"/><text x="84.9751%" y="239.50"></text></g><g><title>H5G_close (1 samples, 0.20%)</title><rect x="84.7251%" y="213" width="0.2037%" height="15" fill="rgb(245,132,34)" fg:x="416" fg:w="1"/><text x="84.9751%" y="223.50"></text></g><g><title>H5FO_delete (1 samples, 0.20%)</title><rect x="84.7251%" y="197" width="0.2037%" height="15" fill="rgb(236,54,3)" fg:x="416" fg:w="1"/><text x="84.9751%" y="207.50"></text></g><g><title>H5SL_remove (1 samples, 0.20%)</title><rect x="84.7251%" y="181" width="0.2037%" height="15" fill="rgb(241,173,43)" fg:x="416" fg:w="1"/><text x="84.9751%" y="191.50"></text></g><g><title>H5FL_fac_free (1 samples, 0.20%)</title><rect x="84.7251%" y="165" width="0.2037%" height="15" fill="rgb(215,190,9)" fg:x="416" fg:w="1"/><text x="84.9751%" y="175.50"></text></g><g><title>H5CX_pop (1 samples, 0.20%)</title><rect x="84.9287%" y="261" width="0.2037%" height="15" fill="rgb(242,101,16)" fg:x="417" fg:w="1"/><text x="85.1787%" y="271.50"></text></g><g><title>H5FL_reg_free (1 samples, 0.20%)</title><rect x="84.9287%" y="245" width="0.2037%" height="15" fill="rgb(223,190,21)" fg:x="417" fg:w="1"/><text x="85.1787%" y="255.50"></text></g><g><title>H5G__component (1 samples, 0.20%)</title><rect x="85.1324%" y="181" width="0.2037%" height="15" fill="rgb(215,228,25)" fg:x="418" fg:w="1"/><text x="85.3824%" y="191.50"></text></g><g><title>__strcspn_sse42 (1 samples, 0.20%)</title><rect x="85.1324%" y="165" width="0.2037%" height="15" fill="rgb(225,36,22)" fg:x="418" fg:w="1"/><text x="85.3824%" y="175.50"></text></g><g><title>__m128i_shift_right (1 samples, 0.20%)</title><rect x="85.1324%" y="149" width="0.2037%" height="15" fill="rgb(251,106,46)" fg:x="418" fg:w="1"/><text x="85.3824%" y="159.50"></text></g><g><title>_mm_loadu_si128 (1 samples, 0.20%)</title><rect x="85.1324%" y="133" width="0.2037%" height="15" fill="rgb(208,90,1)" fg:x="418" fg:w="1"/><text x="85.3824%" y="143.50"></text></g><g><title>H5G__obj_get_linfo (1 samples, 0.20%)</title><rect x="85.3360%" y="165" width="0.2037%" height="15" fill="rgb(243,10,4)" fg:x="419" fg:w="1"/><text x="85.5860%" y="175.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="85.3360%" y="149" width="0.2037%" height="15" fill="rgb(212,137,27)" fg:x="419" fg:w="1"/><text x="85.5860%" y="159.50"></text></g><g><title>H5B_find (2 samples, 0.41%)</title><rect x="85.5397%" y="149" width="0.4073%" height="15" fill="rgb(231,220,49)" fg:x="420" fg:w="2"/><text x="85.7897%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="85.7434%" y="133" width="0.2037%" height="15" fill="rgb(237,96,20)" fg:x="421" fg:w="1"/><text x="85.9934%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="85.7434%" y="117" width="0.2037%" height="15" fill="rgb(239,229,30)" fg:x="421" fg:w="1"/><text x="85.9934%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="85.7434%" y="101" width="0.2037%" height="15" fill="rgb(219,65,33)" fg:x="421" fg:w="1"/><text x="85.9934%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="85.7434%" y="85" width="0.2037%" height="15" fill="rgb(243,134,7)" fg:x="421" fg:w="1"/><text x="85.9934%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="85.7434%" y="69" width="0.2037%" height="15" fill="rgb(216,177,54)" fg:x="421" fg:w="1"/><text x="85.9934%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="85.7434%" y="53" width="0.2037%" height="15" fill="rgb(211,160,20)" fg:x="421" fg:w="1"/><text x="85.9934%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="85.7434%" y="37" width="0.2037%" height="15" fill="rgb(239,85,39)" fg:x="421" fg:w="1"/><text x="85.9934%" y="47.50"></text></g><g><title>H5G_loc_find (5 samples, 1.02%)</title><rect x="85.1324%" y="213" width="1.0183%" height="15" fill="rgb(232,125,22)" fg:x="418" fg:w="5"/><text x="85.3824%" y="223.50"></text></g><g><title>H5G_traverse (5 samples, 1.02%)</title><rect x="85.1324%" y="197" width="1.0183%" height="15" fill="rgb(244,57,34)" fg:x="418" fg:w="5"/><text x="85.3824%" y="207.50"></text></g><g><title>H5G__obj_lookup (4 samples, 0.81%)</title><rect x="85.3360%" y="181" width="0.8147%" height="15" fill="rgb(214,203,32)" fg:x="419" fg:w="4"/><text x="85.5860%" y="191.50"></text></g><g><title>H5G__stab_lookup (3 samples, 0.61%)</title><rect x="85.5397%" y="165" width="0.6110%" height="15" fill="rgb(207,58,43)" fg:x="420" fg:w="3"/><text x="85.7897%" y="175.50"></text></g><g><title>H5HL_protect (1 samples, 0.20%)</title><rect x="85.9470%" y="149" width="0.2037%" height="15" fill="rgb(215,193,15)" fg:x="422" fg:w="1"/><text x="86.1970%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="85.9470%" y="133" width="0.2037%" height="15" fill="rgb(232,15,44)" fg:x="422" fg:w="1"/><text x="86.1970%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="85.9470%" y="117" width="0.2037%" height="15" fill="rgb(212,3,48)" fg:x="422" fg:w="1"/><text x="86.1970%" y="127.50"></text></g><g><title>H5Gopen2 (9 samples, 1.83%)</title><rect x="84.9287%" y="277" width="1.8330%" height="15" fill="rgb(218,128,7)" fg:x="417" fg:w="9"/><text x="85.1787%" y="287.50">H..</text></g><g><title>H5VL_group_open (8 samples, 1.63%)</title><rect x="85.1324%" y="261" width="1.6293%" height="15" fill="rgb(226,216,39)" fg:x="418" fg:w="8"/><text x="85.3824%" y="271.50"></text></g><g><title>H5VL__native_group_open (8 samples, 1.63%)</title><rect x="85.1324%" y="245" width="1.6293%" height="15" fill="rgb(243,47,51)" fg:x="418" fg:w="8"/><text x="85.3824%" y="255.50"></text></g><g><title>H5G__open_name (8 samples, 1.63%)</title><rect x="85.1324%" y="229" width="1.6293%" height="15" fill="rgb(241,183,40)" fg:x="418" fg:w="8"/><text x="85.3824%" y="239.50"></text></g><g><title>H5O_obj_type (3 samples, 0.61%)</title><rect x="86.1507%" y="213" width="0.6110%" height="15" fill="rgb(231,217,32)" fg:x="423" fg:w="3"/><text x="86.4007%" y="223.50"></text></g><g><title>H5O_protect (3 samples, 0.61%)</title><rect x="86.1507%" y="197" width="0.6110%" height="15" fill="rgb(229,61,38)" fg:x="423" fg:w="3"/><text x="86.4007%" y="207.50"></text></g><g><title>H5AC_protect (3 samples, 0.61%)</title><rect x="86.1507%" y="181" width="0.6110%" height="15" fill="rgb(225,210,5)" fg:x="423" fg:w="3"/><text x="86.4007%" y="191.50"></text></g><g><title>H5C_protect (3 samples, 0.61%)</title><rect x="86.1507%" y="165" width="0.6110%" height="15" fill="rgb(231,79,45)" fg:x="423" fg:w="3"/><text x="86.4007%" y="175.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="86.5580%" y="149" width="0.2037%" height="15" fill="rgb(224,100,7)" fg:x="425" fg:w="1"/><text x="86.8080%" y="159.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="86.5580%" y="133" width="0.2037%" height="15" fill="rgb(241,198,18)" fg:x="425" fg:w="1"/><text x="86.8080%" y="143.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="86.5580%" y="117" width="0.2037%" height="15" fill="rgb(252,97,53)" fg:x="425" fg:w="1"/><text x="86.8080%" y="127.50"></text></g><g><title>H5Sclose (2 samples, 0.41%)</title><rect x="86.7617%" y="277" width="0.4073%" height="15" fill="rgb(220,88,7)" fg:x="426" fg:w="2"/><text x="87.0117%" y="287.50"></text></g><g><title>H5I_dec_app_ref (2 samples, 0.41%)</title><rect x="86.7617%" y="261" width="0.4073%" height="15" fill="rgb(213,176,14)" fg:x="426" fg:w="2"/><text x="87.0117%" y="271.50"></text></g><g><title>H5S_close (1 samples, 0.20%)</title><rect x="86.9654%" y="245" width="0.2037%" height="15" fill="rgb(246,73,7)" fg:x="427" fg:w="1"/><text x="87.2154%" y="255.50"></text></g><g><title>H5S_select_release (1 samples, 0.20%)</title><rect x="86.9654%" y="229" width="0.2037%" height="15" fill="rgb(245,64,36)" fg:x="427" fg:w="1"/><text x="87.2154%" y="239.50"></text></g><g><title>float NeuralNetwork::getLiteral&lt;float&gt;(SimpleMap::Literal const*) (1 samples, 0.20%)</title><rect x="87.1690%" y="277" width="0.2037%" height="15" fill="rgb(245,80,10)" fg:x="428" fg:w="1"/><text x="87.4190%" y="287.50"></text></g><g><title>InText::readFloat(float&amp;, PhysicalInStream&amp;) (1 samples, 0.20%)</title><rect x="87.1690%" y="261" width="0.2037%" height="15" fill="rgb(232,107,50)" fg:x="428" fg:w="1"/><text x="87.4190%" y="271.50"></text></g><g><title>InText::readDouble(double&amp;, PhysicalInStream&amp;) (1 samples, 0.20%)</title><rect x="87.1690%" y="245" width="0.2037%" height="15" fill="rgb(253,3,0)" fg:x="428" fg:w="1"/><text x="87.4190%" y="255.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="87.3727%" y="277" width="0.2037%" height="15" fill="rgb(212,99,53)" fg:x="429" fg:w="1"/><text x="87.6227%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="87.3727%" y="261" width="0.2037%" height="15" fill="rgb(249,111,54)" fg:x="429" fg:w="1"/><text x="87.6227%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="87.3727%" y="245" width="0.2037%" height="15" fill="rgb(249,55,30)" fg:x="429" fg:w="1"/><text x="87.6227%" y="255.50"></text></g><g><title>NeuralNetwork::parseBatchNormalizationLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (49 samples, 9.98%)</title><rect x="77.8004%" y="293" width="9.9796%" height="15" fill="rgb(237,47,42)" fg:x="382" fg:w="49"/><text x="78.0504%" y="303.50">NeuralNetwork:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (1 samples, 0.20%)</title><rect x="87.5764%" y="277" width="0.2037%" height="15" fill="rgb(211,20,18)" fg:x="430" fg:w="1"/><text x="87.8264%" y="287.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.20%)</title><rect x="87.5764%" y="261" width="0.2037%" height="15" fill="rgb(231,203,46)" fg:x="430" fg:w="1"/><text x="87.8264%" y="271.50"></text></g><g><title>H5Aopen (1 samples, 0.20%)</title><rect x="87.9837%" y="277" width="0.2037%" height="15" fill="rgb(237,142,3)" fg:x="432" fg:w="1"/><text x="88.2337%" y="287.50"></text></g><g><title>H5VL_attr_open (1 samples, 0.20%)</title><rect x="87.9837%" y="261" width="0.2037%" height="15" fill="rgb(241,107,1)" fg:x="432" fg:w="1"/><text x="88.2337%" y="271.50"></text></g><g><title>H5VL_reset_vol_wrapper (1 samples, 0.20%)</title><rect x="87.9837%" y="245" width="0.2037%" height="15" fill="rgb(229,83,13)" fg:x="432" fg:w="1"/><text x="88.2337%" y="255.50"></text></g><g><title>H5P_copy_plist (1 samples, 0.20%)</title><rect x="88.1874%" y="197" width="0.2037%" height="15" fill="rgb(241,91,40)" fg:x="433" fg:w="1"/><text x="88.4374%" y="207.50"></text></g><g><title>H5O_msg_copy (1 samples, 0.20%)</title><rect x="88.1874%" y="181" width="0.2037%" height="15" fill="rgb(225,3,45)" fg:x="433" fg:w="1"/><text x="88.4374%" y="191.50"></text></g><g><title>H5D_open (2 samples, 0.41%)</title><rect x="88.1874%" y="213" width="0.4073%" height="15" fill="rgb(244,223,14)" fg:x="433" fg:w="2"/><text x="88.4374%" y="223.50"></text></g><g><title>H5T_set_loc (1 samples, 0.20%)</title><rect x="88.3910%" y="197" width="0.2037%" height="15" fill="rgb(224,124,37)" fg:x="434" fg:w="1"/><text x="88.6410%" y="207.50"></text></g><g><title>H5G_loc_find (1 samples, 0.20%)</title><rect x="88.5947%" y="213" width="0.2037%" height="15" fill="rgb(251,171,30)" fg:x="435" fg:w="1"/><text x="88.8447%" y="223.50"></text></g><g><title>H5G_traverse (1 samples, 0.20%)</title><rect x="88.5947%" y="197" width="0.2037%" height="15" fill="rgb(236,46,54)" fg:x="435" fg:w="1"/><text x="88.8447%" y="207.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="88.5947%" y="181" width="0.2037%" height="15" fill="rgb(245,213,5)" fg:x="435" fg:w="1"/><text x="88.8447%" y="191.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="88.5947%" y="165" width="0.2037%" height="15" fill="rgb(230,144,27)" fg:x="435" fg:w="1"/><text x="88.8447%" y="175.50"></text></g><g><title>H5B_find (1 samples, 0.20%)</title><rect x="88.5947%" y="149" width="0.2037%" height="15" fill="rgb(220,86,6)" fg:x="435" fg:w="1"/><text x="88.8447%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="88.5947%" y="133" width="0.2037%" height="15" fill="rgb(240,20,13)" fg:x="435" fg:w="1"/><text x="88.8447%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="88.5947%" y="117" width="0.2037%" height="15" fill="rgb(217,89,34)" fg:x="435" fg:w="1"/><text x="88.8447%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="88.5947%" y="101" width="0.2037%" height="15" fill="rgb(229,13,5)" fg:x="435" fg:w="1"/><text x="88.8447%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="88.5947%" y="85" width="0.2037%" height="15" fill="rgb(244,67,35)" fg:x="435" fg:w="1"/><text x="88.8447%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="88.5947%" y="69" width="0.2037%" height="15" fill="rgb(221,40,2)" fg:x="435" fg:w="1"/><text x="88.8447%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="88.5947%" y="53" width="0.2037%" height="15" fill="rgb(237,157,21)" fg:x="435" fg:w="1"/><text x="88.8447%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="88.5947%" y="37" width="0.2037%" height="15" fill="rgb(222,94,11)" fg:x="435" fg:w="1"/><text x="88.8447%" y="47.50"></text></g><g><title>H5Dopen2 (4 samples, 0.81%)</title><rect x="88.1874%" y="277" width="0.8147%" height="15" fill="rgb(249,113,6)" fg:x="433" fg:w="4"/><text x="88.4374%" y="287.50"></text></g><g><title>H5VL_dataset_open (4 samples, 0.81%)</title><rect x="88.1874%" y="261" width="0.8147%" height="15" fill="rgb(238,137,36)" fg:x="433" fg:w="4"/><text x="88.4374%" y="271.50"></text></g><g><title>H5VL__native_dataset_open (4 samples, 0.81%)</title><rect x="88.1874%" y="245" width="0.8147%" height="15" fill="rgb(210,102,26)" fg:x="433" fg:w="4"/><text x="88.4374%" y="255.50"></text></g><g><title>H5D__open_name (4 samples, 0.81%)</title><rect x="88.1874%" y="229" width="0.8147%" height="15" fill="rgb(218,30,30)" fg:x="433" fg:w="4"/><text x="88.4374%" y="239.50"></text></g><g><title>H5O_obj_type (1 samples, 0.20%)</title><rect x="88.7984%" y="213" width="0.2037%" height="15" fill="rgb(214,67,26)" fg:x="436" fg:w="1"/><text x="89.0484%" y="223.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="88.7984%" y="197" width="0.2037%" height="15" fill="rgb(251,9,53)" fg:x="436" fg:w="1"/><text x="89.0484%" y="207.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="88.7984%" y="181" width="0.2037%" height="15" fill="rgb(228,204,25)" fg:x="436" fg:w="1"/><text x="89.0484%" y="191.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="88.7984%" y="165" width="0.2037%" height="15" fill="rgb(207,153,8)" fg:x="436" fg:w="1"/><text x="89.0484%" y="175.50"></text></g><g><title>H5Dread (2 samples, 0.41%)</title><rect x="89.0020%" y="277" width="0.4073%" height="15" fill="rgb(242,9,16)" fg:x="437" fg:w="2"/><text x="89.2520%" y="287.50"></text></g><g><title>H5VL_dataset_read (2 samples, 0.41%)</title><rect x="89.0020%" y="261" width="0.4073%" height="15" fill="rgb(217,211,10)" fg:x="437" fg:w="2"/><text x="89.2520%" y="271.50"></text></g><g><title>H5VL__native_dataset_read (2 samples, 0.41%)</title><rect x="89.0020%" y="245" width="0.4073%" height="15" fill="rgb(219,228,52)" fg:x="437" fg:w="2"/><text x="89.2520%" y="255.50"></text></g><g><title>H5D__read (2 samples, 0.41%)</title><rect x="89.0020%" y="229" width="0.4073%" height="15" fill="rgb(231,92,29)" fg:x="437" fg:w="2"/><text x="89.2520%" y="239.50"></text></g><g><title>H5D__contig_read (2 samples, 0.41%)</title><rect x="89.0020%" y="213" width="0.4073%" height="15" fill="rgb(232,8,23)" fg:x="437" fg:w="2"/><text x="89.2520%" y="223.50"></text></g><g><title>H5D__select_read (2 samples, 0.41%)</title><rect x="89.0020%" y="197" width="0.4073%" height="15" fill="rgb(216,211,34)" fg:x="437" fg:w="2"/><text x="89.2520%" y="207.50"></text></g><g><title>H5VM_opvv (2 samples, 0.41%)</title><rect x="89.0020%" y="181" width="0.4073%" height="15" fill="rgb(236,151,0)" fg:x="437" fg:w="2"/><text x="89.2520%" y="191.50"></text></g><g><title>H5F_shared_block_read (2 samples, 0.41%)</title><rect x="89.0020%" y="165" width="0.4073%" height="15" fill="rgb(209,168,3)" fg:x="437" fg:w="2"/><text x="89.2520%" y="175.50"></text></g><g><title>H5PB_read (2 samples, 0.41%)</title><rect x="89.0020%" y="149" width="0.4073%" height="15" fill="rgb(208,129,28)" fg:x="437" fg:w="2"/><text x="89.2520%" y="159.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="89.0020%" y="133" width="0.4073%" height="15" fill="rgb(229,78,22)" fg:x="437" fg:w="2"/><text x="89.2520%" y="143.50"></text></g><g><title>H5FD_read (2 samples, 0.41%)</title><rect x="89.0020%" y="117" width="0.4073%" height="15" fill="rgb(228,187,13)" fg:x="437" fg:w="2"/><text x="89.2520%" y="127.50"></text></g><g><title>__libc_pread64 (2 samples, 0.41%)</title><rect x="89.0020%" y="101" width="0.4073%" height="15" fill="rgb(240,119,24)" fg:x="437" fg:w="2"/><text x="89.2520%" y="111.50"></text></g><g><title>H5AC_protect (2 samples, 0.41%)</title><rect x="89.4094%" y="133" width="0.4073%" height="15" fill="rgb(209,194,42)" fg:x="439" fg:w="2"/><text x="89.6594%" y="143.50"></text></g><g><title>H5C_protect (2 samples, 0.41%)</title><rect x="89.4094%" y="117" width="0.4073%" height="15" fill="rgb(247,200,46)" fg:x="439" fg:w="2"/><text x="89.6594%" y="127.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="89.6130%" y="101" width="0.2037%" height="15" fill="rgb(218,76,16)" fg:x="440" fg:w="1"/><text x="89.8630%" y="111.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="89.6130%" y="85" width="0.2037%" height="15" fill="rgb(225,21,48)" fg:x="440" fg:w="1"/><text x="89.8630%" y="95.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="89.6130%" y="69" width="0.2037%" height="15" fill="rgb(239,223,50)" fg:x="440" fg:w="1"/><text x="89.8630%" y="79.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="89.6130%" y="53" width="0.2037%" height="15" fill="rgb(244,45,21)" fg:x="440" fg:w="1"/><text x="89.8630%" y="63.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="89.6130%" y="37" width="0.2037%" height="15" fill="rgb(232,33,43)" fg:x="440" fg:w="1"/><text x="89.8630%" y="47.50"></text></g><g><title>H5B_find (3 samples, 0.61%)</title><rect x="89.4094%" y="149" width="0.6110%" height="15" fill="rgb(209,8,3)" fg:x="439" fg:w="3"/><text x="89.6594%" y="159.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="89.8167%" y="133" width="0.2037%" height="15" fill="rgb(214,25,53)" fg:x="441" fg:w="1"/><text x="90.0667%" y="143.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="89.8167%" y="117" width="0.2037%" height="15" fill="rgb(254,186,54)" fg:x="441" fg:w="1"/><text x="90.0667%" y="127.50"></text></g><g><title>H5G_loc_find (4 samples, 0.81%)</title><rect x="89.4094%" y="213" width="0.8147%" height="15" fill="rgb(208,174,49)" fg:x="439" fg:w="4"/><text x="89.6594%" y="223.50"></text></g><g><title>H5G_traverse (4 samples, 0.81%)</title><rect x="89.4094%" y="197" width="0.8147%" height="15" fill="rgb(233,191,51)" fg:x="439" fg:w="4"/><text x="89.6594%" y="207.50"></text></g><g><title>H5G__obj_lookup (4 samples, 0.81%)</title><rect x="89.4094%" y="181" width="0.8147%" height="15" fill="rgb(222,134,10)" fg:x="439" fg:w="4"/><text x="89.6594%" y="191.50"></text></g><g><title>H5G__stab_lookup (4 samples, 0.81%)</title><rect x="89.4094%" y="165" width="0.8147%" height="15" fill="rgb(230,226,20)" fg:x="439" fg:w="4"/><text x="89.6594%" y="175.50"></text></g><g><title>H5HL_protect (1 samples, 0.20%)</title><rect x="90.0204%" y="149" width="0.2037%" height="15" fill="rgb(251,111,25)" fg:x="442" fg:w="1"/><text x="90.2704%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="90.0204%" y="133" width="0.2037%" height="15" fill="rgb(224,40,46)" fg:x="442" fg:w="1"/><text x="90.2704%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="90.0204%" y="117" width="0.2037%" height="15" fill="rgb(236,108,47)" fg:x="442" fg:w="1"/><text x="90.2704%" y="127.50"></text></g><g><title>H5FL_blk_malloc (1 samples, 0.20%)</title><rect x="90.0204%" y="101" width="0.2037%" height="15" fill="rgb(234,93,0)" fg:x="442" fg:w="1"/><text x="90.2704%" y="111.50"></text></g><g><title>NeuralNetwork::parseConv2DLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (14 samples, 2.85%)</title><rect x="87.7800%" y="293" width="2.8513%" height="15" fill="rgb(224,213,32)" fg:x="431" fg:w="14"/><text x="88.0300%" y="303.50">Ne..</text></g><g><title>H5Gopen2 (6 samples, 1.22%)</title><rect x="89.4094%" y="277" width="1.2220%" height="15" fill="rgb(251,11,48)" fg:x="439" fg:w="6"/><text x="89.6594%" y="287.50"></text></g><g><title>H5VL_group_open (6 samples, 1.22%)</title><rect x="89.4094%" y="261" width="1.2220%" height="15" fill="rgb(236,173,5)" fg:x="439" fg:w="6"/><text x="89.6594%" y="271.50"></text></g><g><title>H5VL__native_group_open (6 samples, 1.22%)</title><rect x="89.4094%" y="245" width="1.2220%" height="15" fill="rgb(230,95,12)" fg:x="439" fg:w="6"/><text x="89.6594%" y="255.50"></text></g><g><title>H5G__open_name (6 samples, 1.22%)</title><rect x="89.4094%" y="229" width="1.2220%" height="15" fill="rgb(232,209,1)" fg:x="439" fg:w="6"/><text x="89.6594%" y="239.50"></text></g><g><title>H5O_obj_type (2 samples, 0.41%)</title><rect x="90.2240%" y="213" width="0.4073%" height="15" fill="rgb(232,6,1)" fg:x="443" fg:w="2"/><text x="90.4740%" y="223.50"></text></g><g><title>H5O_protect (2 samples, 0.41%)</title><rect x="90.2240%" y="197" width="0.4073%" height="15" fill="rgb(210,224,50)" fg:x="443" fg:w="2"/><text x="90.4740%" y="207.50"></text></g><g><title>H5AC_protect (2 samples, 0.41%)</title><rect x="90.2240%" y="181" width="0.4073%" height="15" fill="rgb(228,127,35)" fg:x="443" fg:w="2"/><text x="90.4740%" y="191.50"></text></g><g><title>H5C_protect (2 samples, 0.41%)</title><rect x="90.2240%" y="165" width="0.4073%" height="15" fill="rgb(245,102,45)" fg:x="443" fg:w="2"/><text x="90.4740%" y="175.50"></text></g><g><title>H5F_block_read (2 samples, 0.41%)</title><rect x="90.2240%" y="149" width="0.4073%" height="15" fill="rgb(214,1,49)" fg:x="443" fg:w="2"/><text x="90.4740%" y="159.50"></text></g><g><title>H5PB_read (2 samples, 0.41%)</title><rect x="90.2240%" y="133" width="0.4073%" height="15" fill="rgb(226,163,40)" fg:x="443" fg:w="2"/><text x="90.4740%" y="143.50"></text></g><g><title>H5F__accum_read (2 samples, 0.41%)</title><rect x="90.2240%" y="117" width="0.4073%" height="15" fill="rgb(239,212,28)" fg:x="443" fg:w="2"/><text x="90.4740%" y="127.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="90.4277%" y="101" width="0.2037%" height="15" fill="rgb(220,20,13)" fg:x="444" fg:w="1"/><text x="90.6777%" y="111.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="90.4277%" y="85" width="0.2037%" height="15" fill="rgb(210,164,35)" fg:x="444" fg:w="1"/><text x="90.6777%" y="95.50"></text></g><g><title>H5SL_insert (1 samples, 0.20%)</title><rect x="90.6314%" y="165" width="0.2037%" height="15" fill="rgb(248,109,41)" fg:x="445" fg:w="1"/><text x="90.8814%" y="175.50"></text></g><g><title>H5SL_item (1 samples, 0.20%)</title><rect x="90.8350%" y="165" width="0.2037%" height="15" fill="rgb(238,23,50)" fg:x="446" fg:w="1"/><text x="91.0850%" y="175.50"></text></g><g><title>H5Dclose (3 samples, 0.61%)</title><rect x="90.6314%" y="277" width="0.6110%" height="15" fill="rgb(211,48,49)" fg:x="445" fg:w="3"/><text x="90.8814%" y="287.50"></text></g><g><title>H5I_dec_app_ref_always_close (3 samples, 0.61%)</title><rect x="90.6314%" y="261" width="0.6110%" height="15" fill="rgb(223,36,21)" fg:x="445" fg:w="3"/><text x="90.8814%" y="271.50"></text></g><g><title>H5VL_dataset_close (3 samples, 0.61%)</title><rect x="90.6314%" y="245" width="0.6110%" height="15" fill="rgb(207,123,46)" fg:x="445" fg:w="3"/><text x="90.8814%" y="255.50"></text></g><g><title>H5VL__native_dataset_close (3 samples, 0.61%)</title><rect x="90.6314%" y="229" width="0.6110%" height="15" fill="rgb(240,218,32)" fg:x="445" fg:w="3"/><text x="90.8814%" y="239.50"></text></g><g><title>H5D_close (3 samples, 0.61%)</title><rect x="90.6314%" y="213" width="0.6110%" height="15" fill="rgb(252,5,43)" fg:x="445" fg:w="3"/><text x="90.8814%" y="223.50"></text></g><g><title>H5I_dec_ref (3 samples, 0.61%)</title><rect x="90.6314%" y="197" width="0.6110%" height="15" fill="rgb(252,84,19)" fg:x="445" fg:w="3"/><text x="90.8814%" y="207.50"></text></g><g><title>H5P_close (3 samples, 0.61%)</title><rect x="90.6314%" y="181" width="0.6110%" height="15" fill="rgb(243,152,39)" fg:x="445" fg:w="3"/><text x="90.8814%" y="191.50"></text></g><g><title>H5SL_next (1 samples, 0.20%)</title><rect x="91.0387%" y="165" width="0.2037%" height="15" fill="rgb(234,160,15)" fg:x="447" fg:w="1"/><text x="91.2887%" y="175.50"></text></g><g><title>H5Dopen2 (1 samples, 0.20%)</title><rect x="91.2424%" y="277" width="0.2037%" height="15" fill="rgb(237,34,20)" fg:x="448" fg:w="1"/><text x="91.4924%" y="287.50"></text></g><g><title>H5VL_dataset_open (1 samples, 0.20%)</title><rect x="91.2424%" y="261" width="0.2037%" height="15" fill="rgb(229,97,13)" fg:x="448" fg:w="1"/><text x="91.4924%" y="271.50"></text></g><g><title>H5VL__native_dataset_open (1 samples, 0.20%)</title><rect x="91.2424%" y="245" width="0.2037%" height="15" fill="rgb(234,71,50)" fg:x="448" fg:w="1"/><text x="91.4924%" y="255.50"></text></g><g><title>H5D__open_name (1 samples, 0.20%)</title><rect x="91.2424%" y="229" width="0.2037%" height="15" fill="rgb(253,155,4)" fg:x="448" fg:w="1"/><text x="91.4924%" y="239.50"></text></g><g><title>H5D_open (1 samples, 0.20%)</title><rect x="91.2424%" y="213" width="0.2037%" height="15" fill="rgb(222,185,37)" fg:x="448" fg:w="1"/><text x="91.4924%" y="223.50"></text></g><g><title>H5P_copy_plist (1 samples, 0.20%)</title><rect x="91.2424%" y="197" width="0.2037%" height="15" fill="rgb(251,177,13)" fg:x="448" fg:w="1"/><text x="91.4924%" y="207.50"></text></g><g><title>H5SL_search (1 samples, 0.20%)</title><rect x="91.2424%" y="181" width="0.2037%" height="15" fill="rgb(250,179,40)" fg:x="448" fg:w="1"/><text x="91.4924%" y="191.50"></text></g><g><title>H5VL__native_dataset_read (3 samples, 0.61%)</title><rect x="91.4460%" y="245" width="0.6110%" height="15" fill="rgb(242,44,2)" fg:x="449" fg:w="3"/><text x="91.6960%" y="255.50"></text></g><g><title>H5D__read (3 samples, 0.61%)</title><rect x="91.4460%" y="229" width="0.6110%" height="15" fill="rgb(216,177,13)" fg:x="449" fg:w="3"/><text x="91.6960%" y="239.50"></text></g><g><title>H5D__contig_read (2 samples, 0.41%)</title><rect x="91.6497%" y="213" width="0.4073%" height="15" fill="rgb(216,106,43)" fg:x="450" fg:w="2"/><text x="91.8997%" y="223.50"></text></g><g><title>H5D__select_read (2 samples, 0.41%)</title><rect x="91.6497%" y="197" width="0.4073%" height="15" fill="rgb(216,183,2)" fg:x="450" fg:w="2"/><text x="91.8997%" y="207.50"></text></g><g><title>H5VM_opvv (2 samples, 0.41%)</title><rect x="91.6497%" y="181" width="0.4073%" height="15" fill="rgb(249,75,3)" fg:x="450" fg:w="2"/><text x="91.8997%" y="191.50"></text></g><g><title>H5F_shared_block_read (1 samples, 0.20%)</title><rect x="91.8534%" y="165" width="0.2037%" height="15" fill="rgb(219,67,39)" fg:x="451" fg:w="1"/><text x="92.1034%" y="175.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="91.8534%" y="149" width="0.2037%" height="15" fill="rgb(253,228,2)" fg:x="451" fg:w="1"/><text x="92.1034%" y="159.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="91.8534%" y="133" width="0.2037%" height="15" fill="rgb(235,138,27)" fg:x="451" fg:w="1"/><text x="92.1034%" y="143.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="91.8534%" y="117" width="0.2037%" height="15" fill="rgb(236,97,51)" fg:x="451" fg:w="1"/><text x="92.1034%" y="127.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="91.8534%" y="101" width="0.2037%" height="15" fill="rgb(240,80,30)" fg:x="451" fg:w="1"/><text x="92.1034%" y="111.50"></text></g><g><title>H5Dread (4 samples, 0.81%)</title><rect x="91.4460%" y="277" width="0.8147%" height="15" fill="rgb(230,178,19)" fg:x="449" fg:w="4"/><text x="91.6960%" y="287.50"></text></g><g><title>H5VL_dataset_read (4 samples, 0.81%)</title><rect x="91.4460%" y="261" width="0.8147%" height="15" fill="rgb(210,190,27)" fg:x="449" fg:w="4"/><text x="91.6960%" y="271.50"></text></g><g><title>H5VL_set_vol_wrapper (1 samples, 0.20%)</title><rect x="92.0570%" y="245" width="0.2037%" height="15" fill="rgb(222,107,31)" fg:x="452" fg:w="1"/><text x="92.3070%" y="255.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="92.4644%" y="181" width="0.2037%" height="15" fill="rgb(216,127,34)" fg:x="454" fg:w="1"/><text x="92.7144%" y="191.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="92.4644%" y="165" width="0.2037%" height="15" fill="rgb(234,116,52)" fg:x="454" fg:w="1"/><text x="92.7144%" y="175.50"></text></g><g><title>H5HL_protect (1 samples, 0.20%)</title><rect x="92.4644%" y="149" width="0.2037%" height="15" fill="rgb(222,124,15)" fg:x="454" fg:w="1"/><text x="92.7144%" y="159.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="92.4644%" y="133" width="0.2037%" height="15" fill="rgb(231,179,28)" fg:x="454" fg:w="1"/><text x="92.7144%" y="143.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="92.4644%" y="117" width="0.2037%" height="15" fill="rgb(226,93,45)" fg:x="454" fg:w="1"/><text x="92.7144%" y="127.50"></text></g><g><title>H5G_loc_find (2 samples, 0.41%)</title><rect x="92.4644%" y="213" width="0.4073%" height="15" fill="rgb(215,8,51)" fg:x="454" fg:w="2"/><text x="92.7144%" y="223.50"></text></g><g><title>H5G_traverse (2 samples, 0.41%)</title><rect x="92.4644%" y="197" width="0.4073%" height="15" fill="rgb(223,106,5)" fg:x="454" fg:w="2"/><text x="92.7144%" y="207.50"></text></g><g><title>H5WB_wrap (1 samples, 0.20%)</title><rect x="92.6680%" y="181" width="0.2037%" height="15" fill="rgb(250,191,5)" fg:x="455" fg:w="1"/><text x="92.9180%" y="191.50"></text></g><g><title>NeuralNetwork::parseDenseLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (12 samples, 2.44%)</title><rect x="90.6314%" y="293" width="2.4440%" height="15" fill="rgb(242,132,44)" fg:x="445" fg:w="12"/><text x="90.8814%" y="303.50">Ne..</text></g><g><title>H5Gopen2 (4 samples, 0.81%)</title><rect x="92.2607%" y="277" width="0.8147%" height="15" fill="rgb(251,152,29)" fg:x="453" fg:w="4"/><text x="92.5107%" y="287.50"></text></g><g><title>H5VL_group_open (3 samples, 0.61%)</title><rect x="92.4644%" y="261" width="0.6110%" height="15" fill="rgb(218,179,5)" fg:x="454" fg:w="3"/><text x="92.7144%" y="271.50"></text></g><g><title>H5VL__native_group_open (3 samples, 0.61%)</title><rect x="92.4644%" y="245" width="0.6110%" height="15" fill="rgb(227,67,19)" fg:x="454" fg:w="3"/><text x="92.7144%" y="255.50"></text></g><g><title>H5G__open_name (3 samples, 0.61%)</title><rect x="92.4644%" y="229" width="0.6110%" height="15" fill="rgb(233,119,31)" fg:x="454" fg:w="3"/><text x="92.7144%" y="239.50"></text></g><g><title>H5O_obj_type (1 samples, 0.20%)</title><rect x="92.8717%" y="213" width="0.2037%" height="15" fill="rgb(241,120,22)" fg:x="456" fg:w="1"/><text x="93.1217%" y="223.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="92.8717%" y="197" width="0.2037%" height="15" fill="rgb(224,102,30)" fg:x="456" fg:w="1"/><text x="93.1217%" y="207.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="92.8717%" y="181" width="0.2037%" height="15" fill="rgb(210,164,37)" fg:x="456" fg:w="1"/><text x="93.1217%" y="191.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="92.8717%" y="165" width="0.2037%" height="15" fill="rgb(226,191,16)" fg:x="456" fg:w="1"/><text x="93.1217%" y="175.50"></text></g><g><title>NeuralNetwork::parseFlattenLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="93.0754%" y="293" width="0.2037%" height="15" fill="rgb(214,40,45)" fg:x="457" fg:w="1"/><text x="93.3254%" y="303.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; NeuralNetwork::getLiteral&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(SimpleMap::Literal const*) (1 samples, 0.20%)</title><rect x="93.0754%" y="277" width="0.2037%" height="15" fill="rgb(244,29,26)" fg:x="457" fg:w="1"/><text x="93.3254%" y="287.50"></text></g><g><title>InText::skipWhitespace(PhysicalInStream&amp;) (1 samples, 0.20%)</title><rect x="93.0754%" y="261" width="0.2037%" height="15" fill="rgb(216,16,5)" fg:x="457" fg:w="1"/><text x="93.3254%" y="271.50"></text></g><g><title>NeuralNetwork::parseMaxPooling2DLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="93.2790%" y="293" width="0.2037%" height="15" fill="rgb(249,76,35)" fg:x="458" fg:w="1"/><text x="93.5290%" y="303.50"></text></g><g><title>NeuralNetwork::parsePooling2DLayer(SimpleMap::Record const*, NeuralNetwork::PoolingMethod, unsigned long) (1 samples, 0.20%)</title><rect x="93.2790%" y="277" width="0.2037%" height="15" fill="rgb(207,11,44)" fg:x="458" fg:w="1"/><text x="93.5290%" y="287.50"></text></g><g><title>unsigned int NeuralNetwork::getLiteral&lt;unsigned int&gt;(SimpleMap::Literal const*) (1 samples, 0.20%)</title><rect x="93.2790%" y="261" width="0.2037%" height="15" fill="rgb(228,190,49)" fg:x="458" fg:w="1"/><text x="93.5290%" y="271.50"></text></g><g><title>SimpleMap::nextSymbol() (1 samples, 0.20%)</title><rect x="93.4827%" y="213" width="0.2037%" height="15" fill="rgb(214,173,12)" fg:x="459" fg:w="1"/><text x="93.7327%" y="223.50"></text></g><g><title>SimpleMap::nextChar() (1 samples, 0.20%)</title><rect x="93.4827%" y="197" width="0.2037%" height="15" fill="rgb(218,26,35)" fg:x="459" fg:w="1"/><text x="93.7327%" y="207.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (1 samples, 0.20%)</title><rect x="94.0937%" y="181" width="0.2037%" height="15" fill="rgb(220,200,19)" fg:x="462" fg:w="1"/><text x="94.3437%" y="191.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="94.0937%" y="165" width="0.2037%" height="15" fill="rgb(239,95,49)" fg:x="462" fg:w="1"/><text x="94.3437%" y="175.50"></text></g><g><title>SimpleMap::nextSymbol() (3 samples, 0.61%)</title><rect x="94.0937%" y="197" width="0.6110%" height="15" fill="rgb(235,85,53)" fg:x="462" fg:w="3"/><text x="94.3437%" y="207.50"></text></g><g><title>SimpleMap::nextChar() (2 samples, 0.41%)</title><rect x="94.2974%" y="181" width="0.4073%" height="15" fill="rgb(233,133,31)" fg:x="463" fg:w="2"/><text x="94.5474%" y="191.50"></text></g><g><title>SimpleMap::parseArray() (1 samples, 0.20%)</title><rect x="94.7047%" y="197" width="0.2037%" height="15" fill="rgb(218,25,20)" fg:x="465" fg:w="1"/><text x="94.9547%" y="207.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="94.7047%" y="181" width="0.2037%" height="15" fill="rgb(252,210,38)" fg:x="465" fg:w="1"/><text x="94.9547%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="94.7047%" y="165" width="0.2037%" height="15" fill="rgb(242,134,21)" fg:x="465" fg:w="1"/><text x="94.9547%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="94.7047%" y="149" width="0.2037%" height="15" fill="rgb(213,28,48)" fg:x="465" fg:w="1"/><text x="94.9547%" y="159.50"></text></g><g><title>SimpleMap::nextChar() (1 samples, 0.20%)</title><rect x="94.9084%" y="165" width="0.2037%" height="15" fill="rgb(250,196,2)" fg:x="466" fg:w="1"/><text x="95.1584%" y="175.50"></text></g><g><title>SimpleMap::parseRecord() (2 samples, 0.41%)</title><rect x="94.9084%" y="197" width="0.4073%" height="15" fill="rgb(227,5,17)" fg:x="466" fg:w="2"/><text x="95.1584%" y="207.50"></text></g><g><title>SimpleMap::nextSymbol() (2 samples, 0.41%)</title><rect x="94.9084%" y="181" width="0.4073%" height="15" fill="rgb(221,226,24)" fg:x="466" fg:w="2"/><text x="95.1584%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.20%)</title><rect x="95.1120%" y="165" width="0.2037%" height="15" fill="rgb(211,5,48)" fg:x="467" fg:w="1"/><text x="95.3620%" y="175.50"></text></g><g><title>SimpleMap::parseRecord() (9 samples, 1.83%)</title><rect x="93.6864%" y="213" width="1.8330%" height="15" fill="rgb(219,150,6)" fg:x="460" fg:w="9"/><text x="93.9364%" y="223.50">S..</text></g><g><title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[](std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.20%)</title><rect x="95.3157%" y="197" width="0.2037%" height="15" fill="rgb(251,46,16)" fg:x="468" fg:w="1"/><text x="95.5657%" y="207.50"></text></g><g><title>SimpleMap::SimpleMap(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool) (11 samples, 2.24%)</title><rect x="93.4827%" y="293" width="2.2403%" height="15" fill="rgb(220,204,40)" fg:x="459" fg:w="11"/><text x="93.7327%" y="303.50">S..</text></g><g><title>SimpleMap::parseRecord() (11 samples, 2.24%)</title><rect x="93.4827%" y="277" width="2.2403%" height="15" fill="rgb(211,85,2)" fg:x="459" fg:w="11"/><text x="93.7327%" y="287.50">S..</text></g><g><title>SimpleMap::parseRecord() (11 samples, 2.24%)</title><rect x="93.4827%" y="261" width="2.2403%" height="15" fill="rgb(229,17,7)" fg:x="459" fg:w="11"/><text x="93.7327%" y="271.50">S..</text></g><g><title>SimpleMap::parseArray() (11 samples, 2.24%)</title><rect x="93.4827%" y="245" width="2.2403%" height="15" fill="rgb(239,72,28)" fg:x="459" fg:w="11"/><text x="93.7327%" y="255.50">S..</text></g><g><title>SimpleMap::parseRecord() (11 samples, 2.24%)</title><rect x="93.4827%" y="229" width="2.2403%" height="15" fill="rgb(230,47,54)" fg:x="459" fg:w="11"/><text x="93.7327%" y="239.50">S..</text></g><g><title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SimpleMap::Value*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[](std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.20%)</title><rect x="95.5193%" y="213" width="0.2037%" height="15" fill="rgb(214,50,8)" fg:x="469" fg:w="1"/><text x="95.7693%" y="223.50"></text></g><g><title>SimpleMap::~SimpleMap() (1 samples, 0.20%)</title><rect x="95.7230%" y="293" width="0.2037%" height="15" fill="rgb(216,198,43)" fg:x="470" fg:w="1"/><text x="95.9730%" y="303.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="277" width="0.2037%" height="15" fill="rgb(234,20,35)" fg:x="470" fg:w="1"/><text x="95.9730%" y="287.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="261" width="0.2037%" height="15" fill="rgb(254,45,19)" fg:x="470" fg:w="1"/><text x="95.9730%" y="271.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="245" width="0.2037%" height="15" fill="rgb(219,14,44)" fg:x="470" fg:w="1"/><text x="95.9730%" y="255.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="229" width="0.2037%" height="15" fill="rgb(217,220,26)" fg:x="470" fg:w="1"/><text x="95.9730%" y="239.50"></text></g><g><title>SimpleMap::Array::~Array() (1 samples, 0.20%)</title><rect x="95.7230%" y="213" width="0.2037%" height="15" fill="rgb(213,158,28)" fg:x="470" fg:w="1"/><text x="95.9730%" y="223.50"></text></g><g><title>SimpleMap::Array::~Array() (1 samples, 0.20%)</title><rect x="95.7230%" y="197" width="0.2037%" height="15" fill="rgb(252,51,52)" fg:x="470" fg:w="1"/><text x="95.9730%" y="207.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="181" width="0.2037%" height="15" fill="rgb(246,89,16)" fg:x="470" fg:w="1"/><text x="95.9730%" y="191.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="165" width="0.2037%" height="15" fill="rgb(216,158,49)" fg:x="470" fg:w="1"/><text x="95.9730%" y="175.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="149" width="0.2037%" height="15" fill="rgb(236,107,19)" fg:x="470" fg:w="1"/><text x="95.9730%" y="159.50"></text></g><g><title>SimpleMap::Record::~Record() (1 samples, 0.20%)</title><rect x="95.7230%" y="133" width="0.2037%" height="15" fill="rgb(228,185,30)" fg:x="470" fg:w="1"/><text x="95.9730%" y="143.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="95.7230%" y="117" width="0.2037%" height="15" fill="rgb(246,134,8)" fg:x="470" fg:w="1"/><text x="95.9730%" y="127.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="95.7230%" y="101" width="0.2037%" height="15" fill="rgb(214,143,50)" fg:x="470" fg:w="1"/><text x="95.9730%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (150 samples, 30.55%)</title><rect x="65.5804%" y="437" width="30.5499%" height="15" fill="rgb(228,75,8)" fg:x="322" fg:w="150"/><text x="65.8304%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (150 samples, 30.55%)</title><rect x="65.5804%" y="421" width="30.5499%" height="15" fill="rgb(207,175,4)" fg:x="322" fg:w="150"/><text x="65.8304%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::ite..</text></g><g><title>nn_backend_test::nn_runners::compiled_nn_runner::CompiledNNRunner::new (150 samples, 30.55%)</title><rect x="65.5804%" y="405" width="30.5499%" height="15" fill="rgb(205,108,24)" fg:x="322" fg:w="150"/><text x="65.8304%" y="415.50">nn_backend_test::nn_runners::compiled_nn_runner::..</text></g><g><title>compiled_nn::compiled_nn::CompiledNN::compile (150 samples, 30.55%)</title><rect x="65.5804%" y="389" width="30.5499%" height="15" fill="rgb(244,120,49)" fg:x="322" fg:w="150"/><text x="65.8304%" y="399.50">compiled_nn::compiled_nn::CompiledNN::compile</text></g><g><title>CompiledNN::compile(char const*) (150 samples, 30.55%)</title><rect x="65.5804%" y="373" width="30.5499%" height="15" fill="rgb(223,47,38)" fg:x="322" fg:w="150"/><text x="65.8304%" y="383.50">CompiledNN::compile(char const*)</text></g><g><title>NeuralNetwork::CompiledNN::compile(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (150 samples, 30.55%)</title><rect x="65.5804%" y="357" width="30.5499%" height="15" fill="rgb(229,179,11)" fg:x="322" fg:w="150"/><text x="65.8304%" y="367.50">NeuralNetwork::CompiledNN::compile(std::__cxx11::..</text></g><g><title>NeuralNetwork::Model::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (120 samples, 24.44%)</title><rect x="71.6904%" y="341" width="24.4399%" height="15" fill="rgb(231,122,1)" fg:x="352" fg:w="120"/><text x="71.9404%" y="351.50">NeuralNetwork::Model::load(std::__cxx11..</text></g><g><title>NeuralNetwork::KerasHDF5::read(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (120 samples, 24.44%)</title><rect x="71.6904%" y="325" width="24.4399%" height="15" fill="rgb(245,119,9)" fg:x="352" fg:w="120"/><text x="71.9404%" y="335.50">NeuralNetwork::KerasHDF5::read(std::__c..</text></g><g><title>NeuralNetwork::KerasHDF5::parseJSONModel(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (90 samples, 18.33%)</title><rect x="77.8004%" y="309" width="18.3299%" height="15" fill="rgb(241,163,25)" fg:x="382" fg:w="90"/><text x="78.0504%" y="319.50">NeuralNetwork::KerasHDF5::par..</text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;NeuralNetwork::Layer, std::default_delete&lt;NeuralNetwork::Layer&gt; &gt; (*)(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long)&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;NeuralNetwork::Layer, std::default_delete&lt;NeuralNetwork::Layer&gt; &gt; (*)(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long)&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;NeuralNetwork::Layer, std::default_delete&lt;NeuralNetwork::Layer&gt; &gt; (*)(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long)&gt;, true&gt;*, unsigned long) (1 samples, 0.20%)</title><rect x="95.9267%" y="293" width="0.2037%" height="15" fill="rgb(217,214,3)" fg:x="471" fg:w="1"/><text x="96.1767%" y="303.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;NeuralNetwork::Layer, std::default_delete&lt;NeuralNetwork::Layer&gt; &gt; (*)(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long)&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;NeuralNetwork::Layer, std::default_delete&lt;NeuralNetwork::Layer&gt; &gt; (*)(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long)&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash(unsigned long, unsigned long const&amp;) (1 samples, 0.20%)</title><rect x="95.9267%" y="277" width="0.2037%" height="15" fill="rgb(240,86,28)" fg:x="471" fg:w="1"/><text x="96.1767%" y="287.50"></text></g><g><title>NeuralNetwork::CompiledNN::generateCode(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt; const&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, NeuralNetwork::CompiledNNImpl::ActivationFunctionHandler&amp;) (2 samples, 0.41%)</title><rect x="96.1303%" y="341" width="0.4073%" height="15" fill="rgb(215,47,9)" fg:x="472" fg:w="2"/><text x="96.3803%" y="351.50"></text></g><g><title>asmjit::_abi_1_8::BaseAssembler::embedDataArray(asmjit::_abi_1_8::TypeId, void const*, unsigned long, unsigned long) (2 samples, 0.41%)</title><rect x="96.1303%" y="325" width="0.4073%" height="15" fill="rgb(252,25,45)" fg:x="472" fg:w="2"/><text x="96.3803%" y="335.50"></text></g><g><title>NeuralNetwork::CompiledNN::compile(NeuralNetwork::Model const&amp;, NeuralNetwork::CompilationSettings const&amp;) (3 samples, 0.61%)</title><rect x="96.1303%" y="373" width="0.6110%" height="15" fill="rgb(251,164,9)" fg:x="472" fg:w="3"/><text x="96.3803%" y="383.50"></text></g><g><title>NeuralNetwork::CompiledNN::compilerBackend(std::__cxx11::list&lt;NeuralNetwork::CompiledNN::Operation, std::allocator&lt;NeuralNetwork::CompiledNN::Operation&gt; &gt;&amp;, std::unordered_map&lt;std::type_index, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt;, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, std::vector&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler, std::default_delete&lt;NeuralNetwork::CompiledNNImpl::OperationCompiler&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, std::vector&lt;NeuralNetwork::CompiledNN::OperandLocation, std::allocator&lt;NeuralNetwork::CompiledNN::OperandLocation&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (3 samples, 0.61%)</title><rect x="96.1303%" y="357" width="0.6110%" height="15" fill="rgb(233,194,0)" fg:x="472" fg:w="3"/><text x="96.3803%" y="367.50"></text></g><g><title>NeuralNetwork::CompiledNNImpl::DenseCompiler::initialize() (1 samples, 0.20%)</title><rect x="96.5377%" y="341" width="0.2037%" height="15" fill="rgb(249,111,24)" fg:x="474" fg:w="1"/><text x="96.7877%" y="351.50"></text></g><g><title>H5Dvlen_reclaim (1 samples, 0.20%)</title><rect x="96.7413%" y="341" width="0.2037%" height="15" fill="rgb(250,223,3)" fg:x="475" fg:w="1"/><text x="96.9913%" y="351.50"></text></g><g><title>H5T_reclaim (1 samples, 0.20%)</title><rect x="96.7413%" y="325" width="0.2037%" height="15" fill="rgb(236,178,37)" fg:x="475" fg:w="1"/><text x="96.9913%" y="335.50"></text></g><g><title>H5S_select_iterate (1 samples, 0.20%)</title><rect x="96.7413%" y="309" width="0.2037%" height="15" fill="rgb(241,158,50)" fg:x="475" fg:w="1"/><text x="96.9913%" y="319.50"></text></g><g><title>H5FL_reg_malloc (1 samples, 0.20%)</title><rect x="96.7413%" y="293" width="0.2037%" height="15" fill="rgb(213,121,41)" fg:x="475" fg:w="1"/><text x="96.9913%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="96.7413%" y="277" width="0.2037%" height="15" fill="rgb(240,92,3)" fg:x="475" fg:w="1"/><text x="96.9913%" y="287.50"></text></g><g><title>_int_malloc (1 samples, 0.20%)</title><rect x="96.7413%" y="261" width="0.2037%" height="15" fill="rgb(205,123,3)" fg:x="475" fg:w="1"/><text x="96.9913%" y="271.50"></text></g><g><title>H5Fclose (1 samples, 0.20%)</title><rect x="96.9450%" y="341" width="0.2037%" height="15" fill="rgb(205,97,47)" fg:x="476" fg:w="1"/><text x="97.1950%" y="351.50"></text></g><g><title>H5I_dec_app_ref (1 samples, 0.20%)</title><rect x="96.9450%" y="325" width="0.2037%" height="15" fill="rgb(247,152,14)" fg:x="476" fg:w="1"/><text x="97.1950%" y="335.50"></text></g><g><title>H5VL_file_close (1 samples, 0.20%)</title><rect x="96.9450%" y="309" width="0.2037%" height="15" fill="rgb(248,195,53)" fg:x="476" fg:w="1"/><text x="97.1950%" y="319.50"></text></g><g><title>H5VL__native_file_close (1 samples, 0.20%)</title><rect x="96.9450%" y="293" width="0.2037%" height="15" fill="rgb(226,201,16)" fg:x="476" fg:w="1"/><text x="97.1950%" y="303.50"></text></g><g><title>H5F__close (1 samples, 0.20%)</title><rect x="96.9450%" y="277" width="0.2037%" height="15" fill="rgb(205,98,0)" fg:x="476" fg:w="1"/><text x="97.1950%" y="287.50"></text></g><g><title>H5F_try_close (1 samples, 0.20%)</title><rect x="96.9450%" y="261" width="0.2037%" height="15" fill="rgb(214,191,48)" fg:x="476" fg:w="1"/><text x="97.1950%" y="271.50"></text></g><g><title>H5I_dec_ref (1 samples, 0.20%)</title><rect x="96.9450%" y="245" width="0.2037%" height="15" fill="rgb(237,112,39)" fg:x="476" fg:w="1"/><text x="97.1950%" y="255.50"></text></g><g><title>H5P_close (1 samples, 0.20%)</title><rect x="96.9450%" y="229" width="0.2037%" height="15" fill="rgb(247,203,27)" fg:x="476" fg:w="1"/><text x="97.1950%" y="239.50"></text></g><g><title>H5SL_close (1 samples, 0.20%)</title><rect x="96.9450%" y="213" width="0.2037%" height="15" fill="rgb(235,124,28)" fg:x="476" fg:w="1"/><text x="97.1950%" y="223.50"></text></g><g><title>H5FL_fac_free (1 samples, 0.20%)</title><rect x="96.9450%" y="197" width="0.2037%" height="15" fill="rgb(208,207,46)" fg:x="476" fg:w="1"/><text x="97.1950%" y="207.50"></text></g><g><title>H5close (1 samples, 0.20%)</title><rect x="97.1487%" y="341" width="0.2037%" height="15" fill="rgb(234,176,4)" fg:x="477" fg:w="1"/><text x="97.3987%" y="351.50"></text></g><g><title>H5FL_term_package (1 samples, 0.20%)</title><rect x="97.1487%" y="325" width="0.2037%" height="15" fill="rgb(230,133,28)" fg:x="477" fg:w="1"/><text x="97.3987%" y="335.50"></text></g><g><title>H5FL_garbage_coll (1 samples, 0.20%)</title><rect x="97.1487%" y="309" width="0.2037%" height="15" fill="rgb(211,137,40)" fg:x="477" fg:w="1"/><text x="97.3987%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 0.20%)</title><rect x="97.1487%" y="293" width="0.2037%" height="15" fill="rgb(254,35,13)" fg:x="477" fg:w="1"/><text x="97.3987%" y="303.50"></text></g><g><title>_int_free (1 samples, 0.20%)</title><rect x="97.1487%" y="277" width="0.2037%" height="15" fill="rgb(225,49,51)" fg:x="477" fg:w="1"/><text x="97.3987%" y="287.50"></text></g><g><title>unlink_chunk (1 samples, 0.20%)</title><rect x="97.1487%" y="261" width="0.2037%" height="15" fill="rgb(251,10,15)" fg:x="477" fg:w="1"/><text x="97.3987%" y="271.50"></text></g><g><title>H5open (1 samples, 0.20%)</title><rect x="97.3523%" y="341" width="0.2037%" height="15" fill="rgb(228,207,15)" fg:x="478" fg:w="1"/><text x="97.6023%" y="351.50"></text></g><g><title>H5_init_library (1 samples, 0.20%)</title><rect x="97.3523%" y="325" width="0.2037%" height="15" fill="rgb(241,99,19)" fg:x="478" fg:w="1"/><text x="97.6023%" y="335.50"></text></g><g><title>H5VL_init_phase2 (1 samples, 0.20%)</title><rect x="97.3523%" y="309" width="0.2037%" height="15" fill="rgb(207,104,49)" fg:x="478" fg:w="1"/><text x="97.6023%" y="319.50"></text></g><g><title>H5T_init (1 samples, 0.20%)</title><rect x="97.3523%" y="293" width="0.2037%" height="15" fill="rgb(234,99,18)" fg:x="478" fg:w="1"/><text x="97.6023%" y="303.50"></text></g><g><title>H5Aopen (1 samples, 0.20%)</title><rect x="97.7597%" y="309" width="0.2037%" height="15" fill="rgb(213,191,49)" fg:x="480" fg:w="1"/><text x="98.0097%" y="319.50"></text></g><g><title>H5VL_attr_open (1 samples, 0.20%)</title><rect x="97.7597%" y="293" width="0.2037%" height="15" fill="rgb(210,226,19)" fg:x="480" fg:w="1"/><text x="98.0097%" y="303.50"></text></g><g><title>H5VL__native_attr_open (1 samples, 0.20%)</title><rect x="97.7597%" y="277" width="0.2037%" height="15" fill="rgb(229,97,18)" fg:x="480" fg:w="1"/><text x="98.0097%" y="287.50"></text></g><g><title>H5A__open (1 samples, 0.20%)</title><rect x="97.7597%" y="261" width="0.2037%" height="15" fill="rgb(211,167,15)" fg:x="480" fg:w="1"/><text x="98.0097%" y="271.50"></text></g><g><title>H5O__attr_open_by_name (1 samples, 0.20%)</title><rect x="97.7597%" y="245" width="0.2037%" height="15" fill="rgb(210,169,34)" fg:x="480" fg:w="1"/><text x="98.0097%" y="255.50"></text></g><g><title>H5F_get_obj_count (1 samples, 0.20%)</title><rect x="97.7597%" y="229" width="0.2037%" height="15" fill="rgb(241,121,31)" fg:x="480" fg:w="1"/><text x="98.0097%" y="239.50"></text></g><g><title>H5I_iterate (1 samples, 0.20%)</title><rect x="97.7597%" y="213" width="0.2037%" height="15" fill="rgb(232,40,11)" fg:x="480" fg:w="1"/><text x="98.0097%" y="223.50"></text></g><g><title>H5Dget_space (1 samples, 0.20%)</title><rect x="97.9633%" y="309" width="0.2037%" height="15" fill="rgb(205,86,26)" fg:x="481" fg:w="1"/><text x="98.2133%" y="319.50"></text></g><g><title>H5VL_dataset_get (1 samples, 0.20%)</title><rect x="97.9633%" y="293" width="0.2037%" height="15" fill="rgb(231,126,28)" fg:x="481" fg:w="1"/><text x="98.2133%" y="303.50"></text></g><g><title>H5VL__native_dataset_get (1 samples, 0.20%)</title><rect x="97.9633%" y="277" width="0.2037%" height="15" fill="rgb(219,221,18)" fg:x="481" fg:w="1"/><text x="98.2133%" y="287.50"></text></g><g><title>H5D__get_space (1 samples, 0.20%)</title><rect x="97.9633%" y="261" width="0.2037%" height="15" fill="rgb(211,40,0)" fg:x="481" fg:w="1"/><text x="98.2133%" y="271.50"></text></g><g><title>H5S_copy (1 samples, 0.20%)</title><rect x="97.9633%" y="245" width="0.2037%" height="15" fill="rgb(239,85,43)" fg:x="481" fg:w="1"/><text x="98.2133%" y="255.50"></text></g><g><title>H5S_select_copy (1 samples, 0.20%)</title><rect x="97.9633%" y="229" width="0.2037%" height="15" fill="rgb(231,55,21)" fg:x="481" fg:w="1"/><text x="98.2133%" y="239.50"></text></g><g><title>H5S_select_release (1 samples, 0.20%)</title><rect x="97.9633%" y="213" width="0.2037%" height="15" fill="rgb(225,184,43)" fg:x="481" fg:w="1"/><text x="98.2133%" y="223.50"></text></g><g><title>H5Dopen2 (1 samples, 0.20%)</title><rect x="98.1670%" y="309" width="0.2037%" height="15" fill="rgb(251,158,41)" fg:x="482" fg:w="1"/><text x="98.4170%" y="319.50"></text></g><g><title>H5VL_dataset_open (1 samples, 0.20%)</title><rect x="98.1670%" y="293" width="0.2037%" height="15" fill="rgb(234,159,37)" fg:x="482" fg:w="1"/><text x="98.4170%" y="303.50"></text></g><g><title>H5VL__native_dataset_open (1 samples, 0.20%)</title><rect x="98.1670%" y="277" width="0.2037%" height="15" fill="rgb(216,204,22)" fg:x="482" fg:w="1"/><text x="98.4170%" y="287.50"></text></g><g><title>H5D__open_name (1 samples, 0.20%)</title><rect x="98.1670%" y="261" width="0.2037%" height="15" fill="rgb(214,17,3)" fg:x="482" fg:w="1"/><text x="98.4170%" y="271.50"></text></g><g><title>H5D_open (1 samples, 0.20%)</title><rect x="98.1670%" y="245" width="0.2037%" height="15" fill="rgb(212,111,17)" fg:x="482" fg:w="1"/><text x="98.4170%" y="255.50"></text></g><g><title>H5I_object (1 samples, 0.20%)</title><rect x="98.1670%" y="229" width="0.2037%" height="15" fill="rgb(221,157,24)" fg:x="482" fg:w="1"/><text x="98.4170%" y="239.50"></text></g><g><title>H5I__find_id (1 samples, 0.20%)</title><rect x="98.1670%" y="213" width="0.2037%" height="15" fill="rgb(252,16,13)" fg:x="482" fg:w="1"/><text x="98.4170%" y="223.50"></text></g><g><title>H5G__link_to_loc (1 samples, 0.20%)</title><rect x="98.3707%" y="213" width="0.2037%" height="15" fill="rgb(221,62,2)" fg:x="483" fg:w="1"/><text x="98.6207%" y="223.50"></text></g><g><title>H5G_name_set (1 samples, 0.20%)</title><rect x="98.3707%" y="197" width="0.2037%" height="15" fill="rgb(247,87,22)" fg:x="483" fg:w="1"/><text x="98.6207%" y="207.50"></text></g><g><title>H5G_build_fullpath_refstr_str (1 samples, 0.20%)</title><rect x="98.3707%" y="181" width="0.2037%" height="15" fill="rgb(215,73,9)" fg:x="483" fg:w="1"/><text x="98.6207%" y="191.50"></text></g><g><title>H5RS_get_str (1 samples, 0.20%)</title><rect x="98.3707%" y="165" width="0.2037%" height="15" fill="rgb(207,175,33)" fg:x="483" fg:w="1"/><text x="98.6207%" y="175.50"></text></g><g><title>H5G_loc_find (2 samples, 0.41%)</title><rect x="98.3707%" y="245" width="0.4073%" height="15" fill="rgb(243,129,54)" fg:x="483" fg:w="2"/><text x="98.6207%" y="255.50"></text></g><g><title>H5G_traverse (2 samples, 0.41%)</title><rect x="98.3707%" y="229" width="0.4073%" height="15" fill="rgb(227,119,45)" fg:x="483" fg:w="2"/><text x="98.6207%" y="239.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="98.5743%" y="213" width="0.2037%" height="15" fill="rgb(205,109,36)" fg:x="484" fg:w="1"/><text x="98.8243%" y="223.50"></text></g><g><title>H5G__stab_lookup (1 samples, 0.20%)</title><rect x="98.5743%" y="197" width="0.2037%" height="15" fill="rgb(205,6,39)" fg:x="484" fg:w="1"/><text x="98.8243%" y="207.50"></text></g><g><title>H5O_msg_read (1 samples, 0.20%)</title><rect x="98.5743%" y="181" width="0.2037%" height="15" fill="rgb(221,32,16)" fg:x="484" fg:w="1"/><text x="98.8243%" y="191.50"></text></g><g><title>H5O_unprotect (1 samples, 0.20%)</title><rect x="98.5743%" y="165" width="0.2037%" height="15" fill="rgb(228,144,50)" fg:x="484" fg:w="1"/><text x="98.8243%" y="175.50"></text></g><g><title>H5AC_unprotect (1 samples, 0.20%)</title><rect x="98.5743%" y="149" width="0.2037%" height="15" fill="rgb(229,201,53)" fg:x="484" fg:w="1"/><text x="98.8243%" y="159.50"></text></g><g><title>H5C_unprotect (1 samples, 0.20%)</title><rect x="98.5743%" y="133" width="0.2037%" height="15" fill="rgb(249,153,27)" fg:x="484" fg:w="1"/><text x="98.8243%" y="143.50"></text></g><g><title>H5O_msg_exists_oh (1 samples, 0.20%)</title><rect x="98.7780%" y="229" width="0.2037%" height="15" fill="rgb(227,106,25)" fg:x="485" fg:w="1"/><text x="99.0280%" y="239.50"></text></g><g><title>NeuralNetwork::parseBatchNormalizationLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (7 samples, 1.43%)</title><rect x="97.7597%" y="325" width="1.4257%" height="15" fill="rgb(230,65,29)" fg:x="480" fg:w="7"/><text x="98.0097%" y="335.50"></text></g><g><title>H5Gopen2 (4 samples, 0.81%)</title><rect x="98.3707%" y="309" width="0.8147%" height="15" fill="rgb(221,57,46)" fg:x="483" fg:w="4"/><text x="98.6207%" y="319.50"></text></g><g><title>H5VL_group_open (4 samples, 0.81%)</title><rect x="98.3707%" y="293" width="0.8147%" height="15" fill="rgb(229,161,17)" fg:x="483" fg:w="4"/><text x="98.6207%" y="303.50"></text></g><g><title>H5VL__native_group_open (4 samples, 0.81%)</title><rect x="98.3707%" y="277" width="0.8147%" height="15" fill="rgb(222,213,11)" fg:x="483" fg:w="4"/><text x="98.6207%" y="287.50"></text></g><g><title>H5G__open_name (4 samples, 0.81%)</title><rect x="98.3707%" y="261" width="0.8147%" height="15" fill="rgb(235,35,13)" fg:x="483" fg:w="4"/><text x="98.6207%" y="271.50"></text></g><g><title>H5O_obj_type (2 samples, 0.41%)</title><rect x="98.7780%" y="245" width="0.4073%" height="15" fill="rgb(233,158,34)" fg:x="485" fg:w="2"/><text x="99.0280%" y="255.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="98.9817%" y="229" width="0.2037%" height="15" fill="rgb(215,151,48)" fg:x="486" fg:w="1"/><text x="99.2317%" y="239.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="98.9817%" y="213" width="0.2037%" height="15" fill="rgb(229,84,14)" fg:x="486" fg:w="1"/><text x="99.2317%" y="223.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="98.9817%" y="197" width="0.2037%" height="15" fill="rgb(229,68,14)" fg:x="486" fg:w="1"/><text x="99.2317%" y="207.50"></text></g><g><title>H5F_block_read (1 samples, 0.20%)</title><rect x="98.9817%" y="181" width="0.2037%" height="15" fill="rgb(243,106,26)" fg:x="486" fg:w="1"/><text x="99.2317%" y="191.50"></text></g><g><title>H5PB_read (1 samples, 0.20%)</title><rect x="98.9817%" y="165" width="0.2037%" height="15" fill="rgb(206,45,38)" fg:x="486" fg:w="1"/><text x="99.2317%" y="175.50"></text></g><g><title>H5F__accum_read (1 samples, 0.20%)</title><rect x="98.9817%" y="149" width="0.2037%" height="15" fill="rgb(226,6,15)" fg:x="486" fg:w="1"/><text x="99.2317%" y="159.50"></text></g><g><title>H5FD_read (1 samples, 0.20%)</title><rect x="98.9817%" y="133" width="0.2037%" height="15" fill="rgb(232,22,54)" fg:x="486" fg:w="1"/><text x="99.2317%" y="143.50"></text></g><g><title>__libc_pread64 (1 samples, 0.20%)</title><rect x="98.9817%" y="117" width="0.2037%" height="15" fill="rgb(229,222,32)" fg:x="486" fg:w="1"/><text x="99.2317%" y="127.50"></text></g><g><title>H5Dread (1 samples, 0.20%)</title><rect x="99.1853%" y="309" width="0.2037%" height="15" fill="rgb(228,62,29)" fg:x="487" fg:w="1"/><text x="99.4353%" y="319.50"></text></g><g><title>H5VL_dataset_read (1 samples, 0.20%)</title><rect x="99.1853%" y="293" width="0.2037%" height="15" fill="rgb(251,103,34)" fg:x="487" fg:w="1"/><text x="99.4353%" y="303.50"></text></g><g><title>H5VL__native_dataset_read (1 samples, 0.20%)</title><rect x="99.1853%" y="277" width="0.2037%" height="15" fill="rgb(233,12,30)" fg:x="487" fg:w="1"/><text x="99.4353%" y="287.50"></text></g><g><title>H5D__read (1 samples, 0.20%)</title><rect x="99.1853%" y="261" width="0.2037%" height="15" fill="rgb(238,52,0)" fg:x="487" fg:w="1"/><text x="99.4353%" y="271.50"></text></g><g><title>H5D__contig_read (1 samples, 0.20%)</title><rect x="99.1853%" y="245" width="0.2037%" height="15" fill="rgb(223,98,5)" fg:x="487" fg:w="1"/><text x="99.4353%" y="255.50"></text></g><g><title>H5D__select_read (1 samples, 0.20%)</title><rect x="99.1853%" y="229" width="0.2037%" height="15" fill="rgb(228,75,37)" fg:x="487" fg:w="1"/><text x="99.4353%" y="239.50"></text></g><g><title>H5VM_opvv (1 samples, 0.20%)</title><rect x="99.1853%" y="213" width="0.2037%" height="15" fill="rgb(205,115,49)" fg:x="487" fg:w="1"/><text x="99.4353%" y="223.50"></text></g><g><title>H5FL_blk_calloc (1 samples, 0.20%)</title><rect x="99.1853%" y="197" width="0.2037%" height="15" fill="rgb(250,154,43)" fg:x="487" fg:w="1"/><text x="99.4353%" y="207.50"></text></g><g><title>__memset_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="99.1853%" y="181" width="0.2037%" height="15" fill="rgb(226,43,29)" fg:x="487" fg:w="1"/><text x="99.4353%" y="191.50"></text></g><g><title>NeuralNetwork::parseConv2DLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (2 samples, 0.41%)</title><rect x="99.1853%" y="325" width="0.4073%" height="15" fill="rgb(249,228,39)" fg:x="487" fg:w="2"/><text x="99.4353%" y="335.50"></text></g><g><title>H5Gopen2 (1 samples, 0.20%)</title><rect x="99.3890%" y="309" width="0.2037%" height="15" fill="rgb(216,79,43)" fg:x="488" fg:w="1"/><text x="99.6390%" y="319.50"></text></g><g><title>H5VL_group_open (1 samples, 0.20%)</title><rect x="99.3890%" y="293" width="0.2037%" height="15" fill="rgb(228,95,12)" fg:x="488" fg:w="1"/><text x="99.6390%" y="303.50"></text></g><g><title>H5VL__native_group_open (1 samples, 0.20%)</title><rect x="99.3890%" y="277" width="0.2037%" height="15" fill="rgb(249,221,15)" fg:x="488" fg:w="1"/><text x="99.6390%" y="287.50"></text></g><g><title>H5G__open_name (1 samples, 0.20%)</title><rect x="99.3890%" y="261" width="0.2037%" height="15" fill="rgb(233,34,13)" fg:x="488" fg:w="1"/><text x="99.6390%" y="271.50"></text></g><g><title>H5G_loc_find (1 samples, 0.20%)</title><rect x="99.3890%" y="245" width="0.2037%" height="15" fill="rgb(214,103,39)" fg:x="488" fg:w="1"/><text x="99.6390%" y="255.50"></text></g><g><title>H5G_traverse (1 samples, 0.20%)</title><rect x="99.3890%" y="229" width="0.2037%" height="15" fill="rgb(251,126,39)" fg:x="488" fg:w="1"/><text x="99.6390%" y="239.50"></text></g><g><title>H5G__obj_lookup (1 samples, 0.20%)</title><rect x="99.3890%" y="213" width="0.2037%" height="15" fill="rgb(214,216,36)" fg:x="488" fg:w="1"/><text x="99.6390%" y="223.50"></text></g><g><title>H5G__obj_get_linfo (1 samples, 0.20%)</title><rect x="99.3890%" y="197" width="0.2037%" height="15" fill="rgb(220,221,8)" fg:x="488" fg:w="1"/><text x="99.6390%" y="207.50"></text></g><g><title>H5O_msg_exists (1 samples, 0.20%)</title><rect x="99.3890%" y="181" width="0.2037%" height="15" fill="rgb(240,216,3)" fg:x="488" fg:w="1"/><text x="99.6390%" y="191.50"></text></g><g><title>H5O_protect (1 samples, 0.20%)</title><rect x="99.3890%" y="165" width="0.2037%" height="15" fill="rgb(232,218,17)" fg:x="488" fg:w="1"/><text x="99.6390%" y="175.50"></text></g><g><title>H5AC_protect (1 samples, 0.20%)</title><rect x="99.3890%" y="149" width="0.2037%" height="15" fill="rgb(229,163,45)" fg:x="488" fg:w="1"/><text x="99.6390%" y="159.50"></text></g><g><title>H5C_protect (1 samples, 0.20%)</title><rect x="99.3890%" y="133" width="0.2037%" height="15" fill="rgb(231,110,42)" fg:x="488" fg:w="1"/><text x="99.6390%" y="143.50"></text></g><g><title>NeuralNetwork::parseDenseLayer(SimpleMap::Record const*, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="99.5927%" y="325" width="0.2037%" height="15" fill="rgb(208,170,48)" fg:x="489" fg:w="1"/><text x="99.8427%" y="335.50"></text></g><g><title>H5Dopen2 (1 samples, 0.20%)</title><rect x="99.5927%" y="309" width="0.2037%" height="15" fill="rgb(239,116,25)" fg:x="489" fg:w="1"/><text x="99.8427%" y="319.50"></text></g><g><title>H5VL_dataset_open (1 samples, 0.20%)</title><rect x="99.5927%" y="293" width="0.2037%" height="15" fill="rgb(219,200,50)" fg:x="489" fg:w="1"/><text x="99.8427%" y="303.50"></text></g><g><title>H5VL__native_dataset_open (1 samples, 0.20%)</title><rect x="99.5927%" y="277" width="0.2037%" height="15" fill="rgb(245,200,0)" fg:x="489" fg:w="1"/><text x="99.8427%" y="287.50"></text></g><g><title>H5D__open_name (1 samples, 0.20%)</title><rect x="99.5927%" y="261" width="0.2037%" height="15" fill="rgb(245,119,33)" fg:x="489" fg:w="1"/><text x="99.8427%" y="271.50"></text></g><g><title>H5D_open (1 samples, 0.20%)</title><rect x="99.5927%" y="245" width="0.2037%" height="15" fill="rgb(231,125,12)" fg:x="489" fg:w="1"/><text x="99.8427%" y="255.50"></text></g><g><title>H5P_copy_plist (1 samples, 0.20%)</title><rect x="99.5927%" y="229" width="0.2037%" height="15" fill="rgb(216,96,41)" fg:x="489" fg:w="1"/><text x="99.8427%" y="239.50"></text></g><g><title>all (491 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(248,43,45)" fg:x="0" fg:w="491"/><text x="0.2500%" y="671.50"></text></g><g><title>benchmark (491 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(217,222,7)" fg:x="0" fg:w="491"/><text x="0.2500%" y="655.50">benchmark</text></g><g><title>_start (479 samples, 97.56%)</title><rect x="2.4440%" y="629" width="97.5560%" height="15" fill="rgb(233,28,6)" fg:x="12" fg:w="479"/><text x="2.6940%" y="639.50">_start</text></g><g><title>__libc_start_main_impl (479 samples, 97.56%)</title><rect x="2.4440%" y="613" width="97.5560%" height="15" fill="rgb(231,218,15)" fg:x="12" fg:w="479"/><text x="2.6940%" y="623.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (479 samples, 97.56%)</title><rect x="2.4440%" y="597" width="97.5560%" height="15" fill="rgb(226,171,48)" fg:x="12" fg:w="479"/><text x="2.6940%" y="607.50">__libc_start_call_main</text></g><g><title>main (479 samples, 97.56%)</title><rect x="2.4440%" y="581" width="97.5560%" height="15" fill="rgb(235,201,9)" fg:x="12" fg:w="479"/><text x="2.6940%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (479 samples, 97.56%)</title><rect x="2.4440%" y="565" width="97.5560%" height="15" fill="rgb(217,80,15)" fg:x="12" fg:w="479"/><text x="2.6940%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (479 samples, 97.56%)</title><rect x="2.4440%" y="549" width="97.5560%" height="15" fill="rgb(219,152,8)" fg:x="12" fg:w="479"/><text x="2.6940%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (479 samples, 97.56%)</title><rect x="2.4440%" y="533" width="97.5560%" height="15" fill="rgb(243,107,38)" fg:x="12" fg:w="479"/><text x="2.6940%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>benchmark::main (479 samples, 97.56%)</title><rect x="2.4440%" y="517" width="97.5560%" height="15" fill="rgb(231,17,5)" fg:x="12" fg:w="479"/><text x="2.6940%" y="527.50">benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (479 samples, 97.56%)</title><rect x="2.4440%" y="501" width="97.5560%" height="15" fill="rgb(209,25,54)" fg:x="12" fg:w="479"/><text x="2.6940%" y="511.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (479 samples, 97.56%)</title><rect x="2.4440%" y="485" width="97.5560%" height="15" fill="rgb(219,0,2)" fg:x="12" fg:w="479"/><text x="2.6940%" y="495.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (169 samples, 34.42%)</title><rect x="65.5804%" y="469" width="34.4196%" height="15" fill="rgb(246,9,5)" fg:x="322" fg:w="169"/><text x="65.8304%" y="479.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched_ref (169 samples, 34.42%)</title><rect x="65.5804%" y="453" width="34.4196%" height="15" fill="rgb(226,159,4)" fg:x="322" fg:w="169"/><text x="65.8304%" y="463.50">criterion::bencher::Bencher&lt;M&gt;::iter_batched_ref</text></g><g><title>nn_backend_test::nn_runners::compiled_nn_runner::CompiledNNRunner::new (19 samples, 3.87%)</title><rect x="96.1303%" y="437" width="3.8697%" height="15" fill="rgb(219,175,34)" fg:x="472" fg:w="19"/><text x="96.3803%" y="447.50">nn_b..</text></g><g><title>compiled_nn::compiled_nn::CompiledNN::compile (19 samples, 3.87%)</title><rect x="96.1303%" y="421" width="3.8697%" height="15" fill="rgb(236,10,46)" fg:x="472" fg:w="19"/><text x="96.3803%" y="431.50">comp..</text></g><g><title>CompiledNN::compile(char const*) (19 samples, 3.87%)</title><rect x="96.1303%" y="405" width="3.8697%" height="15" fill="rgb(240,211,16)" fg:x="472" fg:w="19"/><text x="96.3803%" y="415.50">Comp..</text></g><g><title>NeuralNetwork::CompiledNN::compile(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, NeuralNetwork::CompilationSettings const&amp;) (19 samples, 3.87%)</title><rect x="96.1303%" y="389" width="3.8697%" height="15" fill="rgb(205,3,43)" fg:x="472" fg:w="19"/><text x="96.3803%" y="399.50">Neur..</text></g><g><title>NeuralNetwork::Model::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (16 samples, 3.26%)</title><rect x="96.7413%" y="373" width="3.2587%" height="15" fill="rgb(245,7,22)" fg:x="475" fg:w="16"/><text x="96.9913%" y="383.50">Neu..</text></g><g><title>NeuralNetwork::KerasHDF5::read(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (16 samples, 3.26%)</title><rect x="96.7413%" y="357" width="3.2587%" height="15" fill="rgb(239,132,32)" fg:x="475" fg:w="16"/><text x="96.9913%" y="367.50">Neu..</text></g><g><title>NeuralNetwork::KerasHDF5::parseJSONModel(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::function&lt;void (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;)&gt; const&amp;, unsigned long) (12 samples, 2.44%)</title><rect x="97.5560%" y="341" width="2.4440%" height="15" fill="rgb(228,202,34)" fg:x="479" fg:w="12"/><text x="97.8060%" y="351.50">Ne..</text></g><g><title>SimpleMap::SimpleMap(In&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool) (1 samples, 0.20%)</title><rect x="99.7963%" y="325" width="0.2037%" height="15" fill="rgb(254,200,22)" fg:x="490" fg:w="1"/><text x="100.0463%" y="335.50"></text></g><g><title>SimpleMap::parseRecord() (1 samples, 0.20%)</title><rect x="99.7963%" y="309" width="0.2037%" height="15" fill="rgb(219,10,39)" fg:x="490" fg:w="1"/><text x="100.0463%" y="319.50"></text></g><g><title>SimpleMap::parseRecord() (1 samples, 0.20%)</title><rect x="99.7963%" y="293" width="0.2037%" height="15" fill="rgb(226,210,39)" fg:x="490" fg:w="1"/><text x="100.0463%" y="303.50"></text></g><g><title>SimpleMap::parseArray() (1 samples, 0.20%)</title><rect x="99.7963%" y="277" width="0.2037%" height="15" fill="rgb(208,219,16)" fg:x="490" fg:w="1"/><text x="100.0463%" y="287.50"></text></g><g><title>SimpleMap::parseRecord() (1 samples, 0.20%)</title><rect x="99.7963%" y="261" width="0.2037%" height="15" fill="rgb(216,158,51)" fg:x="490" fg:w="1"/><text x="100.0463%" y="271.50"></text></g><g><title>SimpleMap::parseRecord() (1 samples, 0.20%)</title><rect x="99.7963%" y="245" width="0.2037%" height="15" fill="rgb(233,14,44)" fg:x="490" fg:w="1"/><text x="100.0463%" y="255.50"></text></g><g><title>SimpleMap::nextSymbol() (1 samples, 0.20%)</title><rect x="99.7963%" y="229" width="0.2037%" height="15" fill="rgb(237,97,39)" fg:x="490" fg:w="1"/><text x="100.0463%" y="239.50"></text></g><g><title>InMemory::readFromStream(void*, unsigned long) (1 samples, 0.20%)</title><rect x="99.7963%" y="213" width="0.2037%" height="15" fill="rgb(218,198,43)" fg:x="490" fg:w="1"/><text x="100.0463%" y="223.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.20%)</title><rect x="99.7963%" y="197" width="0.2037%" height="15" fill="rgb(231,104,20)" fg:x="490" fg:w="1"/><text x="100.0463%" y="207.50"></text></g></svg></svg>